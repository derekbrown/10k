{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { Trie } from '@wry/trie';\nimport { getFragmentFromSelection, isField, getTypenameFromResult, storeKeyNameFromField, argumentsObjectFromField, isReference, getStoreKeyName, canUseWeakMap, isNonNullObject, stringifyForDisplay } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName, storeValueIsStoreObject, selectionSetMatchesResult, TypeOrFieldNameRegExp, defaultDataIdFromObject } from \"./helpers.js\";\nimport { cacheSlot } from \"./reactiveVars.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\ngetStoreKeyName.setStringify(canonicalStringify);\n\nfunction argsFromFieldSpecifier(spec) {\n  return spec.args !== void 0 ? spec.args : spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;\n}\n\nvar nullKeyFieldsFn = function () {\n  return void 0;\n};\n\nvar simpleKeyArgsFn = function (_args, context) {\n  return context.fieldName;\n};\n\nvar mergeTrueFn = function (existing, incoming, _a) {\n  var mergeObjects = _a.mergeObjects;\n  return mergeObjects(existing, incoming);\n};\n\nvar mergeFalseFn = function (_, incoming) {\n  return incoming;\n};\n\nvar Policies = function () {\n  function Policies(config) {\n    this.config = config;\n    this.typePolicies = Object.create(null);\n    this.toBeAdded = Object.create(null);\n    this.supertypeMap = new Map();\n    this.fuzzySubtypes = new Map();\n    this.rootIdsByTypename = Object.create(null);\n    this.rootTypenamesById = Object.create(null);\n    this.usingPossibleTypes = false;\n    this.config = __assign({\n      dataIdFromObject: defaultDataIdFromObject\n    }, config);\n    this.cache = this.config.cache;\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n\n  Policies.prototype.identify = function (object, selectionSet, fragmentMap) {\n    var typename = selectionSet && fragmentMap ? getTypenameFromResult(object, selectionSet, fragmentMap) : object.__typename;\n\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n\n    var context = {\n      typename: typename,\n      selectionSet: selectionSet,\n      fragmentMap: fragmentMap\n    };\n    var id;\n    var policy = typename && this.getTypePolicy(typename);\n    var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n\n    while (keyFn) {\n      var specifierOrId = keyFn(object, context);\n\n      if (Array.isArray(specifierOrId)) {\n        keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n      } else {\n        id = specifierOrId;\n        break;\n      }\n    }\n\n    id = id ? String(id) : void 0;\n    return context.keyObject ? [id, context.keyObject] : [id];\n  };\n\n  Policies.prototype.addTypePolicies = function (typePolicies) {\n    var _this = this;\n\n    Object.keys(typePolicies).forEach(function (typename) {\n      var _a = typePolicies[typename],\n          queryType = _a.queryType,\n          mutationType = _a.mutationType,\n          subscriptionType = _a.subscriptionType,\n          incoming = __rest(_a, [\"queryType\", \"mutationType\", \"subscriptionType\"]);\n\n      if (queryType) _this.setRootTypename(\"Query\", typename);\n      if (mutationType) _this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) _this.setRootTypename(\"Subscription\", typename);\n\n      if (hasOwn.call(_this.toBeAdded, typename)) {\n        _this.toBeAdded[typename].push(incoming);\n      } else {\n        _this.toBeAdded[typename] = [incoming];\n      }\n    });\n  };\n\n  Policies.prototype.updateTypePolicy = function (typename, incoming) {\n    var _this = this;\n\n    var existing = this.getTypePolicy(typename);\n    var keyFields = incoming.keyFields,\n        fields = incoming.fields;\n\n    function setMerge(existing, merge) {\n      existing.merge = typeof merge === \"function\" ? merge : merge === true ? mergeTrueFn : merge === false ? mergeFalseFn : existing.merge;\n    }\n\n    setMerge(existing, incoming.merge);\n    existing.keyFn = keyFields === false ? nullKeyFieldsFn : Array.isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) : typeof keyFields === \"function\" ? keyFields : existing.keyFn;\n\n    if (fields) {\n      Object.keys(fields).forEach(function (fieldName) {\n        var existing = _this.getFieldPolicy(typename, fieldName, true);\n\n        var incoming = fields[fieldName];\n\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          var keyArgs = incoming.keyArgs,\n              read = incoming.read,\n              merge = incoming.merge;\n          existing.keyFn = keyArgs === false ? simpleKeyArgsFn : Array.isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) : typeof keyArgs === \"function\" ? keyArgs : existing.keyFn;\n\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n\n          setMerge(existing, merge);\n        }\n\n        if (existing.read && existing.merge) {\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  };\n\n  Policies.prototype.setRootTypename = function (which, typename) {\n    if (typename === void 0) {\n      typename = which;\n    }\n\n    var rootId = \"ROOT_\" + which.toUpperCase();\n    var old = this.rootTypenamesById[rootId];\n\n    if (typename !== old) {\n      __DEV__ ? invariant(!old || old === which, \"Cannot change root \" + which + \" __typename more than once\") : invariant(!old || old === which, 2);\n      if (old) delete this.rootIdsByTypename[old];\n      this.rootIdsByTypename[typename] = rootId;\n      this.rootTypenamesById[rootId] = typename;\n    }\n  };\n\n  Policies.prototype.addPossibleTypes = function (possibleTypes) {\n    var _this = this;\n\n    this.usingPossibleTypes = true;\n    Object.keys(possibleTypes).forEach(function (supertype) {\n      _this.getSupertypeSet(supertype, true);\n\n      possibleTypes[supertype].forEach(function (subtype) {\n        _this.getSupertypeSet(subtype, true).add(supertype);\n\n        var match = subtype.match(TypeOrFieldNameRegExp);\n\n        if (!match || match[0] !== subtype) {\n          _this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  };\n\n  Policies.prototype.getTypePolicy = function (typename) {\n    var _this = this;\n\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      var policy_1 = this.typePolicies[typename] = Object.create(null);\n      policy_1.fields = Object.create(null);\n      var supertypes = this.supertypeMap.get(typename);\n\n      if (supertypes && supertypes.size) {\n        supertypes.forEach(function (supertype) {\n          var _a = _this.getTypePolicy(supertype),\n              fields = _a.fields,\n              rest = __rest(_a, [\"fields\"]);\n\n          Object.assign(policy_1, rest);\n          Object.assign(policy_1.fields, fields);\n        });\n      }\n    }\n\n    var inbox = this.toBeAdded[typename];\n\n    if (inbox && inbox.length) {\n      inbox.splice(0).forEach(function (policy) {\n        _this.updateTypePolicy(typename, policy);\n      });\n    }\n\n    return this.typePolicies[typename];\n  };\n\n  Policies.prototype.getFieldPolicy = function (typename, fieldName, createIfMissing) {\n    if (typename) {\n      var fieldPolicies = this.getTypePolicy(typename).fields;\n      return fieldPolicies[fieldName] || createIfMissing && (fieldPolicies[fieldName] = Object.create(null));\n    }\n  };\n\n  Policies.prototype.getSupertypeSet = function (subtype, createIfMissing) {\n    var supertypeSet = this.supertypeMap.get(subtype);\n\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, supertypeSet = new Set());\n    }\n\n    return supertypeSet;\n  };\n\n  Policies.prototype.fragmentMatches = function (fragment, typename, result, variables) {\n    var _this = this;\n\n    if (!fragment.typeCondition) return true;\n    if (!typename) return false;\n    var supertype = fragment.typeCondition.name.value;\n    if (typename === supertype) return true;\n\n    if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n      var typenameSupertypeSet = this.getSupertypeSet(typename, true);\n      var workQueue_1 = [typenameSupertypeSet];\n\n      var maybeEnqueue_1 = function (subtype) {\n        var supertypeSet = _this.getSupertypeSet(subtype, false);\n\n        if (supertypeSet && supertypeSet.size && workQueue_1.indexOf(supertypeSet) < 0) {\n          workQueue_1.push(supertypeSet);\n        }\n      };\n\n      var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      var checkingFuzzySubtypes = false;\n\n      for (var i = 0; i < workQueue_1.length; ++i) {\n        var supertypeSet = workQueue_1[i];\n\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              __DEV__ && invariant.warn(\"Inferring subtype \" + typename + \" of supertype \" + supertype);\n            }\n\n            typenameSupertypeSet.add(supertype);\n          }\n\n          return true;\n        }\n\n        supertypeSet.forEach(maybeEnqueue_1);\n\n        if (needToCheckFuzzySubtypes && i === workQueue_1.length - 1 && selectionSetMatchesResult(fragment.selectionSet, result, variables)) {\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n          this.fuzzySubtypes.forEach(function (regExp, fuzzyString) {\n            var match = typename.match(regExp);\n\n            if (match && match[0] === typename) {\n              maybeEnqueue_1(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n\n    return false;\n  };\n\n  Policies.prototype.hasKeyArgs = function (typename, fieldName) {\n    var policy = this.getFieldPolicy(typename, fieldName, false);\n    return !!(policy && policy.keyFn);\n  };\n\n  Policies.prototype.getStoreFieldName = function (fieldSpec) {\n    var typename = fieldSpec.typename,\n        fieldName = fieldSpec.fieldName;\n    var policy = this.getFieldPolicy(typename, fieldName, false);\n    var storeFieldName;\n    var keyFn = policy && policy.keyFn;\n\n    if (keyFn && typename) {\n      var context = {\n        typename: typename,\n        fieldName: fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables\n      };\n      var args = argsFromFieldSpecifier(fieldSpec);\n\n      while (keyFn) {\n        var specifierOrString = keyFn(args, context);\n\n        if (Array.isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n\n    if (storeFieldName === void 0) {\n      storeFieldName = fieldSpec.field ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables) : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n\n    if (storeFieldName === false) {\n      return fieldName;\n    }\n\n    return fieldName === fieldNameFromStoreName(storeFieldName) ? storeFieldName : fieldName + \":\" + storeFieldName;\n  };\n\n  Policies.prototype.readField = function (options, context) {\n    var objectOrReference = options.from;\n    if (!objectOrReference) return;\n    var nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n\n    if (options.typename === void 0) {\n      var typename = context.store.getFieldValue(objectOrReference, \"__typename\");\n      if (typename) options.typename = typename;\n    }\n\n    var storeFieldName = this.getStoreFieldName(options);\n    var fieldName = fieldNameFromStoreName(storeFieldName);\n    var existing = context.store.getFieldValue(objectOrReference, storeFieldName);\n    var policy = this.getFieldPolicy(options.typename, fieldName, false);\n    var read = policy && policy.read;\n\n    if (read) {\n      var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage(isReference(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));\n      return cacheSlot.withValue(this.cache, read, [existing, readOptions]);\n    }\n\n    return existing;\n  };\n\n  Policies.prototype.getMergeFunction = function (parentTypename, fieldName, childTypename) {\n    var policy = this.getFieldPolicy(parentTypename, fieldName, false);\n    var merge = policy && policy.merge;\n\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n\n    return merge;\n  };\n\n  Policies.prototype.runMergeFunction = function (existing, incoming, _a, context, storage) {\n    var field = _a.field,\n        typename = _a.typename,\n        merge = _a.merge;\n\n    if (merge === mergeTrueFn) {\n      return makeMergeObjectsFunction(context.store)(existing, incoming);\n    }\n\n    if (merge === mergeFalseFn) {\n      return incoming;\n    }\n\n    if (context.overwrite) {\n      existing = void 0;\n    }\n\n    return merge(existing, incoming, makeFieldFunctionOptions(this, void 0, {\n      typename: typename,\n      fieldName: field.name.value,\n      field: field,\n      variables: context.variables\n    }, context, storage || Object.create(null)));\n  };\n\n  return Policies;\n}();\n\nexport { Policies };\n\nfunction makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {\n  var storeFieldName = policies.getStoreFieldName(fieldSpec);\n  var fieldName = fieldNameFromStoreName(storeFieldName);\n  var variables = fieldSpec.variables || context.variables;\n  var _a = context.store,\n      toReference = _a.toReference,\n      canRead = _a.canRead;\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName: fieldName,\n    storeFieldName: storeFieldName,\n    variables: variables,\n    isReference: isReference,\n    toReference: toReference,\n    storage: storage,\n    cache: policies.cache,\n    canRead: canRead,\n    readField: function (fieldNameOrOptions, from) {\n      var options;\n\n      if (typeof fieldNameOrOptions === \"string\") {\n        options = {\n          fieldName: fieldNameOrOptions,\n          from: arguments.length > 1 ? from : objectOrReference\n        };\n      } else if (isNonNullObject(fieldNameOrOptions)) {\n        options = __assign({}, fieldNameOrOptions);\n\n        if (!hasOwn.call(fieldNameOrOptions, \"from\")) {\n          options.from = objectOrReference;\n        }\n      } else {\n        __DEV__ && invariant.warn(\"Unexpected readField arguments: \" + stringifyForDisplay(Array.from(arguments)));\n        return;\n      }\n\n      if (__DEV__ && options.from === void 0) {\n        __DEV__ && invariant.warn(\"Undefined 'from' passed to readField with arguments \" + stringifyForDisplay(Array.from(arguments)));\n      }\n\n      if (void 0 === options.variables) {\n        options.variables = variables;\n      }\n\n      return policies.readField(options, context);\n    },\n    mergeObjects: makeMergeObjectsFunction(context.store)\n  };\n}\n\nfunction makeMergeObjectsFunction(store) {\n  return function mergeObjects(existing, incoming) {\n    if (Array.isArray(existing) || Array.isArray(incoming)) {\n      throw __DEV__ ? new InvariantError(\"Cannot automatically merge arrays\") : new InvariantError(3);\n    }\n\n    if (isNonNullObject(existing) && isNonNullObject(incoming)) {\n      var eType = store.getFieldValue(existing, \"__typename\");\n      var iType = store.getFieldValue(incoming, \"__typename\");\n      var typesDiffer = eType && iType && eType !== iType;\n\n      if (typesDiffer) {\n        return incoming;\n      }\n\n      if (isReference(existing) && storeValueIsStoreObject(incoming)) {\n        store.merge(existing.__ref, incoming);\n        return existing;\n      }\n\n      if (storeValueIsStoreObject(existing) && isReference(incoming)) {\n        store.merge(existing, incoming.__ref);\n        return incoming;\n      }\n\n      if (storeValueIsStoreObject(existing) && storeValueIsStoreObject(incoming)) {\n        return __assign(__assign({}, existing), incoming);\n      }\n    }\n\n    return incoming;\n  };\n}\n\nfunction keyArgsFnFromSpecifier(specifier) {\n  return function (args, context) {\n    return args ? context.fieldName + \":\" + JSON.stringify(computeKeyObject(args, specifier, false)) : context.fieldName;\n  };\n}\n\nfunction keyFieldsFnFromSpecifier(specifier) {\n  var trie = new Trie(canUseWeakMap);\n  return function (object, context) {\n    var aliasMap;\n\n    if (context.selectionSet && context.fragmentMap) {\n      var info = trie.lookupArray([context.selectionSet, context.fragmentMap]);\n      aliasMap = info.aliasMap || (info.aliasMap = makeAliasMap(context.selectionSet, context.fragmentMap));\n    }\n\n    var keyObject = context.keyObject = computeKeyObject(object, specifier, true, aliasMap);\n    return context.typename + \":\" + JSON.stringify(keyObject);\n  };\n}\n\nfunction makeAliasMap(selectionSet, fragmentMap) {\n  var map = Object.create(null);\n  var workQueue = new Set([selectionSet]);\n  workQueue.forEach(function (selectionSet) {\n    selectionSet.selections.forEach(function (selection) {\n      if (isField(selection)) {\n        if (selection.alias) {\n          var responseKey = selection.alias.value;\n          var storeKey = selection.name.value;\n\n          if (storeKey !== responseKey) {\n            var aliases = map.aliases || (map.aliases = Object.create(null));\n            aliases[storeKey] = responseKey;\n          }\n        }\n\n        if (selection.selectionSet) {\n          var subsets = map.subsets || (map.subsets = Object.create(null));\n          subsets[selection.name.value] = makeAliasMap(selection.selectionSet, fragmentMap);\n        }\n      } else {\n        var fragment = getFragmentFromSelection(selection, fragmentMap);\n\n        if (fragment) {\n          workQueue.add(fragment.selectionSet);\n        }\n      }\n    });\n  });\n  return map;\n}\n\nfunction computeKeyObject(response, specifier, strict, aliasMap) {\n  var keyObj = Object.create(null);\n  var lastResponseKey;\n  var lastActualKey;\n  specifier.forEach(function (s) {\n    if (Array.isArray(s)) {\n      if (typeof lastActualKey === \"string\" && typeof lastResponseKey === \"string\") {\n        var subsets = aliasMap && aliasMap.subsets;\n        var subset = subsets && subsets[lastActualKey];\n        keyObj[lastActualKey] = computeKeyObject(response[lastResponseKey], s, strict, subset);\n      }\n    } else {\n      var aliases = aliasMap && aliasMap.aliases;\n      var responseName = aliases && aliases[s] || s;\n\n      if (hasOwn.call(response, responseName)) {\n        keyObj[lastActualKey = s] = response[lastResponseKey = responseName];\n      } else {\n        __DEV__ ? invariant(!strict, \"Missing field '\" + responseName + \"' while computing key fields\") : invariant(!strict, 4);\n        lastResponseKey = lastActualKey = void 0;\n      }\n    }\n  });\n  return keyObj;\n}","map":{"version":3,"mappings":"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","names":["invariant","InvariantError","Trie","getFragmentFromSelection","isField","getTypenameFromResult","storeKeyNameFromField","argumentsObjectFromField","isReference","getStoreKeyName","canUseWeakMap","isNonNullObject","stringifyForDisplay","hasOwn","fieldNameFromStoreName","storeValueIsStoreObject","selectionSetMatchesResult","TypeOrFieldNameRegExp","defaultDataIdFromObject","cacheSlot","canonicalStringify","setStringify","argsFromFieldSpecifier","spec","args","field","variables","nullKeyFieldsFn","simpleKeyArgsFn","_args","context","fieldName","mergeTrueFn","existing","incoming","_a","mergeObjects","mergeFalseFn","_","config","Object","create","Map","__assign","dataIdFromObject","cache","setRootTypename","possibleTypes","addPossibleTypes","typePolicies","addTypePolicies","Policies","object","selectionSet","fragmentMap","typename","__typename","rootTypenamesById","ROOT_QUERY","id","policy","getTypePolicy","keyFn","specifierOrId","Array","isArray","keyFieldsFnFromSpecifier","String","keyObject","keys","forEach","queryType","mutationType","subscriptionType","_this","call","toBeAdded","push","fields","setMerge","merge","keyFields","getFieldPolicy","read","keyArgs","keyArgsFnFromSpecifier","which","rootId","toUpperCase","old","__DEV__","rootIdsByTypename","usingPossibleTypes","getSupertypeSet","supertype","subtype","add","match","fuzzySubtypes","set","RegExp","policy_1","supertypes","supertypeMap","get","size","rest","assign","inbox","length","splice","updateTypePolicy","createIfMissing","fieldPolicies","supertypeSet","Set","fragment","result","typeCondition","name","value","has","typenameSupertypeSet","workQueue_1","maybeEnqueue_1","indexOf","needToCheckFuzzySubtypes","checkingFuzzySubtypes","i","regExp","fuzzyString","fieldSpec","storeFieldName","specifierOrString","options","objectOrReference","from","nameOrField","store","getFieldValue","getStoreFieldName","readOptions","makeFieldFunctionOptions","getStorage","__ref","withValue","parentTypename","childTypename","storage","makeMergeObjectsFunction","overwrite","policies","toReference","canRead","readField","fieldNameOrOptions","arguments","eType","iType","typesDiffer","specifier","JSON","stringify","computeKeyObject","trie","aliasMap","info","lookupArray","makeAliasMap","map","workQueue","selections","selection","alias","responseKey","storeKey","aliases","subsets","response","strict","keyObj","lastResponseKey","lastActualKey","s","subset","responseName"],"sourceRoot":"","sources":["../../../src/cache/inmemory/policies.ts"],"sourcesContent":["import { invariant, InvariantError } from '../../utilities/globals';\n\nimport {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  SelectionSetNode,\n  FieldNode,\n} from 'graphql';\n\nimport { Trie } from '@wry/trie';\n\nimport {\n  FragmentMap,\n  getFragmentFromSelection,\n  isField,\n  getTypenameFromResult,\n  storeKeyNameFromField,\n  StoreValue,\n  StoreObject,\n  argumentsObjectFromField,\n  Reference,\n  isReference,\n  getStoreKeyName,\n  canUseWeakMap,\n  isNonNullObject,\n  stringifyForDisplay,\n} from '../../utilities';\nimport {\n  IdGetter,\n  MergeInfo,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from \"./types\";\nimport {\n  hasOwn,\n  fieldNameFromStoreName,\n  storeValueIsStoreObject,\n  selectionSetMatchesResult,\n  TypeOrFieldNameRegExp,\n  defaultDataIdFromObject,\n} from './helpers';\nimport { cacheSlot } from './reactiveVars';\nimport { InMemoryCache } from './inMemoryCache';\nimport {\n  SafeReadonly,\n  FieldSpecifier,\n  ToReferenceFunction,\n  ReadFieldFunction,\n  ReadFieldOptions,\n  CanReadFunction,\n} from '../core/types/common';\nimport { WriteContext } from './writeToStore';\n\n// Upgrade to a faster version of the default stable JSON.stringify function\n// used by getStoreKeyName. This function is used when computing storeFieldName\n// strings (when no keyArgs has been configured for a field).\nimport { canonicalStringify } from './object-canon';\n\ngetStoreKeyName.setStringify(canonicalStringify);\n\nexport type TypePolicies = {\n  [__typename: string]: TypePolicy;\n}\n\n// TypeScript 3.7 will allow recursive type aliases, so this should work:\n// type KeySpecifier = (string | KeySpecifier)[]\ntype KeySpecifier = (string | any[])[];\n\nexport type KeyFieldsContext = {\n  typename?: string;\n  selectionSet?: SelectionSetNode;\n  fragmentMap?: FragmentMap;\n  // May be set by the KeyFieldsFunction to report fields that were involved\n  // in computing the ID. Never passed in by the caller.\n  keyObject?: Record<string, any>;\n};\n\nexport type KeyFieldsFunction = (\n  object: Readonly<StoreObject>,\n  context: KeyFieldsContext,\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\ntype KeyFieldsResult = Exclude<ReturnType<KeyFieldsFunction>, KeySpecifier>;\n\n// TODO Should TypePolicy be a generic type, with a TObject or TEntity\n// type parameter?\nexport type TypePolicy = {\n  // Allows defining the primary key fields for this type, either using an\n  // array of field names or a function that returns an arbitrary string.\n  keyFields?: KeySpecifier | KeyFieldsFunction | false;\n\n  // Allows defining a merge function (or merge:true/false shorthand) to\n  // be used for merging objects of this type wherever they appear, unless\n  // the parent field also defines a merge function/boolean (that is,\n  // parent field merge functions take precedence over type policy merge\n  // functions). In many cases, defining merge:true for a given type\n  // policy can save you from specifying merge:true for all the field\n  // policies where that type might be encountered.\n  merge?: FieldMergeFunction | boolean;\n\n  // In the rare event that your schema happens to use a different\n  // __typename for the root Query, Mutation, and/or Schema types, you can\n  // express your deviant preferences by enabling one of these options.\n  queryType?: true,\n  mutationType?: true,\n  subscriptionType?: true,\n\n  fields?: {\n    [fieldName: string]:\n      | FieldPolicy<any>\n      | FieldReadFunction<any>;\n  }\n};\n\nexport type KeyArgsFunction = (\n  args: Record<string, any> | null,\n  context: {\n    typename: string;\n    fieldName: string;\n    field: FieldNode | null;\n    variables?: Record<string, any>;\n  },\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\ntype KeyArgsResult = Exclude<ReturnType<KeyArgsFunction>, KeySpecifier>;\n\nexport type FieldPolicy<\n  // The internal representation used to store the field's data in the\n  // cache. Must be JSON-serializable if you plan to serialize the result\n  // of cache.extract() using JSON.\n  TExisting = any,\n  // The type of the incoming parameter passed to the merge function,\n  // typically matching the GraphQL response format, but with Reference\n  // objects substituted for any identifiable child objects. Often the\n  // same as TExisting, but not necessarily.\n  TIncoming = TExisting,\n  // The type that the read function actually returns, using TExisting\n  // data and options.args as input. Usually the same as TIncoming.\n  TReadResult = TIncoming,\n  // Allows FieldFunctionOptions definition to be overwritten by the\n  // developer\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = {\n  keyArgs?: KeySpecifier | KeyArgsFunction | false;\n  read?: FieldReadFunction<TExisting, TReadResult, TOptions>;\n  merge?: FieldMergeFunction<TExisting, TIncoming, TOptions> | boolean;\n};\n\nexport type StorageType = Record<string, any>;\n\nfunction argsFromFieldSpecifier(spec: FieldSpecifier) {\n  return spec.args !== void 0 ? spec.args :\n    spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;\n}\n\nexport interface FieldFunctionOptions<\n  TArgs = Record<string, any>,\n  TVars = Record<string, any>,\n> {\n  args: TArgs | null;\n\n  // The name of the field, equal to options.field.name.value when\n  // options.field is available. Useful if you reuse the same function for\n  // multiple fields, and you need to know which field you're currently\n  // processing. Always a string, even when options.field is null.\n  fieldName: string;\n\n  // The full field key used internally, including serialized key arguments.\n  storeFieldName: string;\n\n  // The FieldNode object used to read this field. Useful if you need to\n  // know about other attributes of the field, such as its directives. This\n  // option will be null when a string was passed to options.readField.\n  field: FieldNode | null;\n\n  variables?: TVars;\n\n  // Utilities for dealing with { __ref } objects.\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n\n  // A handy place to put field-specific data that you want to survive\n  // across multiple read function calls. Useful for field-level caching,\n  // if your read function does any expensive work.\n  storage: StorageType;\n\n  cache: InMemoryCache;\n\n  // Helper function for reading other fields within the current object.\n  // If a foreign object or reference is provided, the field will be read\n  // from that object instead of the current object, so this function can\n  // be used (together with isReference) to examine the cache outside the\n  // current object. If a FieldNode is passed instead of a string, and\n  // that FieldNode has arguments, the same options.variables will be used\n  // to compute the argument values. Note that this function will invoke\n  // custom read functions for other fields, if defined. Always returns\n  // immutable data (enforced with Object.freeze in development).\n  readField: ReadFieldFunction;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  canRead: CanReadFunction;\n\n  // Instead of just merging objects with { ...existing, ...incoming }, this\n  // helper function can be used to merge objects in a way that respects any\n  // custom merge functions defined for their fields.\n  mergeObjects: MergeObjectsFunction;\n}\n\ntype MergeObjectsFunction = <T extends StoreObject | Reference>(\n  existing: T,\n  incoming: T,\n) => T;\n\nexport type FieldReadFunction<\n  TExisting = any,\n  TReadResult = TExisting,\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = (\n  // When reading a field, one often needs to know about any existing\n  // value stored for that field. If the field is read before any value\n  // has been written to the cache, this existing parameter will be\n  // undefined, which makes it easy to use a default parameter expression\n  // to supply the initial value. This parameter is positional (rather\n  // than one of the named options) because that makes it possible for the\n  // developer to annotate it with a type, without also having to provide\n  // a whole new type for the options object.\n  existing: SafeReadonly<TExisting> | undefined,\n  options: TOptions,\n) => TReadResult | undefined;\n\nexport type FieldMergeFunction<\n  TExisting = any,\n  TIncoming = TExisting,\n  // Passing the whole FieldFunctionOptions makes the current definition\n  // independent from its implementation\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = (\n  existing: SafeReadonly<TExisting> | undefined,\n  // The incoming parameter needs to be positional as well, for the same\n  // reasons discussed in FieldReadFunction above.\n  incoming: SafeReadonly<TIncoming>,\n  options: TOptions,\n) => SafeReadonly<TExisting>;\n\nconst nullKeyFieldsFn: KeyFieldsFunction = () => void 0;\nconst simpleKeyArgsFn: KeyArgsFunction = (_args, context) => context.fieldName;\n\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nconst mergeTrueFn: FieldMergeFunction<any> =\n  (existing, incoming, { mergeObjects }) => mergeObjects(existing, incoming);\nconst mergeFalseFn: FieldMergeFunction<any> = (_, incoming) => incoming;\n\nexport type PossibleTypesMap = {\n  [supertype: string]: string[];\n};\n\nexport class Policies {\n  private typePolicies: {\n    [__typename: string]: {\n      keyFn?: KeyFieldsFunction;\n      merge?: FieldMergeFunction<any>;\n      fields: {\n        [fieldName: string]: {\n          keyFn?: KeyArgsFunction;\n          read?: FieldReadFunction<any>;\n          merge?: FieldMergeFunction<any>;\n        };\n      };\n    };\n  } = Object.create(null);\n\n  private toBeAdded: {\n    [__typename: string]: TypePolicy[];\n  } = Object.create(null);\n\n  // Map from subtype names to sets of supertype names. Note that this\n  // representation inverts the structure of possibleTypes (whose keys are\n  // supertypes and whose values are arrays of subtypes) because it tends\n  // to be much more efficient to search upwards than downwards.\n  private supertypeMap = new Map<string, Set<string>>();\n\n  // Any fuzzy subtypes specified by possibleTypes will be converted to\n  // RegExp objects and recorded here. Every key of this map can also be\n  // found in supertypeMap. In many cases this Map will be empty, which\n  // means no fuzzy subtype checking will happen in fragmentMatches.\n  private fuzzySubtypes = new Map<string, RegExp>();\n\n  public readonly cache: InMemoryCache;\n\n  public readonly rootIdsByTypename: Record<string, string> = Object.create(null);\n  public readonly rootTypenamesById: Record<string, string> = Object.create(null);\n\n  public readonly usingPossibleTypes = false;\n\n  constructor(private config: {\n    cache: InMemoryCache;\n    dataIdFromObject?: KeyFieldsFunction;\n    possibleTypes?: PossibleTypesMap;\n    typePolicies?: TypePolicies;\n  }) {\n    this.config = {\n      dataIdFromObject: defaultDataIdFromObject,\n      ...config,\n    };\n\n    this.cache = this.config.cache;\n\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n\n  public identify(\n    object: StoreObject,\n    selectionSet?: SelectionSetNode,\n    fragmentMap?: FragmentMap,\n  ): [string?, StoreObject?] {\n    // TODO Use an AliasMap here?\n    const typename = selectionSet && fragmentMap\n      ? getTypenameFromResult(object, selectionSet, fragmentMap)\n      : object.__typename;\n\n    // It should be possible to write root Query fields with\n    // writeFragment, using { __typename: \"Query\", ... } as the data, but\n    // it does not make sense to allow the same identification behavior\n    // for the Mutation and Subscription types, since application code\n    // should never be writing directly to (or reading directly from)\n    // those root objects.\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n\n    const context: KeyFieldsContext = {\n      typename,\n      selectionSet,\n      fragmentMap,\n    };\n\n    let id: KeyFieldsResult;\n\n    const policy = typename && this.getTypePolicy(typename);\n    let keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n    while (keyFn) {\n      const specifierOrId = keyFn(object, context);\n      if (Array.isArray(specifierOrId)) {\n        keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n      } else {\n        id = specifierOrId;\n        break;\n      }\n    }\n\n    id = id ? String(id) : void 0;\n    return context.keyObject ? [id, context.keyObject] : [id];\n  }\n\n  public addTypePolicies(typePolicies: TypePolicies) {\n    Object.keys(typePolicies).forEach(typename => {\n      const {\n        queryType,\n        mutationType,\n        subscriptionType,\n        ...incoming\n      } = typePolicies[typename];\n\n      // Though {query,mutation,subscription}Type configurations are rare,\n      // it's important to call setRootTypename as early as possible,\n      // since these configurations should apply consistently for the\n      // entire lifetime of the cache. Also, since only one __typename can\n      // qualify as one of these root types, these three properties cannot\n      // be inherited, unlike the rest of the incoming properties. That\n      // restriction is convenient, because the purpose of this.toBeAdded\n      // is to delay the processing of type/field policies until the first\n      // time they're used, allowing policies to be added in any order as\n      // long as all relevant policies (including policies for supertypes)\n      // have been added by the time a given policy is used for the first\n      // time. In other words, since inheritance doesn't matter for these\n      // properties, there's also no need to delay their processing using\n      // the this.toBeAdded queue.\n      if (queryType) this.setRootTypename(\"Query\", typename);\n      if (mutationType) this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) this.setRootTypename(\"Subscription\", typename);\n\n      if (hasOwn.call(this.toBeAdded, typename)) {\n        this.toBeAdded[typename].push(incoming);\n      } else {\n        this.toBeAdded[typename] = [incoming];\n      }\n    });\n  }\n\n  private updateTypePolicy(typename: string, incoming: TypePolicy) {\n    const existing = this.getTypePolicy(typename);\n    const { keyFields, fields } = incoming;\n\n    function setMerge(\n      existing: { merge?: FieldMergeFunction | boolean; },\n      merge?: FieldMergeFunction | boolean,\n    ) {\n      existing.merge =\n        typeof merge === \"function\" ? merge :\n        // Pass merge:true as a shorthand for a merge implementation\n        // that returns options.mergeObjects(existing, incoming).\n        merge === true ? mergeTrueFn :\n        // Pass merge:false to make incoming always replace existing\n        // without any warnings about data clobbering.\n        merge === false ? mergeFalseFn :\n        existing.merge;\n    }\n\n    // Type policies can define merge functions, as an alternative to\n    // using field policies to merge child objects.\n    setMerge(existing, incoming.merge);\n\n    existing.keyFn =\n      // Pass false to disable normalization for this typename.\n      keyFields === false ? nullKeyFieldsFn :\n      // Pass an array of strings to use those fields to compute a\n      // composite ID for objects of this typename.\n      Array.isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) :\n      // Pass a function to take full control over identification.\n      typeof keyFields === \"function\" ? keyFields :\n      // Leave existing.keyFn unchanged if above cases fail.\n      existing.keyFn;\n\n    if (fields) {\n      Object.keys(fields).forEach(fieldName => {\n        const existing = this.getFieldPolicy(typename, fieldName, true)!;\n        const incoming = fields[fieldName];\n\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          const { keyArgs, read, merge } = incoming;\n\n          existing.keyFn =\n            // Pass false to disable argument-based differentiation of\n            // field identities.\n            keyArgs === false ? simpleKeyArgsFn :\n            // Pass an array of strings to use named arguments to\n            // compute a composite identity for the field.\n            Array.isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) :\n            // Pass a function to take full control over field identity.\n            typeof keyArgs === \"function\" ? keyArgs :\n            // Leave existing.keyFn unchanged if above cases fail.\n            existing.keyFn;\n\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n\n          setMerge(existing, merge);\n        }\n\n        if (existing.read && existing.merge) {\n          // If we have both a read and a merge function, assume\n          // keyArgs:false, because read and merge together can take\n          // responsibility for interpreting arguments in and out. This\n          // default assumption can always be overridden by specifying\n          // keyArgs explicitly in the FieldPolicy.\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  }\n\n  private setRootTypename(\n    which: \"Query\" | \"Mutation\" | \"Subscription\",\n    typename: string = which,\n  ) {\n    const rootId = \"ROOT_\" + which.toUpperCase();\n    const old = this.rootTypenamesById[rootId];\n    if (typename !== old) {\n      invariant(!old || old === which, `Cannot change root ${which} __typename more than once`);\n      // First, delete any old __typename associated with this rootId from\n      // rootIdsByTypename.\n      if (old) delete this.rootIdsByTypename[old];\n      // Now make this the only __typename that maps to this rootId.\n      this.rootIdsByTypename[typename] = rootId;\n      // Finally, update the __typename associated with this rootId.\n      this.rootTypenamesById[rootId] = typename;\n    }\n  }\n\n  public addPossibleTypes(possibleTypes: PossibleTypesMap) {\n    (this.usingPossibleTypes as boolean) = true;\n    Object.keys(possibleTypes).forEach(supertype => {\n      // Make sure all types have an entry in this.supertypeMap, even if\n      // their supertype set is empty, so we can return false immediately\n      // from policies.fragmentMatches for unknown supertypes.\n      this.getSupertypeSet(supertype, true);\n\n      possibleTypes[supertype].forEach(subtype => {\n        this.getSupertypeSet(subtype, true)!.add(supertype);\n        const match = subtype.match(TypeOrFieldNameRegExp);\n        if (!match || match[0] !== subtype) {\n          // TODO Don't interpret just any invalid typename as a RegExp.\n          this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  }\n\n  private getTypePolicy(typename: string): Policies[\"typePolicies\"][string] {\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      const policy: Policies[\"typePolicies\"][string] =\n        this.typePolicies[typename] = Object.create(null);\n      policy.fields = Object.create(null);\n\n      // When the TypePolicy for typename is first accessed, instead of\n      // starting with an empty policy object, inherit any properties or\n      // fields from the type policies of the supertypes of typename.\n      //\n      // Any properties or fields defined explicitly within the TypePolicy\n      // for typename will take precedence, and if there are multiple\n      // supertypes, the properties of policies whose types were added\n      // later via addPossibleTypes will take precedence over those of\n      // earlier supertypes. TODO Perhaps we should warn about these\n      // conflicts in development, and recommend defining the property\n      // explicitly in the subtype policy?\n      //\n      // Field policy inheritance is atomic/shallow: you can't inherit a\n      // field policy and then override just its read function, since read\n      // and merge functions often need to cooperate, so changing only one\n      // of them would be a recipe for inconsistency.\n      //\n      // Once the TypePolicy for typename has been accessed, its\n      // properties can still be updated directly using addTypePolicies,\n      // but future changes to supertype policies will not be reflected in\n      // this policy, because this code runs at most once per typename.\n      const supertypes = this.supertypeMap.get(typename);\n      if (supertypes && supertypes.size) {\n        supertypes.forEach(supertype => {\n          const { fields, ...rest } = this.getTypePolicy(supertype);\n          Object.assign(policy, rest);\n          Object.assign(policy.fields, fields);\n        });\n      }\n    }\n\n    const inbox = this.toBeAdded[typename];\n    if (inbox && inbox.length) {\n      // Merge the pending policies into this.typePolicies, in the order they\n      // were originally passed to addTypePolicy.\n      inbox.splice(0).forEach(policy => {\n        this.updateTypePolicy(typename, policy);\n      });\n    }\n\n    return this.typePolicies[typename];\n  }\n\n  private getFieldPolicy(\n    typename: string | undefined,\n    fieldName: string,\n    createIfMissing: boolean,\n  ): {\n    keyFn?: KeyArgsFunction;\n    read?: FieldReadFunction<any>;\n    merge?: FieldMergeFunction<any>;\n  } | undefined {\n    if (typename) {\n      const fieldPolicies = this.getTypePolicy(typename).fields;\n      return fieldPolicies[fieldName] || (\n        createIfMissing && (fieldPolicies[fieldName] = Object.create(null)));\n    }\n  }\n\n  private getSupertypeSet(\n    subtype: string,\n    createIfMissing: boolean,\n  ): Set<string> | undefined {\n    let supertypeSet = this.supertypeMap.get(subtype);\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, supertypeSet = new Set<string>());\n    }\n    return supertypeSet;\n  }\n\n  public fragmentMatches(\n    fragment: InlineFragmentNode | FragmentDefinitionNode,\n    typename: string | undefined,\n    result?: Record<string, any>,\n    variables?: Record<string, any>,\n  ): boolean {\n    if (!fragment.typeCondition) return true;\n\n    // If the fragment has a type condition but the object we're matching\n    // against does not have a __typename, the fragment cannot match.\n    if (!typename) return false;\n\n    const supertype = fragment.typeCondition.name.value;\n    // Common case: fragment type condition and __typename are the same.\n    if (typename === supertype) return true;\n\n    if (this.usingPossibleTypes &&\n        this.supertypeMap.has(supertype)) {\n      const typenameSupertypeSet = this.getSupertypeSet(typename, true)!;\n      const workQueue = [typenameSupertypeSet];\n      const maybeEnqueue = (subtype: string) => {\n        const supertypeSet = this.getSupertypeSet(subtype, false);\n        if (supertypeSet &&\n            supertypeSet.size &&\n            workQueue.indexOf(supertypeSet) < 0) {\n          workQueue.push(supertypeSet);\n        }\n      };\n\n      // We need to check fuzzy subtypes only if we encountered fuzzy\n      // subtype strings in addPossibleTypes, and only while writing to\n      // the cache, since that's when selectionSetMatchesResult gives a\n      // strong signal of fragment matching. The StoreReader class calls\n      // policies.fragmentMatches without passing a result object, so\n      // needToCheckFuzzySubtypes is always false while reading.\n      let needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      let checkingFuzzySubtypes = false;\n\n      // It's important to keep evaluating workQueue.length each time through\n      // the loop, because the queue can grow while we're iterating over it.\n      for (let i = 0; i < workQueue.length; ++i) {\n        const supertypeSet = workQueue[i];\n\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              invariant.warn(`Inferring subtype ${typename} of supertype ${supertype}`);\n            }\n            // Record positive results for faster future lookup.\n            // Unfortunately, we cannot safely cache negative results,\n            // because new possibleTypes data could always be added to the\n            // Policies class.\n            typenameSupertypeSet.add(supertype);\n          }\n          return true;\n        }\n\n        supertypeSet.forEach(maybeEnqueue);\n\n        if (needToCheckFuzzySubtypes &&\n            // Start checking fuzzy subtypes only after exhausting all\n            // non-fuzzy subtypes (after the final iteration of the loop).\n            i === workQueue.length - 1 &&\n            // We could wait to compare fragment.selectionSet to result\n            // after we verify the supertype, but this check is often less\n            // expensive than that search, and we will have to do the\n            // comparison anyway whenever we find a potential match.\n            selectionSetMatchesResult(fragment.selectionSet, result!, variables)) {\n          // We don't always need to check fuzzy subtypes (if no result\n          // was provided, or !this.fuzzySubtypes.size), but, when we do,\n          // we only want to check them once.\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n\n          // If we find any fuzzy subtypes that match typename, extend the\n          // workQueue to search through the supertypes of those fuzzy\n          // subtypes. Otherwise the for-loop will terminate and we'll\n          // return false below.\n          this.fuzzySubtypes.forEach((regExp, fuzzyString) => {\n            const match = typename.match(regExp);\n            if (match && match[0] === typename) {\n              maybeEnqueue(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public hasKeyArgs(typename: string | undefined, fieldName: string) {\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    return !!(policy && policy.keyFn);\n  }\n\n  public getStoreFieldName(fieldSpec: FieldSpecifier): string {\n    const { typename, fieldName } = fieldSpec;\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    let storeFieldName: KeyArgsResult;\n\n    let keyFn = policy && policy.keyFn;\n    if (keyFn && typename) {\n      const context: Parameters<KeyArgsFunction>[1] = {\n        typename,\n        fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables,\n      };\n      const args = argsFromFieldSpecifier(fieldSpec);\n      while (keyFn) {\n        const specifierOrString = keyFn(args, context);\n        if (Array.isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          // If the custom keyFn returns a falsy value, fall back to\n          // fieldName instead.\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n\n    if (storeFieldName === void 0) {\n      storeFieldName = fieldSpec.field\n        ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)\n        : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n\n    // Returning false from a keyArgs function is like configuring\n    // keyArgs: false, but more dynamic.\n    if (storeFieldName === false) {\n      return fieldName;\n    }\n\n    // Make sure custom field names start with the actual field.name.value\n    // of the field, so we can always figure out which properties of a\n    // StoreObject correspond to which original field names.\n    return fieldName === fieldNameFromStoreName(storeFieldName)\n      ? storeFieldName\n      : fieldName + \":\" + storeFieldName;\n  }\n\n  public readField<V = StoreValue>(\n    options: ReadFieldOptions,\n    context: ReadMergeModifyContext,\n  ): SafeReadonly<V> | undefined {\n    const objectOrReference = options.from;\n    if (!objectOrReference) return;\n\n    const nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n\n    if (options.typename === void 0) {\n      const typename = context.store.getFieldValue<string>(objectOrReference, \"__typename\");\n      if (typename) options.typename = typename;\n    }\n\n    const storeFieldName = this.getStoreFieldName(options);\n    const fieldName = fieldNameFromStoreName(storeFieldName);\n    const existing = context.store.getFieldValue<V>(objectOrReference, storeFieldName);\n    const policy = this.getFieldPolicy(options.typename, fieldName, false);\n    const read = policy && policy.read;\n\n    if (read) {\n      const readOptions = makeFieldFunctionOptions(\n        this,\n        objectOrReference,\n        options,\n        context,\n        context.store.getStorage(\n          isReference(objectOrReference)\n            ? objectOrReference.__ref\n            : objectOrReference,\n          storeFieldName,\n        ),\n      );\n\n      // Call read(existing, readOptions) with cacheSlot holding this.cache.\n      return cacheSlot.withValue(\n        this.cache,\n        read,\n        [existing, readOptions],\n      ) as SafeReadonly<V>;\n    }\n\n    return existing;\n  }\n\n  public getMergeFunction(\n    parentTypename: string | undefined,\n    fieldName: string,\n    childTypename: string | undefined,\n  ): FieldMergeFunction | undefined {\n    let policy:\n      | Policies[\"typePolicies\"][string]\n      | Policies[\"typePolicies\"][string][\"fields\"][string]\n      | undefined =\n      this.getFieldPolicy(parentTypename, fieldName, false);\n    let merge = policy && policy.merge;\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n    return merge;\n  }\n\n  public runMergeFunction(\n    existing: StoreValue,\n    incoming: StoreValue,\n    { field, typename, merge }: MergeInfo,\n    context: WriteContext,\n    storage?: StorageType,\n  ) {\n    if (merge === mergeTrueFn) {\n      // Instead of going to the trouble of creating a full\n      // FieldFunctionOptions object and calling mergeTrueFn, we can\n      // simply call mergeObjects, as mergeTrueFn would.\n      return makeMergeObjectsFunction(\n        context.store,\n      )(existing as StoreObject,\n        incoming as StoreObject);\n    }\n\n    if (merge === mergeFalseFn) {\n      // Likewise for mergeFalseFn, whose implementation is even simpler.\n      return incoming;\n    }\n\n    // If cache.writeQuery or cache.writeFragment was called with\n    // options.overwrite set to true, we still call merge functions, but\n    // the existing data is always undefined, so the merge function will\n    // not attempt to combine the incoming data with the existing data.\n    if (context.overwrite) {\n      existing = void 0;\n    }\n\n    return merge(existing, incoming, makeFieldFunctionOptions(\n      this,\n      // Unlike options.readField for read functions, we do not fall\n      // back to the current object if no foreignObjOrRef is provided,\n      // because it's not clear what the current object should be for\n      // merge functions: the (possibly undefined) existing object, or\n      // the incoming object? If you think your merge function needs\n      // to read sibling fields in order to produce a new value for\n      // the current field, you might want to rethink your strategy,\n      // because that's a recipe for making merge behavior sensitive\n      // to the order in which fields are written into the cache.\n      // However, readField(name, ref) is useful for merge functions\n      // that need to deduplicate child objects and references.\n      void 0,\n      { typename,\n        fieldName: field.name.value,\n        field,\n        variables: context.variables },\n      context,\n      storage || Object.create(null),\n    ));\n  }\n}\n\nfunction makeFieldFunctionOptions(\n  policies: Policies,\n  objectOrReference: StoreObject | Reference | undefined,\n  fieldSpec: FieldSpecifier,\n  context: ReadMergeModifyContext,\n  storage: StorageType,\n): FieldFunctionOptions {\n  const storeFieldName = policies.getStoreFieldName(fieldSpec);\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const variables = fieldSpec.variables || context.variables;\n  const { toReference, canRead } = context.store;\n\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName,\n    storeFieldName,\n    variables,\n    isReference,\n    toReference,\n    storage,\n    cache: policies.cache,\n    canRead,\n\n    readField<T>(\n      fieldNameOrOptions: string | ReadFieldOptions,\n      from?: StoreObject | Reference,\n    ) {\n      let options: ReadFieldOptions;\n      if (typeof fieldNameOrOptions === \"string\") {\n        options = {\n          fieldName: fieldNameOrOptions,\n          // Default to objectOrReference only when no second argument was\n          // passed for the from parameter, not when undefined is explicitly\n          // passed as the second argument.\n          from: arguments.length > 1 ? from : objectOrReference,\n        };\n      } else if (isNonNullObject(fieldNameOrOptions)) {\n        options = { ...fieldNameOrOptions };\n        // Default to objectOrReference only when fieldNameOrOptions.from is\n        // actually omitted, rather than just undefined.\n        if (!hasOwn.call(fieldNameOrOptions, \"from\")) {\n          options.from = objectOrReference;\n        }\n      } else {\n        invariant.warn(`Unexpected readField arguments: ${\n          stringifyForDisplay(Array.from(arguments))\n        }`);\n        // The readField helper function returns undefined for any missing\n        // fields, so it should also return undefined if the arguments were not\n        // of a type we expected.\n        return;\n      }\n\n      if (__DEV__ && options.from === void 0) {\n        invariant.warn(`Undefined 'from' passed to readField with arguments ${\n          stringifyForDisplay(Array.from(arguments))\n        }`);\n      }\n\n      if (void 0 === options.variables) {\n        options.variables = variables;\n      }\n\n      return policies.readField<T>(options, context);\n    },\n\n    mergeObjects: makeMergeObjectsFunction(context.store),\n  };\n}\n\nfunction makeMergeObjectsFunction(\n  store: NormalizedCache,\n): MergeObjectsFunction {\n  return function mergeObjects(existing, incoming) {\n    if (Array.isArray(existing) || Array.isArray(incoming)) {\n      throw new InvariantError(\"Cannot automatically merge arrays\");\n    }\n\n    // These dynamic checks are necessary because the parameters of a\n    // custom merge function can easily have the any type, so the type\n    // system cannot always enforce the StoreObject | Reference parameter\n    // types of options.mergeObjects.\n    if (isNonNullObject(existing) &&\n        isNonNullObject(incoming)) {\n      const eType = store.getFieldValue(existing, \"__typename\");\n      const iType = store.getFieldValue(incoming, \"__typename\");\n      const typesDiffer = eType && iType && eType !== iType;\n\n      if (typesDiffer) {\n        return incoming;\n      }\n\n      if (isReference(existing) &&\n          storeValueIsStoreObject(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // existing.__ref, preferring/overwriting any fields contributed by the\n        // newer incoming StoreObject.\n        store.merge(existing.__ref, incoming);\n        return existing;\n      }\n\n      if (storeValueIsStoreObject(existing) &&\n          isReference(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // incoming.__ref, taking fields from the older existing object only if\n        // those fields are not already present in the newer StoreObject\n        // identified by incoming.__ref.\n        store.merge(existing, incoming.__ref);\n        return incoming;\n      }\n\n      if (storeValueIsStoreObject(existing) &&\n          storeValueIsStoreObject(incoming)) {\n        return { ...existing, ...incoming };\n      }\n    }\n\n    return incoming;\n  };\n}\n\nfunction keyArgsFnFromSpecifier(\n  specifier: KeySpecifier,\n): KeyArgsFunction {\n  return (args, context) => {\n    return args ? `${context.fieldName}:${\n      JSON.stringify(computeKeyObject(args, specifier, false))\n    }` : context.fieldName;\n  };\n}\n\nfunction keyFieldsFnFromSpecifier(\n  specifier: KeySpecifier,\n): KeyFieldsFunction {\n  const trie = new Trie<{\n    aliasMap?: AliasMap;\n  }>(canUseWeakMap);\n\n  return (object, context) => {\n    let aliasMap: AliasMap | undefined;\n    if (context.selectionSet && context.fragmentMap) {\n      const info = trie.lookupArray([\n        context.selectionSet,\n        context.fragmentMap,\n      ]);\n      aliasMap = info.aliasMap || (\n        info.aliasMap = makeAliasMap(context.selectionSet, context.fragmentMap)\n      );\n    }\n\n    const keyObject = context.keyObject =\n      computeKeyObject(object, specifier, true, aliasMap);\n\n    return `${context.typename}:${JSON.stringify(keyObject)}`;\n  };\n}\n\ntype AliasMap = {\n  // Map from store key to corresponding response key. Undefined when there are\n  // no aliased fields in this selection set.\n  aliases?: Record<string, string>;\n  // Map from store key to AliasMap correponding to a child selection set.\n  // Undefined when there are no child selection sets.\n  subsets?: Record<string, AliasMap>;\n};\n\nfunction makeAliasMap(\n  selectionSet: SelectionSetNode,\n  fragmentMap: FragmentMap,\n): AliasMap {\n  let map: AliasMap = Object.create(null);\n  // TODO Cache this work, perhaps by storing selectionSet._aliasMap?\n  const workQueue = new Set([selectionSet]);\n  workQueue.forEach(selectionSet => {\n    selectionSet.selections.forEach(selection => {\n      if (isField(selection)) {\n        if (selection.alias) {\n          const responseKey = selection.alias.value;\n          const storeKey = selection.name.value;\n          if (storeKey !== responseKey) {\n            const aliases = map.aliases || (map.aliases = Object.create(null));\n            aliases[storeKey] = responseKey;\n          }\n        }\n        if (selection.selectionSet) {\n          const subsets = map.subsets || (map.subsets = Object.create(null));\n          subsets[selection.name.value] =\n            makeAliasMap(selection.selectionSet, fragmentMap);\n        }\n      } else {\n        const fragment = getFragmentFromSelection(selection, fragmentMap);\n        if (fragment) {\n          workQueue.add(fragment.selectionSet);\n        }\n      }\n    });\n  });\n  return map;\n}\n\nfunction computeKeyObject(\n  response: Record<string, any>,\n  specifier: KeySpecifier,\n  strict: boolean,\n  aliasMap?: AliasMap,\n): Record<string, any> {\n  // The order of adding properties to keyObj affects its JSON serialization,\n  // so we are careful to build keyObj in the order of keys given in\n  // specifier.\n  const keyObj = Object.create(null);\n\n  // The lastResponseKey variable tracks keys as seen in actual GraphQL response\n  // objects, potentially affected by aliasing. The lastActualKey variable\n  // tracks the corresponding key after removing aliases.\n  let lastResponseKey: string | undefined;\n  let lastActualKey: string | undefined;\n\n  specifier.forEach(s => {\n    if (Array.isArray(s)) {\n      if (typeof lastActualKey === \"string\" &&\n          typeof lastResponseKey === \"string\") {\n        const subsets = aliasMap && aliasMap.subsets;\n        const subset = subsets && subsets[lastActualKey];\n        keyObj[lastActualKey] =\n          computeKeyObject(response[lastResponseKey], s, strict, subset);\n      }\n    } else {\n      const aliases = aliasMap && aliasMap.aliases;\n      const responseName = aliases && aliases[s] || s;\n      if (hasOwn.call(response, responseName)) {\n        keyObj[lastActualKey = s] = response[lastResponseKey = responseName];\n      } else {\n        invariant(!strict, `Missing field '${responseName}' while computing key fields`);\n        lastResponseKey = lastActualKey = void 0;\n      }\n    }\n  });\n  return keyObj;\n}\n"]},"metadata":{},"sourceType":"module"}