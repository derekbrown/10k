{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addAuctionInformation = exports.transformCurrencyForKey = exports.auctionDataToPricing = exports.transformMediaForKey = exports.transformMediaItem = exports.transformCurrencyEth = exports.NULL_ETH_CURRENCY_ID = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst big_js_1 = tslib_1.__importDefault(require(\"big.js\"));\n\nconst FetchResultTypes_1 = require(\"./FetchResultTypes\");\n\nconst RequestError_1 = require(\"./RequestError\");\n\nconst AuctionInfoTypes_1 = require(\"./AuctionInfoTypes\");\n\nconst AuctionState_1 = require(\"./AuctionState\");\n\nconst addresses_1 = require(\"../constants/addresses\");\n\nexports.NULL_ETH_CURRENCY_ID = '0x0000000000000000000000000000000000000000';\n\nfunction transformCurrencyEth(currency) {\n  let updatedCurrency = { ...currency\n  };\n\n  if (currency.id === exports.NULL_ETH_CURRENCY_ID) {\n    updatedCurrency.decimals = 18;\n    updatedCurrency.name = 'Ethereum';\n    updatedCurrency.symbol = 'ETH';\n  }\n\n  if (!updatedCurrency.decimals) {\n    // Assume default 18 decimals\n    updatedCurrency.decimals = 18;\n  }\n\n  return updatedCurrency;\n}\n\nexports.transformCurrencyEth = transformCurrencyEth;\n\nfunction transformMediaItem(media, networkId) {\n  const {\n    reserveAuctions,\n    currentBids,\n    currentAsk,\n    ...nft\n  } = media; // Since auctions are sorted by last created, the first auction will be the active auction\n  // If the auction is not active it still will be created but will not be added to the current\n  // auction information.\n\n  let auctionData = reserveAuctions && reserveAuctions.length > 0 ? reserveAuctions[0] : undefined;\n  return {\n    nft: {\n      tokenId: nft.id,\n      contract: {\n        address: addresses_1.ZORA_MEDIA_CONTRACT_BY_NETWORK[networkId],\n        knownContract: FetchResultTypes_1.KNOWN_CONTRACTS.ZORA,\n        name: 'Zora',\n        symbol: 'ZORA'\n      },\n      owner: nft.owner.id,\n      creator: nft.creator.id,\n      metadataURI: nft.metadataURI\n    },\n    zoraNFT: {\n      metadataURI: nft.metadataURI,\n      metadataHash: nft.metadataHash,\n      contentURI: nft.contentURI,\n      contentHash: nft.contentHash,\n      creatorBidShare: nft.creatorBidShare,\n      ownerBidShare: nft.ownerBidShare,\n      createdAtTimestamp: nft.createdAtTimestamp,\n      creatorBidSharePercentage: new big_js_1.default(nft.creatorBidShare).div(new big_js_1.default(10).pow(18)).toNumber(),\n      ownerBidSharePercentage: new big_js_1.default(nft.ownerBidShare).div(new big_js_1.default(10).pow(18)).toNumber()\n    },\n    pricing: {\n      perpetual: {\n        bids: currentBids || [],\n        ask: currentAsk || null\n      },\n      reserve: auctionDataToPricing(auctionData)\n    }\n  };\n}\n\nexports.transformMediaItem = transformMediaItem;\n\nfunction transformMediaForKey(result, key, networkId) {\n  const media = result.id.find(media => media.id === key);\n\n  if (!media) {\n    throw new RequestError_1.RequestError('No media in response');\n  }\n\n  return transformMediaItem(media, networkId);\n}\n\nexports.transformMediaForKey = transformMediaForKey;\n\nfunction auctionDataToPricing(auctionData) {\n  if (!auctionData) {\n    return null;\n  }\n\n  return { ...auctionData,\n    auctionCurrency: transformCurrencyEth(auctionData.auctionCurrency)\n  };\n}\n\nexports.auctionDataToPricing = auctionDataToPricing;\n\nfunction transformCurrencyForKey(result, key) {\n  var _a, _b; // Special case ETH\n\n\n  if (key === exports.NULL_ETH_CURRENCY_ID) {\n    return {\n      ethToUsd: (_a = result.bundle) === null || _a === void 0 ? void 0 : _a.ethPrice,\n      token: {\n        symbol: 'ETH',\n        name: 'Ethereum',\n        id: exports.NULL_ETH_CURRENCY_ID,\n        decimals: 18,\n        derivedETH: 1\n      }\n    };\n  }\n\n  const currency = result.tokens.find(token => token.id === key);\n\n  if (!currency) {\n    throw new RequestError_1.RequestError('No currency in response');\n  }\n\n  return {\n    ethToUsd: (_b = result.bundle) === null || _b === void 0 ? void 0 : _b.ethPrice,\n    token: currency\n  };\n}\n\nexports.transformCurrencyForKey = transformCurrencyForKey;\n\nconst setCurrencyDecimal = (amount, decimals) => {\n  return new big_js_1.default(amount).div(new big_js_1.default(10).pow(parseInt(decimals, 10) || 18)).toString();\n};\n\nfunction addAuctionInformation(pricing) {\n  let currencyInfos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  const getCurrencyComputedValue = (currencyId, bidAmount) => {\n    const currencyInfo = currencyInfos[currencyId];\n\n    if (!currencyInfo) {\n      return;\n    }\n\n    const inETH = new big_js_1.default(currencyInfo.token.derivedETH).mul(new big_js_1.default(bidAmount).div(new big_js_1.default(10).pow(parseInt(currencyInfo.token.decimals, 10)))).toString();\n    return {\n      inETH,\n      inUSD: new big_js_1.default(inETH).mul(currencyInfo.ethToUsd).toString()\n    };\n  };\n\n  const handlePerpetualBid = bidRaw => {\n    const {\n      amount,\n      currency,\n      ...bid\n    } = bidRaw;\n    return { ...bid,\n      pricing: {\n        currency,\n        amount,\n        prettyAmount: setCurrencyDecimal(amount, currency.decimals),\n        computedValue: getCurrencyComputedValue(currency.id, amount)\n      }\n    };\n  };\n\n  const getBidPricing = amount => {\n    var _a;\n\n    const currency = (_a = pricing.reserve) === null || _a === void 0 ? void 0 : _a.auctionCurrency;\n    return {\n      pricing: {\n        currency,\n        amount,\n        prettyAmount: setCurrencyDecimal(amount, currency === null || currency === void 0 ? void 0 : currency.decimals),\n        computedValue: currency ? getCurrencyComputedValue(currency.id, amount) : undefined\n      }\n    };\n  };\n\n  const transformAskCurrency = ask => {\n    const {\n      amount,\n      currency,\n      createdAtTimestamp,\n      id\n    } = ask;\n    return {\n      createdAtTimestamp,\n      id,\n      pricing: {\n        currency,\n        amount,\n        prettyAmount: setCurrencyDecimal(amount, currency.decimals),\n        computedValue: getCurrencyComputedValue(currency.id, amount)\n      }\n    };\n  };\n\n  const getHighestReserveBid = () => {\n    var _a;\n\n    if ((_a = pricing.reserve) === null || _a === void 0 ? void 0 : _a.currentBid) {\n      const {\n        auctionCurrency,\n        currentBid\n      } = pricing.reserve;\n      const computedValue = getCurrencyComputedValue(auctionCurrency.id, currentBid.amount);\n      return {\n        pricing: {\n          amount: currentBid.amount,\n          prettyAmount: setCurrencyDecimal(currentBid.amount, auctionCurrency.decimals),\n          currency: transformCurrencyEth(auctionCurrency),\n          computedValue\n        },\n        placedBy: currentBid.bidder.id,\n        placedAt: currentBid.createdAtTimestamp\n      };\n    }\n\n    return;\n  };\n\n  const getHighestPerpetualBid = () => {\n    var _a, _b;\n\n    const sortedBids = (_b = (_a = pricing.perpetual) === null || _a === void 0 ? void 0 : _a.bids) === null || _b === void 0 ? void 0 : _b.map(bid => ({\n      bid,\n      computedValue: getCurrencyComputedValue(bid.currency.id, bid.amount)\n    })).sort((a, b) => {\n      if (a.computedValue && b.computedValue) {\n        return new big_js_1.default(a.computedValue.inETH).sub(b.computedValue.inETH).toNumber() > 0 ? -1 : 1;\n      }\n\n      return new Date(a.bid.createdAtTimestamp).getTime() > new Date(b.bid.createdAtTimestamp).getTime() ? -1 : 1;\n    });\n\n    if (!sortedBids || !sortedBids.length) {\n      return;\n    }\n\n    return {\n      pricing: {\n        computedValue: sortedBids[0].computedValue,\n        amount: sortedBids[0].bid.amount,\n        prettyAmount: setCurrencyDecimal(sortedBids[0].bid.amount, sortedBids[0].bid.currency.decimals),\n        currency: transformCurrencyEth(sortedBids[0].bid.currency)\n      },\n      placedBy: sortedBids[0].bid.bidder.id,\n      placedAt: sortedBids[0].bid.createdAtTimestamp\n    };\n  };\n\n  const nftPricingInformation = {\n    reserve: pricing.reserve ? { ...pricing.reserve,\n      currentBid: (() => {\n        var _a;\n\n        if (!pricing.reserve.currentBid) {\n          return undefined;\n        }\n\n        const {\n          amount,\n          ...bidRaw\n        } = (_a = pricing.reserve) === null || _a === void 0 ? void 0 : _a.currentBid;\n        return { ...bidRaw,\n          ...getBidPricing(amount)\n        };\n      })(),\n      current: {\n        highestBid: getHighestReserveBid(),\n        likelyHasEnded: parseInt((_a = pricing.reserve) === null || _a === void 0 ? void 0 : _a.expectedEndTimestamp, 10) < new Date().getTime() / 1000,\n        reserveMet: ((_b = pricing.reserve) === null || _b === void 0 ? void 0 : _b.firstBidTime) && pricing.reserve.firstBidTime !== '0'\n      },\n      reservePrice: {\n        currency: transformCurrencyEth({\n          id: pricing.reserve.auctionCurrency.id,\n          name: pricing.reserve.auctionCurrency.name,\n          symbol: pricing.reserve.auctionCurrency.symbol,\n          decimals: pricing.reserve.auctionCurrency.decimals\n        }),\n        amount: pricing.reserve.reservePrice,\n        prettyAmount: setCurrencyDecimal(pricing.reserve.reservePrice, pricing.reserve.auctionCurrency.decimals),\n        computedValue: getCurrencyComputedValue(pricing.reserve.auctionCurrency.id, pricing.reserve.reservePrice)\n      },\n      previousBids: ((_d = (_c = pricing.reserve) === null || _c === void 0 ? void 0 : _c.previousBids) === null || _d === void 0 ? void 0 : _d.map(_ref => {\n        let {\n          amount,\n          ...previousBid\n        } = _ref;\n        return { ...previousBid,\n          ...getBidPricing(amount)\n        };\n      }).sort((bidA, bidB) => bidA.bidInactivatedAtBlockNumber > bidB.bidInactivatedAtBlockNumber ? -1 : 1)) || []\n    } : undefined,\n    perpetual: {\n      ask: ((_e = pricing.perpetual) === null || _e === void 0 ? void 0 : _e.ask) ? transformAskCurrency(pricing.perpetual.ask) : undefined,\n      bids: ((_f = pricing.perpetual) === null || _f === void 0 ? void 0 : _f.bids.map(bid => handlePerpetualBid(bid))) || [],\n      highestBid: getHighestPerpetualBid()\n    },\n    auctionType: ((_g = pricing.reserve) === null || _g === void 0 ? void 0 : _g.status) === 'Active' ? AuctionInfoTypes_1.AuctionType.RESERVE : pricing.perpetual ? AuctionInfoTypes_1.AuctionType.PERPETUAL : AuctionInfoTypes_1.AuctionType.NONE,\n    status: AuctionState_1.AuctionStateInfo.LOADING\n  };\n  nftPricingInformation.status = AuctionState_1.getAuctionState(nftPricingInformation);\n  return nftPricingInformation;\n}\n\nexports.addAuctionInformation = addAuctionInformation;","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/@zoralabs/nft-hooks/dist/fetcher/TransformFetchResults.js"],"names":["Object","defineProperty","exports","value","addAuctionInformation","transformCurrencyForKey","auctionDataToPricing","transformMediaForKey","transformMediaItem","transformCurrencyEth","NULL_ETH_CURRENCY_ID","tslib_1","require","big_js_1","__importDefault","FetchResultTypes_1","RequestError_1","AuctionInfoTypes_1","AuctionState_1","addresses_1","currency","updatedCurrency","id","decimals","name","symbol","media","networkId","reserveAuctions","currentBids","currentAsk","nft","auctionData","length","undefined","tokenId","contract","address","ZORA_MEDIA_CONTRACT_BY_NETWORK","knownContract","KNOWN_CONTRACTS","ZORA","owner","creator","metadataURI","zoraNFT","metadataHash","contentURI","contentHash","creatorBidShare","ownerBidShare","createdAtTimestamp","creatorBidSharePercentage","default","div","pow","toNumber","ownerBidSharePercentage","pricing","perpetual","bids","ask","reserve","result","key","find","RequestError","auctionCurrency","_a","_b","ethToUsd","bundle","ethPrice","token","derivedETH","tokens","setCurrencyDecimal","amount","parseInt","toString","currencyInfos","_c","_d","_e","_f","_g","getCurrencyComputedValue","currencyId","bidAmount","currencyInfo","inETH","mul","inUSD","handlePerpetualBid","bidRaw","bid","prettyAmount","computedValue","getBidPricing","transformAskCurrency","getHighestReserveBid","currentBid","placedBy","bidder","placedAt","getHighestPerpetualBid","sortedBids","map","sort","a","b","sub","Date","getTime","nftPricingInformation","current","highestBid","likelyHasEnded","expectedEndTimestamp","reserveMet","firstBidTime","reservePrice","previousBids","previousBid","bidA","bidB","bidInactivatedAtBlockNumber","auctionType","status","AuctionType","RESERVE","PERPETUAL","NONE","AuctionStateInfo","LOADING","getAuctionState"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addAuctionInformation = exports.transformCurrencyForKey = exports.auctionDataToPricing = exports.transformMediaForKey = exports.transformMediaItem = exports.transformCurrencyEth = exports.NULL_ETH_CURRENCY_ID = void 0;\nconst tslib_1 = require(\"tslib\");\nconst big_js_1 = tslib_1.__importDefault(require(\"big.js\"));\nconst FetchResultTypes_1 = require(\"./FetchResultTypes\");\nconst RequestError_1 = require(\"./RequestError\");\nconst AuctionInfoTypes_1 = require(\"./AuctionInfoTypes\");\nconst AuctionState_1 = require(\"./AuctionState\");\nconst addresses_1 = require(\"../constants/addresses\");\nexports.NULL_ETH_CURRENCY_ID = '0x0000000000000000000000000000000000000000';\nfunction transformCurrencyEth(currency) {\n    let updatedCurrency = { ...currency };\n    if (currency.id === exports.NULL_ETH_CURRENCY_ID) {\n        updatedCurrency.decimals = 18;\n        updatedCurrency.name = 'Ethereum';\n        updatedCurrency.symbol = 'ETH';\n    }\n    if (!updatedCurrency.decimals) {\n        // Assume default 18 decimals\n        updatedCurrency.decimals = 18;\n    }\n    return updatedCurrency;\n}\nexports.transformCurrencyEth = transformCurrencyEth;\nfunction transformMediaItem(media, networkId) {\n    const { reserveAuctions, currentBids, currentAsk, ...nft } = media;\n    // Since auctions are sorted by last created, the first auction will be the active auction\n    // If the auction is not active it still will be created but will not be added to the current\n    // auction information.\n    let auctionData = reserveAuctions && reserveAuctions.length > 0 ? reserveAuctions[0] : undefined;\n    return {\n        nft: {\n            tokenId: nft.id,\n            contract: {\n                address: addresses_1.ZORA_MEDIA_CONTRACT_BY_NETWORK[networkId],\n                knownContract: FetchResultTypes_1.KNOWN_CONTRACTS.ZORA,\n                name: 'Zora',\n                symbol: 'ZORA',\n            },\n            owner: nft.owner.id,\n            creator: nft.creator.id,\n            metadataURI: nft.metadataURI,\n        },\n        zoraNFT: {\n            metadataURI: nft.metadataURI,\n            metadataHash: nft.metadataHash,\n            contentURI: nft.contentURI,\n            contentHash: nft.contentHash,\n            creatorBidShare: nft.creatorBidShare,\n            ownerBidShare: nft.ownerBidShare,\n            createdAtTimestamp: nft.createdAtTimestamp,\n            creatorBidSharePercentage: new big_js_1.default(nft.creatorBidShare)\n                .div(new big_js_1.default(10).pow(18))\n                .toNumber(),\n            ownerBidSharePercentage: new big_js_1.default(nft.ownerBidShare)\n                .div(new big_js_1.default(10).pow(18))\n                .toNumber(),\n        },\n        pricing: {\n            perpetual: {\n                bids: currentBids || [],\n                ask: currentAsk || null,\n            },\n            reserve: auctionDataToPricing(auctionData),\n        },\n    };\n}\nexports.transformMediaItem = transformMediaItem;\nfunction transformMediaForKey(result, key, networkId) {\n    const media = result.id.find((media) => media.id === key);\n    if (!media) {\n        throw new RequestError_1.RequestError('No media in response');\n    }\n    return transformMediaItem(media, networkId);\n}\nexports.transformMediaForKey = transformMediaForKey;\nfunction auctionDataToPricing(auctionData) {\n    if (!auctionData) {\n        return null;\n    }\n    return {\n        ...auctionData,\n        auctionCurrency: transformCurrencyEth(auctionData.auctionCurrency),\n    };\n}\nexports.auctionDataToPricing = auctionDataToPricing;\nfunction transformCurrencyForKey(result, key) {\n    var _a, _b;\n    // Special case ETH\n    if (key === exports.NULL_ETH_CURRENCY_ID) {\n        return {\n            ethToUsd: (_a = result.bundle) === null || _a === void 0 ? void 0 : _a.ethPrice,\n            token: {\n                symbol: 'ETH',\n                name: 'Ethereum',\n                id: exports.NULL_ETH_CURRENCY_ID,\n                decimals: 18,\n                derivedETH: 1,\n            },\n        };\n    }\n    const currency = result.tokens.find((token) => token.id === key);\n    if (!currency) {\n        throw new RequestError_1.RequestError('No currency in response');\n    }\n    return {\n        ethToUsd: (_b = result.bundle) === null || _b === void 0 ? void 0 : _b.ethPrice,\n        token: currency,\n    };\n}\nexports.transformCurrencyForKey = transformCurrencyForKey;\nconst setCurrencyDecimal = (amount, decimals) => {\n    return new big_js_1.default(amount)\n        .div(new big_js_1.default(10).pow(parseInt(decimals, 10) || 18))\n        .toString();\n};\nfunction addAuctionInformation(pricing, currencyInfos = {}) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const getCurrencyComputedValue = (currencyId, bidAmount) => {\n        const currencyInfo = currencyInfos[currencyId];\n        if (!currencyInfo) {\n            return;\n        }\n        const inETH = new big_js_1.default(currencyInfo.token.derivedETH)\n            .mul(new big_js_1.default(bidAmount).div(new big_js_1.default(10).pow(parseInt(currencyInfo.token.decimals, 10))))\n            .toString();\n        return {\n            inETH,\n            inUSD: new big_js_1.default(inETH).mul(currencyInfo.ethToUsd).toString(),\n        };\n    };\n    const handlePerpetualBid = (bidRaw) => {\n        const { amount, currency, ...bid } = bidRaw;\n        return {\n            ...bid,\n            pricing: {\n                currency,\n                amount,\n                prettyAmount: setCurrencyDecimal(amount, currency.decimals),\n                computedValue: getCurrencyComputedValue(currency.id, amount),\n            },\n        };\n    };\n    const getBidPricing = (amount) => {\n        var _a;\n        const currency = (_a = pricing.reserve) === null || _a === void 0 ? void 0 : _a.auctionCurrency;\n        return {\n            pricing: {\n                currency,\n                amount,\n                prettyAmount: setCurrencyDecimal(amount, currency === null || currency === void 0 ? void 0 : currency.decimals),\n                computedValue: currency\n                    ? getCurrencyComputedValue(currency.id, amount)\n                    : undefined,\n            },\n        };\n    };\n    const transformAskCurrency = (ask) => {\n        const { amount, currency, createdAtTimestamp, id } = ask;\n        return {\n            createdAtTimestamp,\n            id,\n            pricing: {\n                currency,\n                amount,\n                prettyAmount: setCurrencyDecimal(amount, currency.decimals),\n                computedValue: getCurrencyComputedValue(currency.id, amount),\n            },\n        };\n    };\n    const getHighestReserveBid = () => {\n        var _a;\n        if ((_a = pricing.reserve) === null || _a === void 0 ? void 0 : _a.currentBid) {\n            const { auctionCurrency, currentBid } = pricing.reserve;\n            const computedValue = getCurrencyComputedValue(auctionCurrency.id, currentBid.amount);\n            return {\n                pricing: {\n                    amount: currentBid.amount,\n                    prettyAmount: setCurrencyDecimal(currentBid.amount, auctionCurrency.decimals),\n                    currency: transformCurrencyEth(auctionCurrency),\n                    computedValue,\n                },\n                placedBy: currentBid.bidder.id,\n                placedAt: currentBid.createdAtTimestamp,\n            };\n        }\n        return;\n    };\n    const getHighestPerpetualBid = () => {\n        var _a, _b;\n        const sortedBids = (_b = (_a = pricing.perpetual) === null || _a === void 0 ? void 0 : _a.bids) === null || _b === void 0 ? void 0 : _b.map((bid) => ({\n            bid,\n            computedValue: getCurrencyComputedValue(bid.currency.id, bid.amount),\n        })).sort((a, b) => {\n            if (a.computedValue && b.computedValue) {\n                return new big_js_1.default(a.computedValue.inETH).sub(b.computedValue.inETH).toNumber() > 0\n                    ? -1\n                    : 1;\n            }\n            return new Date(a.bid.createdAtTimestamp).getTime() >\n                new Date(b.bid.createdAtTimestamp).getTime()\n                ? -1\n                : 1;\n        });\n        if (!sortedBids || !sortedBids.length) {\n            return;\n        }\n        return {\n            pricing: {\n                computedValue: sortedBids[0].computedValue,\n                amount: sortedBids[0].bid.amount,\n                prettyAmount: setCurrencyDecimal(sortedBids[0].bid.amount, sortedBids[0].bid.currency.decimals),\n                currency: transformCurrencyEth(sortedBids[0].bid.currency),\n            },\n            placedBy: sortedBids[0].bid.bidder.id,\n            placedAt: sortedBids[0].bid.createdAtTimestamp,\n        };\n    };\n    const nftPricingInformation = {\n        reserve: pricing.reserve\n            ? {\n                ...pricing.reserve,\n                currentBid: (() => {\n                    var _a;\n                    if (!pricing.reserve.currentBid) {\n                        return undefined;\n                    }\n                    const { amount, ...bidRaw } = (_a = pricing.reserve) === null || _a === void 0 ? void 0 : _a.currentBid;\n                    return {\n                        ...bidRaw,\n                        ...getBidPricing(amount),\n                    };\n                })(),\n                current: {\n                    highestBid: getHighestReserveBid(),\n                    likelyHasEnded: parseInt((_a = pricing.reserve) === null || _a === void 0 ? void 0 : _a.expectedEndTimestamp, 10) <\n                        new Date().getTime() / 1000,\n                    reserveMet: ((_b = pricing.reserve) === null || _b === void 0 ? void 0 : _b.firstBidTime) && pricing.reserve.firstBidTime !== '0',\n                },\n                reservePrice: {\n                    currency: transformCurrencyEth({\n                        id: pricing.reserve.auctionCurrency.id,\n                        name: pricing.reserve.auctionCurrency.name,\n                        symbol: pricing.reserve.auctionCurrency.symbol,\n                        decimals: pricing.reserve.auctionCurrency.decimals,\n                    }),\n                    amount: pricing.reserve.reservePrice,\n                    prettyAmount: setCurrencyDecimal(pricing.reserve.reservePrice, pricing.reserve.auctionCurrency.decimals),\n                    computedValue: getCurrencyComputedValue(pricing.reserve.auctionCurrency.id, pricing.reserve.reservePrice),\n                },\n                previousBids: ((_d = (_c = pricing.reserve) === null || _c === void 0 ? void 0 : _c.previousBids) === null || _d === void 0 ? void 0 : _d.map(({ amount, ...previousBid }) => ({\n                    ...previousBid,\n                    ...getBidPricing(amount),\n                })).sort((bidA, bidB) => bidA.bidInactivatedAtBlockNumber > bidB.bidInactivatedAtBlockNumber\n                    ? -1\n                    : 1)) || [],\n            }\n            : undefined,\n        perpetual: {\n            ask: ((_e = pricing.perpetual) === null || _e === void 0 ? void 0 : _e.ask)\n                ? transformAskCurrency(pricing.perpetual.ask)\n                : undefined,\n            bids: ((_f = pricing.perpetual) === null || _f === void 0 ? void 0 : _f.bids.map((bid) => handlePerpetualBid(bid))) || [],\n            highestBid: getHighestPerpetualBid(),\n        },\n        auctionType: ((_g = pricing.reserve) === null || _g === void 0 ? void 0 : _g.status) === 'Active'\n            ? AuctionInfoTypes_1.AuctionType.RESERVE\n            : pricing.perpetual\n                ? AuctionInfoTypes_1.AuctionType.PERPETUAL\n                : AuctionInfoTypes_1.AuctionType.NONE,\n        status: AuctionState_1.AuctionStateInfo.LOADING,\n    };\n    nftPricingInformation.status = AuctionState_1.getAuctionState(nftPricingInformation);\n    return nftPricingInformation;\n}\nexports.addAuctionInformation = addAuctionInformation;\n"]},"metadata":{},"sourceType":"script"}