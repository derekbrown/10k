{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType } from \"../parser/index.js\";\nimport { OperationData } from \"./OperationData.js\";\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        onNewData = _a.onNewData;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runLazy = false;\n    _this.previous = Object.create(null);\n\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.onNewData();\n    };\n\n    _this.obsRefetch = function (variables) {\n      var _a;\n\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.refetch(variables);\n    };\n\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      var _a;\n\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.fetchMore(fetchMoreOptions);\n    };\n\n    _this.obsUpdateQuery = function (mapFn) {\n      var _a;\n\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.updateQuery(mapFn);\n    };\n\n    _this.obsStartPolling = function (pollInterval) {\n      var _a;\n\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.startPolling(pollInterval);\n    };\n\n    _this.obsStopPolling = function () {\n      var _a;\n\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.stopPolling();\n    };\n\n    _this.obsSubscribeToMore = function (options) {\n      var _a;\n\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.subscribeToMore(options);\n    };\n\n    _this.onNewData = onNewData;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    var _this = this;\n\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(function (resolve) {\n      return _this.startQuerySubscription(resolve);\n    });\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.lazy,\n        lazy = _c === void 0 ? false : _c;\n\n    this.isMounted = true;\n    var options = this.getOptions();\n\n    if (this.currentObservable && !this.ssrInitiated()) {\n      this.startQuerySubscription();\n    }\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  };\n\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var _a = this.getOptions(),\n        ssr = _a.ssr,\n        skip = _a.skip;\n\n    var ssrDisabled = ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      var result = this.getExecuteResult() || ssrLoading;\n\n      if (result.loading && !skip) {\n        this.context.renderPromises.addQueryPromise(this, function () {\n          return null;\n        });\n      }\n\n      return result;\n    }\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context\n    });\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previous.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: void 0\n      });\n      this.currentObservable = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n\n      if (this.ssrInitiated()) {\n        this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);\n      }\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: void 0\n    });\n\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n\n    if (!equal(newObservableQueryOptions, this.previous.observableQueryOptions)) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function (onNewData) {\n    var _this = this;\n\n    if (onNewData === void 0) {\n      onNewData = this.onNewData;\n    }\n\n    if (this.currentSubscription || this.getOptions().skip) return;\n    this.currentSubscription = this.currentObservable.subscribe({\n      next: function (_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n        var previousResult = _this.previous.result;\n\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: function (error) {\n        _this.resubscribeToQuery();\n\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n        var previousResult = _this.previous.result;\n\n        if (previousResult && previousResult.loading || !equal(error, _this.previous.error)) {\n          _this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var currentObservable = this.currentObservable;\n\n    if (currentObservable) {\n      var last = currentObservable[\"last\"];\n\n      try {\n        currentObservable.resetLastResults();\n        this.startQuerySubscription();\n      } finally {\n        currentObservable[\"last\"] = last;\n      }\n    }\n  };\n\n  QueryData.prototype.getExecuteResult = function () {\n    var result = this.observableQueryFields();\n    var options = this.getOptions();\n\n    if (options.skip) {\n      result = __assign(__assign({}, result), {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true\n      });\n    } else if (this.currentObservable) {\n      var currentResult = this.currentObservable.getCurrentResult();\n      var data = currentResult.data,\n          loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n      var error = currentResult.error;\n\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n\n      result = __assign(__assign({}, result), {\n        data: data,\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n\n      if (loading) {} else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.options.fetchPolicy;\n        var partialRefetch = options.partialRefetch;\n\n        if (partialRefetch && partial && (!data || Object.keys(data).length === 0) && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    this.setOptions(options, true);\n    var previousResult = this.previous.result;\n    this.previous.loading = previousResult && previousResult.loading || false;\n    result.previousData = previousResult && (previousResult.data || previousResult.previousData);\n    this.previous.result = result;\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n    return result;\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    if (!this.currentObservable || !this.previous.result) return;\n    var _a = this.previous.result,\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError,\n          skip = _b.skip;\n\n      if (this.previousOptions && !this.previous.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  };\n\n  QueryData.prototype.removeObservable = function (andDelete) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  };\n\n  QueryData.prototype.observableQueryFields = function () {\n    var _a;\n\n    return {\n      variables: (_a = this.currentObservable) === null || _a === void 0 ? void 0 : _a.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n\n  return QueryData;\n}(OperationData);\n\nexport { QueryData };","map":{"version":3,"mappings":"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","names":["equal","ApolloError","NetworkStatus","DocumentType","OperationData","__extends","_a","options","context","onNewData","_super","_this","Object","create","cleanup","runLazy","lazyOptions","variables","currentObservable","refetch","fetchMoreOptions","fetchMore","mapFn","updateQuery","pollInterval","startPolling","stopPolling","subscribeToMore","QueryData","refreshClient","getOptions","skip","query","previous","removeQuerySubscription","removeObservable","updateObservableQuery","getExecuteSsrResult","getExecuteResult","runLazyQuery","loading","networkStatus","ready","called","data","undefined","execute","ssr","Promise","startQuerySubscription","resolve","_b","_c","lazy","isMounted","ssrInitiated","handleErrorOrCompleted","previousOptions","unmount","bind","result","call","__assign","renderPromises","ssrDisabled","fetchDisabled","client","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","verifyDocumentType","Query","displayName","fetchPolicy","getSSRObservable","observableQueryOptions","prepareObservableQueryOptions","children","watchQuery","registerSSRObservable","initializeObservableQuery","newObservableQueryOptions","setOptions","catch","currentSubscription","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","last","resetLastResults","currentResult","getCurrentResult","partial","errors","length","graphQLErrors","assign","getLastResult","partialRefetch","keys","previousData","resetQueryStoreErrors","onCompleted","onError","unsubscribe","andDelete","obsRefetch","obsFetchMore","obsUpdateQuery","obsStartPolling","obsStopPolling","obsSubscribeToMore"],"sourceRoot":"","sources":["../../../src/react/data/QueryData.ts"],"sourcesContent":["import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode,\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\ntype ObservableQueryOptions<TData, TVars> =\n  ReturnType<QueryData<TData, TVars>[\"prepareObservableQueryOptions\"]>;\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  public currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: ObservableQueryOptions<TData, TVariables>;\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n    const options = this.getOptions();\n    if (this.currentObservable && !this.ssrInitiated()) {\n      this.startQuerySubscription();\n    }\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      const result = this.getExecuteResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises!.addQueryPromise(this, () => null);\n      }\n      return result;\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: void 0,\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: void 0,\n    };\n\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n\n    if (\n      !equal(newObservableQueryOptions, this.previous.observableQueryOptions)\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const last = currentObservable[\"last\"];\n      try {\n        currentObservable.resetLastResults();\n        this.startQuerySubscription();\n      } finally {\n        currentObservable[\"last\"] = last;\n      }\n    }\n  }\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = (\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable?.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable?.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable?.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}