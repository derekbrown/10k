{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NFTFetchConfiguration = exports.NFTFetchContext = exports.defaultFetchAgent = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\n\nconst react_1 = tslib_1.__importStar(require(\"react\"));\n\nconst networks_1 = require(\"../constants/networks\");\n\nconst MediaFetchAgent_1 = require(\"../fetcher/MediaFetchAgent\");\n\nexports.defaultFetchAgent = new MediaFetchAgent_1.MediaFetchAgent(networks_1.Networks.MAINNET);\nexports.NFTFetchContext = react_1.default.createContext(exports.defaultFetchAgent);\n\nconst NFTFetchConfiguration = _ref => {\n  let {\n    networkId,\n    children\n  } = _ref;\n  const lastFetchContext = react_1.useContext(exports.NFTFetchContext);\n  const fetchAgent = react_1.useMemo(() => {\n    if (lastFetchContext.networkId === networkId) {\n      return lastFetchContext;\n    }\n\n    return new MediaFetchAgent_1.MediaFetchAgent(networkId);\n  }, [networkId]);\n  return jsx_runtime_1.jsx(exports.NFTFetchContext.Provider, Object.assign({\n    value: fetchAgent\n  }, {\n    children: children\n  }), void 0);\n};\n\nexports.NFTFetchConfiguration = NFTFetchConfiguration;","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/@zoralabs/nft-hooks/dist/context/NFTFetchContext.js"],"names":["Object","defineProperty","exports","value","NFTFetchConfiguration","NFTFetchContext","defaultFetchAgent","tslib_1","require","jsx_runtime_1","react_1","__importStar","networks_1","MediaFetchAgent_1","MediaFetchAgent","Networks","MAINNET","default","createContext","networkId","children","lastFetchContext","useContext","fetchAgent","useMemo","jsx","Provider","assign"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgCF,OAAO,CAACG,eAAR,GAA0BH,OAAO,CAACI,iBAAR,GAA4B,KAAK,CAA3F;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,mBAAD,CAA7B;;AACA,MAAME,OAAO,GAAGH,OAAO,CAACI,YAAR,CAAqBH,OAAO,CAAC,OAAD,CAA5B,CAAhB;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAC,uBAAD,CAA1B;;AACA,MAAMK,iBAAiB,GAAGL,OAAO,CAAC,4BAAD,CAAjC;;AACAN,OAAO,CAACI,iBAAR,GAA4B,IAAIO,iBAAiB,CAACC,eAAtB,CAAsCF,UAAU,CAACG,QAAX,CAAoBC,OAA1D,CAA5B;AACAd,OAAO,CAACG,eAAR,GAA0BK,OAAO,CAACO,OAAR,CAAgBC,aAAhB,CAA8BhB,OAAO,CAACI,iBAAtC,CAA1B;;AACA,MAAMF,qBAAqB,GAAG,QAA8B;AAAA,MAA7B;AAAEe,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA6B;AACxD,QAAMC,gBAAgB,GAAGX,OAAO,CAACY,UAAR,CAAmBpB,OAAO,CAACG,eAA3B,CAAzB;AACA,QAAMkB,UAAU,GAAGb,OAAO,CAACc,OAAR,CAAgB,MAAM;AACrC,QAAIH,gBAAgB,CAACF,SAAjB,KAA+BA,SAAnC,EAA8C;AAC1C,aAAOE,gBAAP;AACH;;AACD,WAAO,IAAIR,iBAAiB,CAACC,eAAtB,CAAsCK,SAAtC,CAAP;AACH,GALkB,EAKhB,CAACA,SAAD,CALgB,CAAnB;AAMA,SAAQV,aAAa,CAACgB,GAAd,CAAkBvB,OAAO,CAACG,eAAR,CAAwBqB,QAA1C,EAAoD1B,MAAM,CAAC2B,MAAP,CAAc;AAAExB,IAAAA,KAAK,EAAEoB;AAAT,GAAd,EAAqC;AAAEH,IAAAA,QAAQ,EAAEA;AAAZ,GAArC,CAApD,EAAkH,KAAK,CAAvH,CAAR;AACH,CATD;;AAUAlB,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NFTFetchConfiguration = exports.NFTFetchContext = exports.defaultFetchAgent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\nconst react_1 = tslib_1.__importStar(require(\"react\"));\nconst networks_1 = require(\"../constants/networks\");\nconst MediaFetchAgent_1 = require(\"../fetcher/MediaFetchAgent\");\nexports.defaultFetchAgent = new MediaFetchAgent_1.MediaFetchAgent(networks_1.Networks.MAINNET);\nexports.NFTFetchContext = react_1.default.createContext(exports.defaultFetchAgent);\nconst NFTFetchConfiguration = ({ networkId, children, }) => {\n    const lastFetchContext = react_1.useContext(exports.NFTFetchContext);\n    const fetchAgent = react_1.useMemo(() => {\n        if (lastFetchContext.networkId === networkId) {\n            return lastFetchContext;\n        }\n        return new MediaFetchAgent_1.MediaFetchAgent(networkId);\n    }, [networkId]);\n    return (jsx_runtime_1.jsx(exports.NFTFetchContext.Provider, Object.assign({ value: fetchAgent }, { children: children }), void 0));\n};\nexports.NFTFetchConfiguration = NFTFetchConfiguration;\n"]},"metadata":{},"sourceType":"script"}