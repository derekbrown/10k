{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useAuctions = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst react_1 = require(\"react\");\n\nconst swr_1 = tslib_1.__importDefault(require(\"swr\"));\n\nconst NFTFetchContext_1 = require(\"../context/NFTFetchContext\");\n\nconst ErrorUtils_1 = require(\"../fetcher/ErrorUtils\");\n/**\n * Fetches on-chain NFT auction data for the given curator\n *\n * @param curators\n * @param approved\n * @returns useNFTType hook results include loading, error, and data (ReserveAuctionPartialFragment).\n */\n\n\nfunction useAuctions() {\n  let curators = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let approved = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  options.onErrorRetry = ErrorUtils_1.onErrorRetry;\n  const fetcher = react_1.useContext(NFTFetchContext_1.NFTFetchContext);\n  const queryKey = JSON.stringify({\n    type: 'useAuctions',\n    curators,\n    approved\n  });\n  const {\n    data,\n    error\n  } = swr_1.default(queryKey, async query => {\n    const {\n      curators,\n      approved\n    } = JSON.parse(query);\n    return await fetcher.fetchReserveAuctions(curators.map(curator => curator.toLowerCase()), approved);\n  }, options);\n  return {\n    loading: !error && !data,\n    error,\n    data\n  };\n}\n\nexports.useAuctions = useAuctions;","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/@zoralabs/nft-hooks/dist/hooks/useAuctions.js"],"names":["Object","defineProperty","exports","value","useAuctions","tslib_1","require","react_1","swr_1","__importDefault","NFTFetchContext_1","ErrorUtils_1","curators","approved","options","onErrorRetry","fetcher","useContext","NFTFetchContext","queryKey","JSON","stringify","type","data","error","default","query","parse","fetchReserveAuctions","map","curator","toLowerCase","loading"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAME,KAAK,GAAGH,OAAO,CAACI,eAAR,CAAwBH,OAAO,CAAC,KAAD,CAA/B,CAAd;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,4BAAD,CAAjC;;AACA,MAAMK,YAAY,GAAGL,OAAO,CAAC,uBAAD,CAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,WAAT,GAAmE;AAAA,MAA9CQ,QAA8C,uEAAnC,EAAmC;AAAA,MAA/BC,QAA+B,uEAApB,IAAoB;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC/DA,EAAAA,OAAO,CAACC,YAAR,GAAuBJ,YAAY,CAACI,YAApC;AACA,QAAMC,OAAO,GAAGT,OAAO,CAACU,UAAR,CAAmBP,iBAAiB,CAACQ,eAArC,CAAhB;AACA,QAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEC,IAAAA,IAAI,EAAE,aAAR;AAAuBV,IAAAA,QAAvB;AAAiCC,IAAAA;AAAjC,GAAf,CAAjB;AACA,QAAM;AAAEU,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBhB,KAAK,CAACiB,OAAN,CAAcN,QAAd,EAAwB,MAAOO,KAAP,IAAiB;AAC7D,UAAM;AAAEd,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAyBO,IAAI,CAACO,KAAL,CAAWD,KAAX,CAA/B;AACA,WAAO,MAAMV,OAAO,CAACY,oBAAR,CAA6BhB,QAAQ,CAACiB,GAAT,CAAcC,OAAD,IAAaA,OAAO,CAACC,WAAR,EAA1B,CAA7B,EAA+ElB,QAA/E,CAAb;AACH,GAHuB,EAGrBC,OAHqB,CAAxB;AAIA,SAAO;AACHkB,IAAAA,OAAO,EAAE,CAACR,KAAD,IAAU,CAACD,IADjB;AAEHC,IAAAA,KAFG;AAGHD,IAAAA;AAHG,GAAP;AAKH;;AACDrB,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useAuctions = void 0;\nconst tslib_1 = require(\"tslib\");\nconst react_1 = require(\"react\");\nconst swr_1 = tslib_1.__importDefault(require(\"swr\"));\nconst NFTFetchContext_1 = require(\"../context/NFTFetchContext\");\nconst ErrorUtils_1 = require(\"../fetcher/ErrorUtils\");\n/**\n * Fetches on-chain NFT auction data for the given curator\n *\n * @param curators\n * @param approved\n * @returns useNFTType hook results include loading, error, and data (ReserveAuctionPartialFragment).\n */\nfunction useAuctions(curators = [], approved = null, options = {}) {\n    options.onErrorRetry = ErrorUtils_1.onErrorRetry;\n    const fetcher = react_1.useContext(NFTFetchContext_1.NFTFetchContext);\n    const queryKey = JSON.stringify({ type: 'useAuctions', curators, approved });\n    const { data, error } = swr_1.default(queryKey, async (query) => {\n        const { curators, approved } = JSON.parse(query);\n        return await fetcher.fetchReserveAuctions(curators.map((curator) => curator.toLowerCase()), approved);\n    }, options);\n    return {\n        loading: !error && !data,\n        error,\n        data,\n    };\n}\nexports.useAuctions = useAuctions;\n"]},"metadata":{},"sourceType":"script"}