{"ast":null,"code":"import e, { createContext as r, useContext as t, useMemo as n, useCallback as o } from \"react\";\nimport i, { SWRConfig as a, useSWRConfig as u } from \"swr\";\n\nfunction c() {\n  return c = Object.assign || function (e) {\n    for (var r = 1; r < arguments.length; r++) {\n      var t = arguments[r];\n\n      for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n    }\n\n    return e;\n  }, c.apply(this, arguments);\n}\n\nfunction s(e) {\n  return s = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {\n    return e.__proto__ || Object.getPrototypeOf(e);\n  }, s(e);\n}\n\nfunction l(e, r) {\n  return l = Object.setPrototypeOf || function (e, r) {\n    return e.__proto__ = r, e;\n  }, l(e, r);\n}\n\nfunction f() {\n  if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n  if (Reflect.construct.sham) return !1;\n  if (\"function\" == typeof Proxy) return !0;\n\n  try {\n    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;\n  } catch (e) {\n    return !1;\n  }\n}\n\nfunction d(e, r, t) {\n  return d = f() ? Reflect.construct : function (e, r, t) {\n    var n = [null];\n    n.push.apply(n, r);\n    var o = new (Function.bind.apply(e, n))();\n    return t && l(o, t.prototype), o;\n  }, d.apply(null, arguments);\n}\n\nfunction h(e) {\n  var r = \"function\" == typeof Map ? new Map() : void 0;\n  return h = function (e) {\n    if (null === e || -1 === Function.toString.call(e).indexOf(\"[native code]\")) return e;\n    if (\"function\" != typeof e) throw new TypeError(\"Super expression must either be null or a function\");\n\n    if (void 0 !== r) {\n      if (r.has(e)) return r.get(e);\n      r.set(e, t);\n    }\n\n    function t() {\n      return d(e, arguments, s(this).constructor);\n    }\n\n    return t.prototype = Object.create(e.prototype, {\n      constructor: {\n        value: t,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), l(t, e);\n  }, h(e);\n}\n\nfunction m(e, r) {\n  (null == r || r > e.length) && (r = e.length);\n\n  for (var t = 0, n = new Array(r); t < r; t++) n[t] = e[t];\n\n  return n;\n}\n\nvar p = /^https:\\/\\/rarible\\.com\\/token\\/(0x[a-fA-F0-9]{40}):([0-9]+)/;\n\nfunction v(e) {\n  return /^0x[a-fA-F0-9]{40}$/.test(e);\n}\n\nfunction g(e) {\n  return e;\n}\n\nfunction y(e) {\n  var r = p.exec(e);\n  return r ? [r[1], r[2]] : null;\n}\n\nfunction w(e, r) {\n  return void 0 === r && (r = \"\"), \"https://ipfs.io/ipfs/\" + e + r;\n}\n\nvar P = /^ipfs:\\/\\/(?:ipfs\\/)?([^/]+)(\\/.+)?$/,\n    b = /^Qm[1-9A-HJ-NP-Za-km-z]{44}$/;\n\nfunction x(e, r) {\n  var t = P.exec(e);\n\n  if (t) {\n    var n = t[2];\n    return r(t[1], void 0 === n ? \"\" : n);\n  }\n\n  return b.test(e) ? r(e) : e;\n}\n\nfunction j(e, r, t) {\n  return e = function (e, r) {\n    try {\n      var t = new URL(e);\n      return \"api.opensea.io\" !== t.host && \"testnets-api.opensea.io\" !== t.host || !t.pathname.includes(\"0x%7Bid%7D\") ? e : (t.pathname = t.pathname.replace(/0x%7Bid%7D/g, r), t.searchParams.set(\"format\", \"json\"), String(t));\n    } catch (r) {\n      return e;\n    }\n  }(e, r), (e = x(e = function (e) {\n    try {\n      var r = new URL(e);\n      return \"api.niftygateway.com\" !== r.host ? e : (r.pathname = r.pathname + \"/\", String(r));\n    } catch (r) {\n      return e;\n    }\n  }(e), t.ipfsUrl)).startsWith(\"http\") && (e = t.jsonProxy(e)), e;\n}\n\nfunction I(e, r) {\n  return x(e, r.ipfsUrl);\n}\n\nfunction k(e, r) {\n  return (null == e ? void 0 : e.toLowerCase()) === (null == r ? void 0 : r.toLowerCase());\n}\n\nfunction A(e) {\n  return E(Promise.all([].concat(e).map(E)));\n}\n\nfunction E(e) {\n  return new Promise(function (r, t) {\n    Promise.resolve(e).then(t, r);\n  });\n}\n\nvar O = /*#__PURE__*/function (e) {\n  var r, t;\n\n  function n(r, t) {\n    var n;\n    return (n = e.call(this, r) || this).errors = void 0, n.name = \"MultipleErrors\", n.errors = t, n;\n  }\n\n  return t = e, (r = n).prototype = Object.create(t.prototype), r.prototype.constructor = r, l(r, t), n;\n}( /*#__PURE__*/h(Error)),\n    U = /\\.(?:png|svg|jpg|jepg|gif|webp|jxl|avif)$/,\n    T = /\\.(?:mp4|mov|webm|ogv)$/;\n\nfunction D(e) {\n  return U.test(e) ? \"image\" : T.test(e) ? \"video\" : \"unknown\";\n}\n\nvar F = function (e, r) {\n  try {\n    return Promise.resolve(r(e, S)).then(function (r) {\n      return {\n        description: N,\n        image: (t = r, o = t.indexOf(\",\") + 1, null != (n = t.slice(0, o) + encodeURIComponent(t.slice(o))) ? n : \"\"),\n        imageType: \"image\",\n        metadataUrl: \"\",\n        name: \"CryptoPunk \" + e,\n        owner: \"\",\n        rawData: null\n      };\n      var t, n, o;\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n    N = '\\n  10,000 unique collectible characters with proof of ownership stored on the\\n  Ethereum blockchain. The project that inspired the modern CryptoArt movement.\\n  The first \"Non-Fungible Token,\" and inspiration for the Ethereum ERC-721\\n  standard that powers most digital art and collectibles.\\n',\n    S = {\n  address: \"0x16F5A35647D6F03D5D3da7b35409D65ba03aF3B2\",\n  methodName: \"punkImageSvg\",\n  methodHash: \"0x74beb047\",\n  humanReadableAbi: [\"function punkImageSvg(uint16 index) view returns (string svg)\"]\n};\n\nfunction B(e) {\n  return k(e, \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\");\n}\n\nvar C = function (e, r) {\n  var t = r.jsonProxy;\n\n  try {\n    var n = t(\"https://api.cryptokitties.co/v3/kitties/\" + e);\n    return Promise.resolve(fetch(n)).then(function (e) {\n      return Promise.resolve(e.json()).then(function (e) {\n        var r,\n            t,\n            o,\n            i = null != (r = null == e ? void 0 : e.image_url) ? r : \"\";\n        return {\n          description: null != (t = null == e ? void 0 : e.bio) ? t : \"−\",\n          image: i,\n          imageType: i ? \"image\" : \"unknown\",\n          metadataUrl: n,\n          name: null != (o = null == e ? void 0 : e.name) ? o : \"Unknown\",\n          owner: \"\",\n          rawData: e\n        };\n      });\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nfunction R(e) {\n  return k(e, \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\");\n}\n\nvar _ = function (e) {\n  try {\n    return Promise.resolve(fetch($, {\n      body: M(\"0x959e104E1a4dB6317fA58F8295F586e1A978c297\", e),\n      method: \"POST\"\n    })).then(function (e) {\n      return Promise.resolve(e.json()).then(function (e) {\n        var r,\n            t,\n            n,\n            o,\n            i,\n            a,\n            u,\n            c,\n            s = e.data,\n            l = null == s || null == (r = s.nfts) ? void 0 : r[0],\n            f = null != (t = null == l ? void 0 : l.image) ? t : \"\";\n        return {\n          description: null != (n = null == l || null == (o = l.estate) || null == (i = o.data) ? void 0 : i.description) ? n : \"−\",\n          image: f,\n          imageType: f ? \"image\" : \"unknown\",\n          metadataUrl: \"\",\n          name: null != (a = null == l ? void 0 : l.name) ? a : \"Unknown\",\n          owner: null != (u = null == l || null == (c = l.owner) ? void 0 : c.address) ? u : \"\",\n          rawData: s\n        };\n      });\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n    $ = \"https://api.thegraph.com/subgraphs/name/decentraland/marketplace\";\n\nfunction M(e, r) {\n  return JSON.stringify({\n    operationName: \"NFTByTokenId\",\n    variables: {\n      contractAddress: e,\n      tokenId: r\n    },\n    query: \"\\n  query NFTByTokenId($contractAddress: String, $tokenId: String) {\\n    nfts(\\n      where: { contractAddress: $contractAddress, tokenId: $tokenId }\\n      first: 1\\n    ) {\\n      name\\n      image\\n      owner {\\n        address\\n      }\\n      estate {\\n        size\\n        data {\\n          description\\n        }\\n      }\\n    }\\n  }\\n\"\n  });\n}\n\nfunction q(e) {\n  return k(e, \"0x959e104E1a4dB6317fA58F8295F586e1A978c297\");\n}\n\nvar z = function (e) {\n  try {\n    return Promise.resolve(fetch(H, {\n      body: L(\"0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d\", e),\n      method: \"POST\"\n    })).then(function (e) {\n      return Promise.resolve(e.json()).then(function (e) {\n        var r,\n            t,\n            n,\n            o,\n            i,\n            a,\n            u,\n            c = e.data,\n            s = null == c || null == (r = c.nfts) ? void 0 : r[0],\n            l = null == s ? void 0 : s.parcel,\n            f = null != (t = null == s ? void 0 : s.image) ? t : \"\";\n        return {\n          description: null != (n = null == l || null == (o = l.data) ? void 0 : o.description) ? n : \"-\",\n          image: f,\n          imageType: f ? \"image\" : \"unknown\",\n          metadataUrl: \"\",\n          name: null != (i = null == s ? void 0 : s.name) ? i : \"Parcel \" + (null == l ? void 0 : l.x) + \",\" + (null == l ? void 0 : l.y),\n          owner: null != (a = null == s || null == (u = s.owner) ? void 0 : u.address) ? a : \"\",\n          rawData: c\n        };\n      });\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n    H = \"https://api.thegraph.com/subgraphs/name/decentraland/marketplace\";\n\nfunction L(e, r) {\n  return JSON.stringify({\n    operationName: \"NFTByTokenId\",\n    variables: {\n      contractAddress: e,\n      tokenId: r\n    },\n    query: \"\\n  query NFTByTokenId($contractAddress: String, $tokenId: String) {\\n    nfts(\\n      where: { contractAddress: $contractAddress, tokenId: $tokenId }\\n      first: 1\\n    ) {\\n      name\\n      image\\n      owner {\\n        address\\n      }\\n      parcel {\\n        x\\n        y\\n        data {\\n          description\\n        }\\n      }\\n    }\\n  }\\n\"\n  });\n}\n\nfunction W(e) {\n  return k(e, \"0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d\");\n}\n\nvar J = function (e, r, t) {\n  try {\n    return Promise.resolve(r(e, Z)).then(function (r) {\n      return Promise.resolve(Q(r, t.ipfsUrl)).then(function (t) {\n        return {\n          description: \"The (unofficial) wrapped version of MoonCats Rescue. Original cat ID: \" + r + \".\",\n          image: t,\n          imageType: t ? \"image\" : \"unknown\",\n          metadataUrl: \"\",\n          name: \"Wrapped MoonCat #\" + e,\n          owner: \"\",\n          rawData: null\n        };\n      });\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n    Q = function (e, r) {\n  try {\n    var t = e.slice(4, 6),\n        n = x(\"ipfs://ipfs/\" + G + \"/\" + t + \"/\" + e + \".png\", r);\n    return Promise.resolve((o = n, new Promise(function (e, r) {\n      var t = new Image();\n      t.src = o, t.crossOrigin = \"\", t.onload = function () {\n        return e(t);\n      }, t.onerror = function (e) {\n        return r(e);\n      };\n    }))).then(function (e) {\n      return function (e, r) {\n        var t = void 0 === r ? {} : r,\n            n = t.scale,\n            o = void 0 === n ? 1 : n,\n            i = t.padding,\n            a = void 0 === i ? 0 : i,\n            u = e.naturalWidth * o,\n            c = e.naturalHeight * o,\n            s = Math.max(u * a, c * a),\n            l = document.createElement(\"canvas\");\n        l.width = u + 2 * s, l.height = c + 2 * s;\n        var f = l.getContext(\"2d\");\n        return null === f ? null : (f.imageSmoothingEnabled = !1, f.drawImage(e, s, s, u, c), l.toDataURL());\n      }(e, {\n        scale: 4,\n        padding: .125\n      });\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n\n  var o;\n},\n    Z = {\n  address: \"0x7c40c393dc0f283f318791d746d894ddd3693572\",\n  methodName: \"_tokenIDToCatID\",\n  methodHash: \"0xfe294644\",\n  humanReadableAbi: [\"function _tokenIDToCatID(uint256 tokenId) view returns (bytes5 catId)\"]\n},\n    G = \"bafybeidk4zunuq56w2pf2sncexohlyqae62dzplljkbwswa7jwywh2dava\";\n\nfunction K(e) {\n  return k(e, Z.address);\n}\n\nvar V = function (e, r) {\n  try {\n    return Promise.resolve(fetch(e)).then(function (t) {\n      function n() {\n        var e = c({}, o);\n        if (function (e) {\n          var r, t, n, o, i, a, u, c, s, l, f, d;\n          return !(!e || \"object\" != typeof e) && \"Asset Metadata\" === e.title && \"object\" === e.type && \"string\" == typeof (null == (r = e.properties) || null == (t = r.name) ? void 0 : t.description) && \"string\" == typeof (null == (n = e.properties) || null == (o = n.image) ? void 0 : o.description) && \"string\" == typeof (null == (i = e.properties) || null == (a = i.description) ? void 0 : a.description) && \"string\" === (null == (u = e.properties) || null == (c = u.name) ? void 0 : c.type) && \"string\" === (null == (s = e.properties) || null == (l = s.image) ? void 0 : l.type) && \"string\" === (null == (f = e.properties) || null == (d = f.description) ? void 0 : d.type);\n        }(e) && (e = function (e) {\n          var r, t, n, o, i, a;\n          return {\n            name: (null == (r = e.properties) || null == (t = r.name) ? void 0 : t.description) || \"\",\n            description: (null == (n = e.properties) || null == (o = n.description) ? void 0 : o.description) || \"\",\n            image: (null == (i = e.properties) || null == (a = i.image) ? void 0 : a.description) || \"\",\n            rawData: c({}, e)\n          };\n        }(e)), !function (e) {\n          return !(!e || \"object\" != typeof e) && (\"name\" in e || \"image\" in e);\n        }(e = function (e) {\n          return e && \"object\" == typeof e && void 0 === (null == e ? void 0 : e.image) && \"string\" == typeof (null == e ? void 0 : e.imageUrl) ? c({}, e, {\n            image: null == e ? void 0 : e.imageUrl\n          }) : e;\n        }(e))) throw new Error(\"Invalid data received\");\n        return function (e, r) {\n          return c({}, e, {\n            image: I(e.image, r)\n          });\n        }({\n          description: e.description || \"\",\n          image: e.image || \"\",\n          name: e.name || \"\",\n          rawData: o\n        }, r);\n      }\n\n      if (!t.ok) throw new Error(\"Error when trying to request \" + e);\n\n      var o,\n          i = function (e, r) {\n        try {\n          var n = Promise.resolve(t.json()).then(function (e) {\n            o = e;\n          });\n        } catch (e) {\n          return r();\n        }\n\n        return n && n.then ? n.then(void 0, r) : n;\n      }(0, function () {\n        o = {\n          name: \"\",\n          description: \"\",\n          image: e\n        };\n      });\n\n      return i && i.then ? i.then(n) : n();\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n    X = function (e, r, t) {\n  try {\n    return Promise.resolve(A([e.tokenURI(r), e.uri(r)]).catch(function (e) {\n      throw new O(\"An error occurred while trying to fetch the token URI from the NFT contract. See the “errors” property on this error for details.\", e);\n    })).then(function (e) {\n      return j(e, r, t);\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n    Y = [\"function tokenURI(uint256 _tokenId) external view returns (string)\", \"function ownerOf(uint256 _tokenId) external view returns (address)\", \"function uri(uint256 _id) external view returns (string)\"];\n\nfunction ee(e) {\n  return {\n    config: e,\n    fetchNft: function (r, t, n) {\n      try {\n        if (!v(r)) throw new Error(\"Invalid contract address: \" + r);\n        return Promise.resolve(function (e, r, t, n) {\n          try {\n            return W(e) ? Promise.resolve(z(r)) : q(e) ? Promise.resolve(_(r)) : R(e) ? Promise.resolve(C(r, n)) : Promise.resolve(function (e) {\n              try {\n                var r;\n                return null != (r = e.ethers) && r.Contract ? Promise.resolve(e) : Promise.resolve(function (r, t) {\n                  try {\n                    var n = Promise.resolve(import(\"@ethersproject/contracts\")).then(function (r) {\n                      if (null == r || !r.Contract) throw new Error();\n                      return c({}, e, {\n                        ethers: r\n                      });\n                    });\n                  } catch (e) {\n                    return t();\n                  }\n\n                  return n && n.then ? n.then(void 0, t) : n;\n                }(0, function () {\n                  throw new Error(\"Ethers couldn’t be imported. Please add the ethers module to your project dependencies, or inject it in the Ethers fetcher options.\");\n                }));\n              } catch (e) {\n                return Promise.reject(e);\n              }\n            }(t)).then(function (t) {\n              return B(e) ? F(r, function (e) {\n                return function (r, t) {\n                  try {\n                    var n = new e.ethers.Contract(t.address, t.humanReadableAbi, e.provider);\n                    return Promise.resolve(n.punkImageSvg(r));\n                  } catch (e) {\n                    return Promise.reject(e);\n                  }\n                };\n              }(t)) : K(e) ? J(r, function (e) {\n                return function (r, t) {\n                  try {\n                    var n = new e.ethers.Contract(t.address, t.humanReadableAbi, e.provider);\n                    return Promise.resolve(n._tokenIDToCatID(r)).then(function (e) {\n                      return null != e ? e : \"\";\n                    });\n                  } catch (e) {\n                    return Promise.reject(e);\n                  }\n                };\n              }(t), n) : function (e, r, t, n) {\n                try {\n                  var o = new t.ethers.Contract(e, Y, t.provider);\n                  return Promise.resolve(Promise.all([X(o, r, n), o.ownerOf(r).catch(function () {\n                    return \"\";\n                  })])).then(function (e) {\n                    var r = e[0],\n                        t = e[1];\n                    return Promise.resolve(V(r, n)).then(function (e) {\n                      return c({}, e, {\n                        imageType: D(e.image),\n                        metadataUrl: r,\n                        owner: t\n                      });\n                    });\n                  });\n                } catch (e) {\n                  return Promise.reject(e);\n                }\n              }(e, r, t, n);\n            });\n          } catch (e) {\n            return Promise.reject(e);\n          }\n        }(r, t, e, n)).then(function (e) {\n          return function (e, r) {\n            return e.image.startsWith(\"http\") ? c({}, e, {\n              image: r(e.image, e)\n            }) : e;\n          }(e, n.imageProxy);\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }\n  };\n}\n\nfunction re(e) {\n  for (var r = \"\", t = 0; t < 32; ++t) r += (\"0\" + (e >> BigInt(256 - 8 * t - 8) & BigInt(255)).toString(16)).slice(-2);\n\n  return r;\n}\n\nfunction te(e) {\n  for (var r, t = BigInt(0), n = function (e, r) {\n    var t = \"undefined\" != typeof Symbol && e[Symbol.iterator] || e[\"@@iterator\"];\n    if (t) return (t = t.call(e)).next.bind(t);\n\n    if (Array.isArray(e) || (t = function (e, r) {\n      if (e) {\n        if (\"string\" == typeof e) return m(e, r);\n        var t = Object.prototype.toString.call(e).slice(8, -1);\n        return \"Object\" === t && e.constructor && (t = e.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(e) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? m(e, r) : void 0;\n      }\n    }(e))) {\n      t && (e = t);\n      var n = 0;\n      return function () {\n        return n >= e.length ? {\n          done: !0\n        } : {\n          done: !1,\n          value: e[n++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }(e); !(r = n()).done;) {\n    var o = r.value;\n    t = (t << BigInt(8)) + BigInt(o);\n  }\n\n  return t;\n}\n\nfunction ne(e) {\n  var r;\n  return e = e.replace(/^0x/, \"\"), new Uint8Array((null != (r = e.match(/.{1,2}/g)) ? r : []).map(function (e) {\n    return parseInt(e, 16);\n  }));\n}\n\nfunction oe(e) {\n  var r = ne(e),\n      t = Number(te(r.subarray(0, 32))),\n      n = Number(te(r.subarray(t, t + 32))),\n      o = r.subarray(t + 32, t + 32 + n);\n  return new TextDecoder().decode(o);\n}\n\nfunction ie(e) {\n  var r = te(ne(e).subarray(0, 32));\n  if (r >= Math.pow(BigInt(2), BigInt(160))) throw new Error(\"Encoded value is bigger than the largest possible address.  Decoded value: 0x\" + r.toString(16) + \".\");\n  return \"0x\" + r.toString(16);\n}\n\nfunction ae(e) {\n  return \"0xc87b56dd\" + re(e);\n}\n\nfunction ue(e) {\n  return \"0x6352211e\" + re(e);\n}\n\nfunction ce(e, r, t) {\n  return e.request({\n    method: \"eth_call\",\n    params: [{\n      data: t,\n      to: r\n    }, \"latest\"]\n  });\n}\n\nvar se = function (e, r, t, n) {\n  try {\n    return Promise.resolve(A(function (e) {\n      return [ae(BigInt(e)), (r = BigInt(e), \"0x0e89341c\" + re(r))];\n      var r;\n    }(r).map(function (r) {\n      return ce(t, e, r);\n    })).catch(function (e) {\n      throw new O(\"An error occurred while trying to fetch the token URI from the NFT contract. See the “errors” property on this error for details.\", e);\n    })).then(function (e) {\n      return j(oe(e), r, n);\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nfunction le(e) {\n  var r = function (e) {\n    if (!e.ethereum) {\n      if (!window.ethereum) throw new Error(\"Missing ethereum provider.\");\n      e.ethereum = window.ethereum;\n    }\n\n    return e;\n  }(e);\n\n  return {\n    config: r,\n    fetchNft: function (e, t, n) {\n      try {\n        if (!v(e)) throw new Error(\"Invalid contract address: \" + e);\n        return Promise.resolve(function (e, r, t, n) {\n          try {\n            return W(e) ? Promise.resolve(z(r)) : q(e) ? Promise.resolve(_(r)) : R(e) ? Promise.resolve(C(r, n)) : B(e) ? Promise.resolve(F(r, function (e) {\n              return function (r, t) {\n                try {\n                  if (void 0 === e.ethereum) throw new Error(\"No Ethereum provider\");\n                  return Promise.resolve(ce(e.ethereum, t.address, t.methodHash + re(BigInt(r))).then(oe));\n                } catch (e) {\n                  return Promise.reject(e);\n                }\n              };\n            }(t))) : K(e) ? Promise.resolve(J(r, function (e) {\n              return function (r, t) {\n                try {\n                  if (void 0 === e.ethereum) throw new Error(\"No Ethereum provider\");\n                  return Promise.resolve(ce(e.ethereum, t.address, t.methodHash + re(BigInt(r)))).then(function (e) {\n                    return e.slice(0, 12);\n                  });\n                } catch (e) {\n                  return Promise.reject(e);\n                }\n              };\n            }(t), n)) : Promise.resolve(function (e, r, t, n) {\n              var o = t.ethereum;\n\n              try {\n                return Promise.resolve(Promise.all([se(e, r, o, n), ce(o, e, ue(BigInt(r))).then(ie).catch(function () {\n                  return \"\";\n                })])).then(function (e) {\n                  var r = e[0],\n                      t = e[1];\n                  return Promise.resolve(V(r, n)).then(function (e) {\n                    return c({}, e, {\n                      imageType: D(e.image),\n                      metadataUrl: r,\n                      owner: t\n                    });\n                  });\n                });\n              } catch (e) {\n                return Promise.reject(e);\n              }\n            }(e, r, t, n));\n          } catch (e) {\n            return Promise.reject(e);\n          }\n        }(e, t, r, n)).then(function (e) {\n          return function (e, r) {\n            return e.image.startsWith(\"http\") ? c({}, e, {\n              image: r(e.image, e)\n            }) : e;\n          }(e, n.imageProxy);\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }\n  };\n}\n\nvar fe = {\n  name: \"\",\n  description: \"\",\n  image: \"\"\n};\n\nfunction de(e) {\n  return function (e) {\n    return Array.isArray(e) && 2 == e.length && \"ethers\" === e[0];\n  }(e) ? ee(e[1]) : function (e) {\n    return Array.isArray(e) && 2 == e.length && \"ethereum\" === e[0];\n  }(e) ? le(e[1]) : e;\n}\n\nvar he = r(null),\n    me = function (r) {\n  var t = r.children,\n      n = r.fetcher,\n      o = r.imageProxy,\n      i = void 0 === o ? g : o,\n      u = r.ipfsUrl,\n      c = void 0 === u ? w : u,\n      s = r.jsonProxy,\n      l = void 0 === s ? g : s;\n  if (!n) throw new Error(\"Please set the fetcher prop on <NftProvider />\");\n  var f = {\n    fetcher: de(n),\n    imageProxy: i,\n    ipfsUrl: c,\n    jsonProxy: l\n  };\n  return e.createElement(a, {\n    value: {\n      provider: function () {\n        return new Map();\n      }\n    }\n  }, e.createElement(he.Provider, {\n    value: f\n  }, t));\n};\n\nfunction pe(e, r) {\n  var a,\n      s = t(he);\n  if (null === s) throw new Error(\"Please wrap your app with <NftProvider />\");\n  var l = s.fetcher,\n      f = s.imageProxy,\n      d = s.ipfsUrl,\n      h = s.jsonProxy,\n      m = n(function () {\n    return {\n      imageProxy: f,\n      ipfsUrl: d,\n      jsonProxy: h\n    };\n  }, [f, d, h]),\n      p = o(function () {\n    return l ? l.fetchNft(e, r, m) : c({}, fe);\n  }, [e, l, m, r]),\n      v = null != (a = u().cache.get(e + r)) && a,\n      g = i(e + r, p, {\n    revalidateOnMount: !v,\n    revalidateOnFocus: !1,\n    revalidateOnReconnect: !1\n  });\n  return n(function () {\n    var e = g.error,\n        r = g.data,\n        t = g.mutate,\n        n = function () {\n      return t().then(function () {\n        return !0;\n      }).catch(function () {\n        return !1;\n      });\n    };\n\n    return void 0 === e && void 0 === r ? {\n      error: void 0,\n      loading: !0,\n      nft: void 0,\n      reload: n,\n      status: \"loading\"\n    } : void 0 !== e ? {\n      error: e,\n      loading: !1,\n      nft: void 0,\n      reload: n,\n      status: \"error\"\n    } : {\n      error: void 0,\n      loading: !1,\n      nft: r,\n      reload: n,\n      status: \"done\"\n    };\n  }, [g]);\n}\n\nvar ve = {\n  name: \"\",\n  description: \"\",\n  image: \"\"\n},\n    ge = /*#__PURE__*/function () {\n  function e(e, r) {\n    void 0 === r && (r = {}), this.fetcher = void 0, this.fetchContext = void 0, this.fetcher = this.normalizeFetcher(e), this.fetchContext = this.fetchContextFromOptions(r);\n  }\n\n  var r = e.prototype;\n  return r.fetchContextFromOptions = function (e) {\n    var r = e.imageProxy,\n        t = e.ipfsUrl,\n        n = e.jsonProxy;\n    return {\n      imageProxy: null != r ? r : g,\n      ipfsUrl: null != t ? t : w,\n      jsonProxy: null != n ? n : g\n    };\n  }, r.normalizeFetcher = function (e) {\n    return e ? this.isFetcherDeclarationEthers(e) ? ee(e[1]) : this.isFetcherDeclarationEthereum(e) ? le(e[1]) : e : {\n      config: {},\n      fetchNft: function () {\n        return Promise.resolve(ve);\n      }\n    };\n  }, r.isFetcherDeclarationEthers = function (e) {\n    return Array.isArray(e) && 2 == e.length && \"ethers\" === e[0];\n  }, r.isFetcherDeclarationEthereum = function (e) {\n    return Array.isArray(e) && 2 == e.length && \"ethereum\" === e[0];\n  }, r.fetchNft = function (e, r) {\n    try {\n      return Promise.resolve(this.fetcher.fetchNft(e, r, this.fetchContext));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }, e;\n}();\n\nexport { ge as FetchWrapper, me as NftProvider, le as ethereumFetcher, ee as ethersFetcher, y as parseNftUrl, pe as useNft };","map":{"version":3,"sources":["../src/utils.tsx","../src/fetchers/shared/cryptopunks.ts","../src/known-contracts.tsx","../src/fetchers/shared/cryptokitties.ts","../src/fetchers/shared/decentraland-estate.tsx","../src/fetchers/shared/decentraland-parcel.tsx","../src/fetchers/shared/mooncats.ts","../src/fetchers/shared/fetch-metadata.tsx","../src/fetchers/ethers/standard-nft.tsx","../src/fetchers/ethers/index.tsx","../src/fetchers/ethers/cryptopunks.ts","../src/fetchers/ethers/mooncats.ts","../src/fetchers/ethereum/utils.ts","../src/fetchers/ethereum/standard-nft.tsx","../src/fetchers/ethereum/index.tsx","../src/fetchers/ethereum/cryptopunks.ts","../src/fetchers/ethereum/mooncats.ts","../src/core.tsx","../src/fetchWrapper.ts"],"names":["RARIBLE_MATCH_RE","isAddress","value","test","identity","arg","parseNftUrl","url","raribleMatch","exec","src","Promise","resolve","reject","image","Image","crossOrigin","onload","onerror","error","scale","padding","width","naturalWidth","height","naturalHeight","_padding","Math","max","canvas","document","createElement","ctx","getContext","imageSmoothingEnabled","drawImage","toDataURL","ipfsUrlDefault","cid","path","IPFS_PROTOCOL_RE","IPFS_HASH_RE","ipfsUrlFromString","ipfsString","ipfsUrl","ipfsProtocolMatch","tokenId","_url","URL","host","pathname","includes","replace","searchParams","set","String","err","normalizeTokenUrl","fetchContext","normalizeOpenSeaUrl","normalizeNiftyGatewayUrl","startsWith","jsonProxy","normalizeImageUrl","data","imageUrl","title","type","_data$properties","properties","name","description","_data$properties2","_data$properties3","rawData","addressesEqual","addr1","addr2","toLowerCase","promiseAny","promises","reversePromise","all","map","promise","then","MultipleErrors","Error","errors","message","_this","IMAGE_EXT_RE","VIDEO_EXT_RE","urlExtensionType","CRYPTOPUNKS_DESCRIPTION","CRYPTOPUNKS_IMAGE_SVG","address","methodName","methodHash","humanReadableAbi","dataUri","dataStart","indexOf","slice","encodeURIComponent","cryptoPunksMetadata","index","cryptoPunksImage","imageType","metadataUrl","owner","isCryptoPunks","contractAddress","cryptoKittiesMetadata","id","res","fetch","json","image_url","bio","isCryptoKitties","ENDPOINT","body","JSON","stringify","operationName","variables","query","decentralandEstateMetadata","response","method","nft","nfts","estate","isDecentralandEstate","decentralandParcelMetadata","parcel","x","y","isDecentralandParcel","MOONCATS_WRAPPED","MOONCATS_IPFS_CID","catId","dir","frameImage","moonCatsMetadata","getCatId","isMoonCats","fetchMetadata","ok","isNftMetadataMixedInJsonSchema","fixNftMetadataMixedInJsonSchema","fixIncorrectImageField","isNftMetadata","normalizeNftMetadata","ABI","contract","uri","tokenURI","config","ethers","Contract","provider","ownerOf","metadata","import","configWithEthersLoaded","loadEthers","moonCatsCatId","fetchStandardNftContractData","imageProxy","ethersFetcher","fetchNft","fetchNftMetadata","addProxyImage","punkImageSvg","wrappedContract","result","_tokenIDToCatID","uint256Hex","i","BigInt","toString","bytesToBigInt","bytes","byte","hexToUint8Array","hex","Uint8Array","match","parseInt","decodeString","pointer","Number","subarray","length","TextDecoder","decode","decodeAddress","decoded","methodUriErc721","methodOwnerOfErc721","ethCall","ethereum","to","request","params","uriMethods","window","ethereumFetcher","_config","normalizeConfig","undefined","NFT_METADATA_DEFAULT","fetcher","Array","isArray","normalizeFetcher","isFetcherDeclarationEthers","isFetcherDeclarationEthereum","NftContext","createContext","NftProvider","children","context","React","SWRConfig","Map","Provider","useNft","useContext","useMemo","useCallback","cache","useSWRConfig","cached","get","useSWR","revalidateOnMount","revalidateOnFocus","revalidateOnReconnect","mutate","reload","loading","status","FetchWrapper","options","this","fetchContextFromOptions"],"mappings":"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","sourcesContent":["import type {\n  Address,\n  FetchContext,\n  IpfsUrlFn,\n  NftJsonMetadata,\n  NftMetadata,\n} from \"./types\"\n\n// Some NFT minting services misinterpreted the JSON schema from the EIP as\n// literal JSON, e.g. portion.io:\n// https://ipfs.io/ipfs/QmNt5T9HSXKLXZ3kmciU4Tm6q9R8JEm5ifJkPoxapjyRUR\ntype NftMetadataMixedInJsonSchema = {\n  title: string\n  type: \"object\"\n  properties: {\n    name: { type: \"string\"; description: string }\n    image: { type: \"string\"; description: string }\n    description: { type: \"string\"; description: string }\n  }\n}\n\nconst RARIBLE_MATCH_RE =\n  /^https:\\/\\/rarible\\.com\\/token\\/(0x[a-fA-F0-9]{40}):([0-9]+)/\n\nexport function isAddress(value: string): value is Address {\n  return /^0x[a-fA-F0-9]{40}$/.test(value)\n}\n\nexport function identity<T = unknown>(arg: T): T {\n  return arg\n}\n\nexport function parseNftUrl(url: string): [string, string] | null {\n  const raribleMatch = RARIBLE_MATCH_RE.exec(url)\n  if (raribleMatch) {\n    return [raribleMatch[1], raribleMatch[2]]\n  }\n  return null\n}\n\nexport function fetchImage(src: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const image = new Image()\n    image.src = src\n    image.crossOrigin = \"\"\n    image.onload = () => resolve(image)\n    image.onerror = (error) => reject(error)\n  })\n}\n\n// Scale the image and add some extra padding. Returns the image as base64.\n// The padding and scale are expressed as proportions of the image size.\nexport function frameImage(\n  image: HTMLImageElement,\n  { scale = 1, padding = 0 } = {}\n): string | null {\n  const width = image.naturalWidth * scale\n  const height = image.naturalHeight * scale\n  const _padding = Math.max(width * padding, height * padding)\n\n  const canvas = document.createElement(\"canvas\")\n  canvas.width = width + _padding * 2\n  canvas.height = height + _padding * 2\n\n  const ctx = canvas.getContext(\"2d\")\n  if (ctx === null) {\n    return null\n  }\n\n  ctx.imageSmoothingEnabled = false\n  ctx.drawImage(image, _padding, _padding, width, height)\n\n  return canvas.toDataURL()\n}\n\nexport function ipfsUrlDefault(cid: string, path = \"\"): string {\n  return `https://ipfs.io/ipfs/${cid}${path}`\n}\n\nconst IPFS_PROTOCOL_RE = /^ipfs:\\/\\/(?:ipfs\\/)?([^/]+)(\\/.+)?$/\nconst IPFS_HASH_RE = /^Qm[1-9A-HJ-NP-Za-km-z]{44}$/\n\nexport function ipfsUrlFromString(\n  ipfsString: string,\n  ipfsUrl: IpfsUrlFn\n): string {\n  // ipfs:// URI\n  const ipfsProtocolMatch = IPFS_PROTOCOL_RE.exec(ipfsString)\n  if (ipfsProtocolMatch) {\n    const [, cid, path = \"\"] = ipfsProtocolMatch\n    return ipfsUrl(cid, path)\n  }\n\n  // standalone cid, probably\n  if (IPFS_HASH_RE.test(ipfsString)) {\n    return ipfsUrl(ipfsString)\n  }\n\n  // maybe URL\n  return ipfsString\n}\n\nexport function normalizeOpenSeaUrl(url: string, tokenId: string): string {\n  // url can be anything so we need to try / catch to pass it to new URL()\n  try {\n    const _url = new URL(url)\n\n    // 0x%7Bid%7D\" = 0x{id} (url encoded)\n    if (\n      (_url.host !== \"api.opensea.io\" &&\n        _url.host !== \"testnets-api.opensea.io\") ||\n      !_url.pathname.includes(\"0x%7Bid%7D\")\n    ) {\n      return url\n    }\n\n    _url.pathname = _url.pathname.replace(/0x%7Bid%7D/g, tokenId)\n    _url.searchParams.set(\"format\", \"json\")\n\n    return String(_url)\n  } catch (err) {\n    return url\n  }\n}\n\nexport function normalizeNiftyGatewayUrl(url: string): string {\n  try {\n    const _url = new URL(url)\n\n    if (_url.host !== \"api.niftygateway.com\") {\n      return url\n    }\n\n    // Without final slash, the Nifty Gateway API server\n    // doesn’t set the CORS headers properly.\n    _url.pathname = _url.pathname + \"/\"\n    return String(_url)\n  } catch (err) {\n    return url\n  }\n}\n\nexport function normalizeTokenUrl(\n  url: string,\n  tokenId: string,\n  fetchContext: FetchContext\n): string {\n  url = normalizeOpenSeaUrl(url, tokenId)\n  url = normalizeNiftyGatewayUrl(url)\n  url = ipfsUrlFromString(url, fetchContext.ipfsUrl)\n\n  if (url.startsWith(\"http\")) {\n    url = fetchContext.jsonProxy(url)\n  }\n\n  return url\n}\n\nexport function normalizeImageUrl(\n  url: string,\n  fetchContext: FetchContext\n): string {\n  return ipfsUrlFromString(url, fetchContext.ipfsUrl)\n}\n\nexport function normalizeNftMetadata(\n  data: NftJsonMetadata,\n  fetchContext: FetchContext\n): NftJsonMetadata {\n  return {\n    ...data,\n    image: normalizeImageUrl(data.image, fetchContext),\n  }\n}\n\nexport function fixIncorrectImageField(\n  data: Record<string, unknown>\n): Record<string, unknown> {\n  if (!data || typeof data !== \"object\") {\n    return data\n  }\n\n  const _data = data as {\n    image: string\n    imageUrl: string\n  }\n\n  // makersplace.com is using `imageUrl` rather than `image`\n  if (\n    typeof _data?.image === \"undefined\" &&\n    typeof _data?.imageUrl === \"string\"\n  ) {\n    return { ..._data, image: _data?.imageUrl }\n  }\n\n  return data\n}\n\n// See NftMetadataMixedInJsonSchema for why this is needed.\nexport function isNftMetadataMixedInJsonSchema(\n  data: unknown\n): data is NftMetadataMixedInJsonSchema {\n  if (!data || typeof data !== \"object\") {\n    return false\n  }\n  const _data = data as NftMetadataMixedInJsonSchema\n  return (\n    _data.title === \"Asset Metadata\" &&\n    _data.type === \"object\" &&\n    typeof _data.properties?.name?.description === \"string\" &&\n    typeof _data.properties?.image?.description === \"string\" &&\n    typeof _data.properties?.description?.description === \"string\" &&\n    _data.properties?.name?.type === \"string\" &&\n    _data.properties?.image?.type === \"string\" &&\n    _data.properties?.description?.type === \"string\"\n  )\n}\n\nexport function fixNftMetadataMixedInJsonSchema(\n  data: NftMetadataMixedInJsonSchema\n): NftJsonMetadata {\n  return {\n    name: data.properties?.name?.description || \"\",\n    description: data.properties?.description?.description || \"\",\n    image: data.properties?.image?.description || \"\",\n    rawData: { ...data },\n  }\n}\n\nexport function isNftMetadata(data: unknown): data is NftMetadata {\n  if (!data || typeof data !== \"object\") {\n    return false\n  }\n  const _data = data as NftMetadata\n\n  // We don’t test for the exact type here, because some NFT minting services\n  // set some of the fields as null.\n  // We also only test for the presence of either `name` or `image`, as some\n  // NFT formats don’t declare them all (e.g. BAYC only declares `image`).\n  return \"name\" in _data || \"image\" in _data\n}\n\nexport function addressesEqual(addr1: Address, addr2: Address): boolean {\n  return addr1?.toLowerCase() === addr2?.toLowerCase()\n}\n\n// Promise.any() implementation from https://github.com/m0ppers/promise-any\nexport function promiseAny<T>(promises: Promise<T>[]): Promise<T> {\n  return reversePromise(\n    Promise.all([...promises].map(reversePromise))\n  ) as Promise<T>\n}\nexport function reversePromise(promise: Promise<unknown>): Promise<unknown> {\n  return new Promise((resolve, reject) => {\n    Promise.resolve(promise).then(reject, resolve)\n  })\n}\n\n// To replace with AggregateError when useNft() will target ES2021 environments\nexport class MultipleErrors extends Error {\n  errors: Error[]\n  constructor(message: string, errors: Error[]) {\n    super(message)\n    this.name = \"MultipleErrors\"\n    this.errors = errors\n  }\n}\n\nconst IMAGE_EXT_RE = /\\.(?:png|svg|jpg|jepg|gif|webp|jxl|avif)$/\nconst VIDEO_EXT_RE = /\\.(?:mp4|mov|webm|ogv)$/\n\n// Guess a file type from the extension used in a URL\nexport function urlExtensionType(url: string): NftMetadata[\"imageType\"] {\n  if (IMAGE_EXT_RE.test(url)) return \"image\"\n  if (VIDEO_EXT_RE.test(url)) return \"video\"\n  return \"unknown\"\n}\n","import type { Address, ContractMethod, NftMetadata } from \"../../types\"\n\nimport { CRYPTOPUNKS, CRYPTOPUNKS_IMAGES } from \"../../known-contracts\"\nimport { addressesEqual } from \"../../utils\"\n\nconst CRYPTOPUNKS_DESCRIPTION = `\n  10,000 unique collectible characters with proof of ownership stored on the\n  Ethereum blockchain. The project that inspired the modern CryptoArt movement.\n  The first \"Non-Fungible Token,\" and inspiration for the Ethereum ERC-721\n  standard that powers most digital art and collectibles.\n`\n\nconst CRYPTOPUNKS_IMAGE_SVG: ContractMethod = {\n  address: CRYPTOPUNKS_IMAGES,\n  methodName: \"punkImageSvg\",\n  methodHash: \"0x74beb047\",\n  humanReadableAbi: [\n    \"function punkImageSvg(uint16 index) view returns (string svg)\",\n  ],\n}\n\nfunction encodeUriData(dataUri: string): string {\n  const dataStart = dataUri.indexOf(\",\") + 1\n  return (\n    dataUri.slice(0, dataStart) +\n      encodeURIComponent(dataUri.slice(dataStart)) ?? \"\"\n  )\n}\n\nexport async function cryptoPunksMetadata(\n  index: string,\n  cryptoPunksImage: (tokenId: string, method: ContractMethod) => Promise<string>\n): Promise<NftMetadata> {\n  const image = await cryptoPunksImage(index, CRYPTOPUNKS_IMAGE_SVG)\n\n  return {\n    description: CRYPTOPUNKS_DESCRIPTION,\n    image: encodeUriData(image),\n    imageType: \"image\",\n    metadataUrl: \"\",\n    name: `CryptoPunk ${index}`,\n    owner: \"\",\n    rawData: null,\n  }\n}\n\nexport function isCryptoPunks(contractAddress: Address): boolean {\n  return addressesEqual(contractAddress, CRYPTOPUNKS)\n}\n","export const CRYPTOKITTIES = \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\"\nexport const CRYPTOPUNKS = \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\"\nexport const CRYPTOPUNKS_IMAGES = \"0x16F5A35647D6F03D5D3da7b35409D65ba03aF3B2\"\nexport const CRYPTOVOXELS = \"0x79986aF15539de2db9A5086382daEdA917A9CF0C\"\nexport const DECENTRALAND_ESTATE = \"0x959e104E1a4dB6317fA58F8295F586e1A978c297\"\nexport const DECENTRALAND_PARCEL = \"0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d\"\n","import type { Address, FetchContext, NftMetadata } from \"../../types\"\n\nimport { CRYPTOKITTIES } from \"../../known-contracts\"\nimport { addressesEqual } from \"../../utils\"\n\nexport async function cryptoKittiesMetadata(\n  id: string,\n  { jsonProxy }: FetchContext\n): Promise<NftMetadata> {\n  const metadataUrl = jsonProxy(`https://api.cryptokitties.co/v3/kitties/${id}`)\n  const res = await fetch(metadataUrl)\n  const data = (await res.json()) as {\n    name: string\n    bio: string\n    image_url: string\n  }\n  const image = data?.image_url ?? \"\"\n  return {\n    description: data?.bio ?? \"−\",\n    image,\n    imageType: image ? \"image\" : \"unknown\",\n    metadataUrl,\n    name: data?.name ?? \"Unknown\",\n    owner: \"\",\n    rawData: data,\n  }\n}\n\nexport function isCryptoKitties(contractAddress: Address): boolean {\n  return addressesEqual(contractAddress, CRYPTOKITTIES)\n}\n","import type { Address, NftMetadata } from \"../../types\"\n\nimport { DECENTRALAND_ESTATE } from \"../../known-contracts\"\nimport { addressesEqual } from \"../../utils\"\n\nconst ENDPOINT =\n  \"https://api.thegraph.com/subgraphs/name/decentraland/marketplace\"\n\nconst QUERY = `\n  query NFTByTokenId($contractAddress: String, $tokenId: String) {\n    nfts(\n      where: { contractAddress: $contractAddress, tokenId: $tokenId }\n      first: 1\n    ) {\n      name\n      image\n      owner {\n        address\n      }\n      estate {\n        size\n        data {\n          description\n        }\n      }\n    }\n  }\n`\n\nfunction body(contractAddress: string, tokenId: string) {\n  return JSON.stringify({\n    operationName: \"NFTByTokenId\",\n    variables: { contractAddress, tokenId },\n    query: QUERY,\n  })\n}\n\nexport async function decentralandEstateMetadata(\n  tokenId: string\n): Promise<NftMetadata> {\n  const response = await fetch(ENDPOINT, {\n    body: body(DECENTRALAND_ESTATE, tokenId),\n    method: \"POST\",\n  })\n\n  const { data } = (await response.json()) as {\n    data: {\n      nfts: [\n        {\n          name: string\n          image: string\n          owner: { address: Address }\n          estate: {\n            size: number\n            data: { description: string }\n          }\n        }\n      ]\n    }\n  }\n\n  const nft = data?.nfts?.[0]\n  const image = nft?.image ?? \"\"\n\n  return {\n    description: nft?.estate?.data?.description ?? \"−\",\n    image,\n    imageType: image ? \"image\" : \"unknown\",\n    metadataUrl: \"\",\n    name: nft?.name ?? \"Unknown\",\n    owner: nft?.owner?.address ?? \"\",\n    rawData: data,\n  }\n}\n\nexport function isDecentralandEstate(contractAddress: Address): boolean {\n  return addressesEqual(contractAddress, DECENTRALAND_ESTATE)\n}\n","import type { Address, NftMetadata } from \"../../types\"\n\nimport { DECENTRALAND_PARCEL } from \"../../known-contracts\"\nimport { addressesEqual } from \"../../utils\"\n\nconst ENDPOINT =\n  \"https://api.thegraph.com/subgraphs/name/decentraland/marketplace\"\n\nconst QUERY = `\n  query NFTByTokenId($contractAddress: String, $tokenId: String) {\n    nfts(\n      where: { contractAddress: $contractAddress, tokenId: $tokenId }\n      first: 1\n    ) {\n      name\n      image\n      owner {\n        address\n      }\n      parcel {\n        x\n        y\n        data {\n          description\n        }\n      }\n    }\n  }\n`\n\nfunction body(contractAddress: string, tokenId: string) {\n  return JSON.stringify({\n    operationName: \"NFTByTokenId\",\n    variables: { contractAddress, tokenId },\n    query: QUERY,\n  })\n}\n\nexport async function decentralandParcelMetadata(\n  tokenId: string\n): Promise<NftMetadata> {\n  const response = await fetch(ENDPOINT, {\n    body: body(DECENTRALAND_PARCEL, tokenId),\n    method: \"POST\",\n  })\n\n  const { data } = (await response.json()) as {\n    data: {\n      nfts: [\n        {\n          name: string\n          image: string\n          owner: { address: Address }\n          parcel: {\n            x: number\n            y: number\n            data: {\n              description: string\n            }\n          }\n        }\n      ]\n    }\n  }\n\n  const nft = data?.nfts?.[0]\n  const parcel = nft?.parcel\n  const image = nft?.image ?? \"\"\n\n  return {\n    description: parcel?.data?.description ?? \"-\",\n    image,\n    imageType: image ? \"image\" : \"unknown\",\n    metadataUrl: \"\",\n    name: nft?.name ?? `Parcel ${parcel?.x},${parcel?.y}`,\n    owner: nft?.owner?.address ?? \"\",\n    rawData: data,\n  }\n}\n\nexport function isDecentralandParcel(contractAddress: Address): boolean {\n  return addressesEqual(contractAddress, DECENTRALAND_PARCEL)\n}\n","import type {\n  Address,\n  ContractMethod,\n  FetchContext,\n  IpfsUrlFn,\n  NftMetadata,\n} from \"../../types\"\n\nimport {\n  addressesEqual,\n  fetchImage,\n  frameImage,\n  ipfsUrlFromString,\n} from \"../../utils\"\n\nconst MOONCATS_WRAPPED: ContractMethod = {\n  address: \"0x7c40c393dc0f283f318791d746d894ddd3693572\",\n  methodName: \"_tokenIDToCatID\",\n  methodHash: \"0xfe294644\",\n  humanReadableAbi: [\n    \"function _tokenIDToCatID(uint256 tokenId) view returns (bytes5 catId)\",\n  ],\n}\n\n// See https://www.reddit.com/r/MoonCatRescue/comments/m5d7mx/svg_imagery_of_all_rescued_mooncats/\nconst MOONCATS_IPFS_CID =\n  \"bafybeidk4zunuq56w2pf2sncexohlyqae62dzplljkbwswa7jwywh2dava\"\n\nexport async function imageUrl(\n  catId: string,\n  ipfsUrl: IpfsUrlFn\n): Promise<string | null> {\n  const dir = catId.slice(4, 6)\n  const url = ipfsUrlFromString(\n    `ipfs://ipfs/${MOONCATS_IPFS_CID}/${dir}/${catId}.png`,\n    ipfsUrl\n  )\n  const image = await fetchImage(url)\n\n  // Here we increase the resolution of the MoonCats PNG files (4x without\n  // antialias) and add a some padding around it. Doing this image manipulation\n  // rather than using CSS is needed because useNft() only deals with data and\n  // doesn’t have any control over how the images get displayed.\n  return frameImage(image, { scale: 4, padding: 0.125 })\n}\n\nexport async function moonCatsMetadata(\n  tokenId: string,\n  getCatId: (tokenId: string, method: ContractMethod) => Promise<string>,\n  fetchContext: FetchContext\n): Promise<NftMetadata> {\n  const catId = await getCatId(tokenId, MOONCATS_WRAPPED)\n\n  const image = (await imageUrl(catId, fetchContext.ipfsUrl)) ?? \"\"\n  return {\n    description:\n      `The (unofficial) wrapped version of MoonCats Rescue. ` +\n      `Original cat ID: ${catId}.`,\n    image,\n    imageType: image ? \"image\" : \"unknown\",\n    metadataUrl: \"\",\n    name: `Wrapped MoonCat #${tokenId}`,\n    owner: \"\",\n    rawData: null,\n  }\n}\n\nexport function isMoonCats(contractAddress: Address): boolean {\n  return addressesEqual(contractAddress, MOONCATS_WRAPPED.address)\n}\n","import type { FetchContext, NftJsonMetadata } from \"../../types\"\n\nimport {\n  fixIncorrectImageField,\n  fixNftMetadataMixedInJsonSchema,\n  isNftMetadata,\n  isNftMetadataMixedInJsonSchema,\n  normalizeNftMetadata,\n} from \"../../utils\"\n\nexport async function fetchMetadata(\n  url: string,\n  fetchContext: FetchContext\n): Promise<NftJsonMetadata> {\n  const res = await fetch(url)\n\n  if (!res.ok) {\n    throw new Error(\"Error when trying to request \" + url)\n  }\n\n  let rawData\n\n  try {\n    rawData = (await res.json()) as Record<string, unknown>\n  } catch (err) {\n    // If it can’t be parsed as JSON, it must be an image URL\n    rawData = { name: \"\", description: \"\", image: url }\n  }\n\n  let data = { ...rawData }\n\n  if (isNftMetadataMixedInJsonSchema(data)) {\n    data = fixNftMetadataMixedInJsonSchema(data)\n  }\n\n  data = fixIncorrectImageField(data)\n\n  if (!isNftMetadata(data)) {\n    throw new Error(\"Invalid data received\")\n  }\n\n  return normalizeNftMetadata(\n    {\n      description: data.description || \"\",\n      image: data.image || \"\",\n      name: data.name || \"\",\n      rawData,\n    },\n    fetchContext\n  )\n}\n","import type { Contract, ContractFunction } from \"@ethersproject/contracts\"\nimport type { Address, FetchContext, NftMetadata } from \"../../types\"\nimport type { EthersFetcherConfigEthersLoaded } from \"./types\"\n\nimport { fetchMetadata } from \"../shared/fetch-metadata\"\nimport {\n  MultipleErrors,\n  normalizeTokenUrl,\n  promiseAny,\n  urlExtensionType,\n} from \"../../utils\"\n\nconst ABI = [\n  // ERC-721\n  \"function tokenURI(uint256 _tokenId) external view returns (string)\",\n  \"function ownerOf(uint256 _tokenId) external view returns (address)\",\n  // ERC-1155\n  \"function uri(uint256 _id) external view returns (string)\",\n]\n\ntype NftContract = InstanceType<typeof Contract> & {\n  ownerOf: ContractFunction<string>\n  tokenURI: ContractFunction<string>\n  uri: ContractFunction<string>\n}\n\nasync function url(\n  contract: NftContract,\n  tokenId: string,\n  fetchContext: FetchContext\n): Promise<string> {\n  const uri = await promiseAny([\n    contract.tokenURI(tokenId),\n    contract.uri(tokenId),\n  ]).catch((errors) => {\n    throw new MultipleErrors(\n      \"An error occurred while trying to fetch the token URI from the NFT\" +\n        \" contract. See the “errors” property on this error for details.\",\n      errors\n    )\n  })\n  return normalizeTokenUrl(uri, tokenId, fetchContext)\n}\n\nexport async function fetchStandardNftContractData(\n  contractAddress: Address,\n  tokenId: string,\n  config: EthersFetcherConfigEthersLoaded,\n  fetchContext: FetchContext\n): Promise<NftMetadata> {\n  const contract = new config.ethers.Contract(\n    contractAddress,\n    ABI,\n    config.provider\n  ) as NftContract\n\n  const [metadataUrl, owner] = await Promise.all([\n    url(contract, tokenId, fetchContext),\n    contract.ownerOf(tokenId).catch(() => \"\"),\n  ])\n\n  const metadata = await fetchMetadata(metadataUrl, fetchContext)\n  const imageType = urlExtensionType(metadata.image)\n\n  return {\n    ...metadata,\n    imageType,\n    metadataUrl,\n    owner,\n  }\n}\n","import type {\n  Address,\n  FetchContext,\n  ImageProxyFn,\n  NftMetadata,\n} from \"../../types\"\nimport type {\n  EthersFetcher,\n  EthersFetcherConfig,\n  EthersFetcherConfigEthersLoaded,\n} from \"./types\"\n\nimport { isAddress } from \"../../utils\"\nimport { cryptoPunksMetadata, isCryptoPunks } from \"../shared/cryptopunks\"\nimport { cryptoKittiesMetadata, isCryptoKitties } from \"../shared/cryptokitties\"\nimport {\n  decentralandEstateMetadata,\n  isDecentralandEstate,\n} from \"../shared/decentraland-estate\"\nimport {\n  decentralandParcelMetadata,\n  isDecentralandParcel,\n} from \"../shared/decentraland-parcel\"\nimport { isMoonCats, moonCatsMetadata } from \"../shared/mooncats\"\nimport { cryptoPunksImage } from \"./cryptopunks\"\nimport { moonCatsCatId } from \"./mooncats\"\nimport { fetchStandardNftContractData } from \"./standard-nft\"\n\nconst ETHERS_NOT_FOUND =\n  \"Ethers couldn’t be imported. \" +\n  \"Please add the ethers module to your project dependencies, \" +\n  \"or inject it in the Ethers fetcher options.\"\n\nasync function loadEthers(\n  config: EthersFetcherConfig\n): Promise<EthersFetcherConfigEthersLoaded> {\n  if (config.ethers?.Contract) {\n    return config as EthersFetcherConfigEthersLoaded\n  }\n\n  try {\n    const ethers = await import(\"@ethersproject/contracts\")\n    if (!ethers?.Contract) {\n      throw new Error()\n    }\n    return { ...config, ethers }\n  } catch (err) {\n    throw new Error(ETHERS_NOT_FOUND)\n  }\n}\n\nasync function fetchNftMetadata(\n  contractAddress: Address,\n  tokenId: string,\n  config: EthersFetcherConfig,\n  fetchContext: FetchContext\n): Promise<NftMetadata> {\n  if (isDecentralandParcel(contractAddress)) {\n    return decentralandParcelMetadata(tokenId)\n  }\n\n  if (isDecentralandEstate(contractAddress)) {\n    return decentralandEstateMetadata(tokenId)\n  }\n\n  if (isCryptoKitties(contractAddress)) {\n    return cryptoKittiesMetadata(tokenId, fetchContext)\n  }\n\n  const configWithEthersLoaded = await loadEthers(config)\n\n  if (isCryptoPunks(contractAddress)) {\n    return cryptoPunksMetadata(\n      tokenId,\n      cryptoPunksImage(configWithEthersLoaded)\n    )\n  }\n\n  if (isMoonCats(contractAddress)) {\n    return moonCatsMetadata(\n      tokenId,\n      moonCatsCatId(configWithEthersLoaded),\n      fetchContext\n    )\n  }\n\n  return fetchStandardNftContractData(\n    contractAddress,\n    tokenId,\n    configWithEthersLoaded,\n    fetchContext\n  )\n}\n\nfunction addProxyImage(\n  metadata: NftMetadata,\n  imageProxy: ImageProxyFn\n): NftMetadata {\n  return metadata.image.startsWith(\"http\")\n    ? { ...metadata, image: imageProxy(metadata.image, metadata) }\n    : metadata\n}\n\nexport default function ethersFetcher(\n  config: EthersFetcherConfig\n): EthersFetcher {\n  return {\n    config,\n    async fetchNft(\n      contractAddress: Address,\n      tokenId: string,\n      fetchContext: FetchContext\n    ): Promise<NftMetadata> {\n      if (!isAddress(contractAddress)) {\n        throw new Error(`Invalid contract address: ${contractAddress}`)\n      }\n      const metadata = await fetchNftMetadata(\n        contractAddress,\n        tokenId,\n        config,\n        fetchContext\n      )\n      return addProxyImage(metadata, fetchContext.imageProxy)\n    },\n  }\n}\n","import type { Contract, ContractFunction } from \"@ethersproject/contracts\"\nimport type { ContractMethod } from \"../../types\"\nimport type { EthersFetcherConfigEthersLoaded } from \"./types\"\n\nexport function cryptoPunksImage(config: EthersFetcherConfigEthersLoaded) {\n  return async function cryptoPunksImage(\n    index: string,\n    method: ContractMethod\n  ): Promise<string> {\n    const contract = new config.ethers.Contract(\n      method.address,\n      method.humanReadableAbi,\n      config.provider\n    ) as InstanceType<typeof Contract> & {\n      punkImageSvg: ContractFunction<string>\n    }\n    return contract.punkImageSvg(index)\n  }\n}\n","import type { Contract, ContractFunction } from \"@ethersproject/contracts\"\nimport type { ContractMethod } from \"../../types\"\nimport type { EthersFetcherConfigEthersLoaded } from \"./types\"\n\nexport function moonCatsCatId(config: EthersFetcherConfigEthersLoaded) {\n  return async function moonCatsCatId(\n    tokenId: string,\n    method: ContractMethod\n  ): Promise<string> {\n    const wrappedContract = new config.ethers.Contract(\n      method.address,\n      method.humanReadableAbi,\n      config.provider\n    ) as InstanceType<typeof Contract> & {\n      _tokenIDToCatID: ContractFunction<string>\n    }\n    const result = await wrappedContract._tokenIDToCatID(tokenId)\n    return result ?? \"\"\n  }\n}\n","import type { Address } from \"../../types\"\nimport type { EthereumProviderEip1193 } from \"./types\"\n\n// Pre encoded method names to avoid embedding a keccak256 library.\n// See https://docs.soliditylang.org/en/v0.5.3/abi-spec.html#function-selector-and-argument-encoding\nconst URI_METHOD_ERC721 = \"0xc87b56dd\" // tokenURI(uint256)\nconst URI_METHOD_ERC1155 = \"0x0e89341c\" // uri(uint256)\nconst OWNER_OF_METHOD_ERC721 = \"0x6352211e\" // ownerOf(uint256)\n\n// Utilities adapted from https://github.com/Zoltu/ethereum-abi-encoder/\nexport function uint256Hex(value: bigint): string {\n  let result = \"\"\n  for (let i = 0; i < 32; ++i) {\n    result += (\n      \"0\" + ((value >> BigInt(8 * 32 - i * 8 - 8)) & BigInt(255)).toString(16)\n    ).slice(-2)\n  }\n  return result\n}\n\nexport function bytesToBigInt(bytes: Uint8Array): bigint {\n  let value = BigInt(0)\n  for (const byte of bytes) {\n    value = (value << BigInt(8)) + BigInt(byte)\n  }\n  return value\n}\n\nexport function hexToUint8Array(hex: string): Uint8Array {\n  hex = hex.replace(/^0x/, \"\")\n  return new Uint8Array(\n    (hex.match(/.{1,2}/g) ?? []).map((byte) => parseInt(byte, 16))\n  )\n}\n\nexport function decodeString(hex: string): string {\n  const data = hexToUint8Array(hex)\n  const pointer = Number(bytesToBigInt(data.subarray(0, 32)))\n  const length = Number(bytesToBigInt(data.subarray(pointer, pointer + 32)))\n  const bytes = data.subarray(pointer + 32, pointer + 32 + length)\n  return new TextDecoder().decode(bytes)\n}\n\nexport function decodeAddress(hex: string): string {\n  const data = hexToUint8Array(hex)\n  const bytes = data.subarray(0, 32)\n  const decoded = bytesToBigInt(bytes)\n  if (decoded >= BigInt(2) ** BigInt(160))\n    throw new Error(\n      `Encoded value is bigger than the largest possible address.  Decoded value: 0x${decoded.toString(\n        16\n      )}.`\n    )\n  return `0x${decoded.toString(16)}`\n}\n\nexport function methodUriErc721(tokenId: bigint): string {\n  return URI_METHOD_ERC721 + uint256Hex(tokenId)\n}\n\nexport function methodUriErc1155(id: bigint): string {\n  return URI_METHOD_ERC1155 + uint256Hex(id)\n}\n\nexport function methodOwnerOfErc721(tokenId: bigint): string {\n  return OWNER_OF_METHOD_ERC721 + uint256Hex(tokenId)\n}\n\nexport function ethCall(\n  ethereum: EthereumProviderEip1193,\n  to: Address,\n  data: string\n): Promise<string> {\n  return ethereum.request({\n    method: \"eth_call\",\n    params: [{ data, to }, \"latest\"],\n  }) as Promise<string>\n}\n","import type { Address, FetchContext, NftMetadata } from \"../../types\"\nimport type { EthereumFetcherConfig, EthereumProviderEip1193 } from \"./types\"\n\nimport { fetchMetadata } from \"../shared/fetch-metadata\"\nimport {\n  MultipleErrors,\n  normalizeTokenUrl,\n  promiseAny,\n  urlExtensionType,\n} from \"../../utils\"\nimport {\n  decodeAddress,\n  decodeString,\n  ethCall,\n  methodOwnerOfErc721,\n  methodUriErc1155,\n  methodUriErc721,\n} from \"./utils\"\n\nfunction uriMethods(tokenId: string): string[] {\n  return [methodUriErc721(BigInt(tokenId)), methodUriErc1155(BigInt(tokenId))]\n}\n\nasync function url(\n  contractAddress: Address,\n  tokenId: string,\n  ethereum: EthereumProviderEip1193,\n  fetchContext: FetchContext\n): Promise<string> {\n  const uri = await promiseAny(\n    uriMethods(tokenId).map((method) =>\n      ethCall(ethereum, contractAddress, method)\n    )\n  ).catch((errors) => {\n    throw new MultipleErrors(\n      \"An error occurred while trying to fetch the token URI from the NFT\" +\n        \" contract. See the “errors” property on this error for details.\",\n      errors\n    )\n  })\n  return normalizeTokenUrl(decodeString(uri), tokenId, fetchContext)\n}\n\nexport async function fetchStandardNftContractData(\n  contractAddress: Address,\n  tokenId: string,\n  { ethereum }: EthereumFetcherConfig,\n  fetchContext: FetchContext\n): Promise<NftMetadata> {\n  const [metadataUrl, owner] = await Promise.all([\n    url(contractAddress, tokenId, ethereum, fetchContext),\n    ethCall(ethereum, contractAddress, methodOwnerOfErc721(BigInt(tokenId)))\n      .then(decodeAddress)\n      .catch(() => \"\"),\n  ])\n\n  const metadata = await fetchMetadata(metadataUrl, fetchContext)\n  const imageType = urlExtensionType(metadata.image)\n\n  return {\n    ...metadata,\n    imageType,\n    metadataUrl,\n    owner,\n  }\n}\n","import type {\n  Address,\n  FetchContext,\n  ImageProxyFn,\n  NftMetadata,\n} from \"../../types\"\nimport type {\n  EthereumFetcher,\n  EthereumFetcherConfig,\n  EthereumFetcherConfigDeclaration,\n} from \"./types\"\n\nimport { isAddress } from \"../../utils\"\nimport { cryptoPunksMetadata, isCryptoPunks } from \"../shared/cryptopunks\"\nimport { cryptoKittiesMetadata, isCryptoKitties } from \"../shared/cryptokitties\"\nimport {\n  decentralandEstateMetadata,\n  isDecentralandEstate,\n} from \"../shared/decentraland-estate\"\nimport {\n  decentralandParcelMetadata,\n  isDecentralandParcel,\n} from \"../shared/decentraland-parcel\"\nimport { isMoonCats, moonCatsMetadata } from \"../shared/mooncats\"\nimport { cryptoPunksImage } from \"./cryptopunks\"\nimport { moonCatsCatId } from \"./mooncats\"\nimport { fetchStandardNftContractData } from \"./standard-nft\"\n\nasync function fetchNftMetadata(\n  contractAddress: Address,\n  tokenId: string,\n  config: EthereumFetcherConfig,\n  fetchContext: FetchContext\n): Promise<NftMetadata> {\n  if (isDecentralandParcel(contractAddress)) {\n    return decentralandParcelMetadata(tokenId)\n  }\n\n  if (isDecentralandEstate(contractAddress)) {\n    return decentralandEstateMetadata(tokenId)\n  }\n\n  if (isCryptoKitties(contractAddress)) {\n    return cryptoKittiesMetadata(tokenId, fetchContext)\n  }\n\n  if (isCryptoPunks(contractAddress)) {\n    return cryptoPunksMetadata(tokenId, cryptoPunksImage(config))\n  }\n\n  if (isMoonCats(contractAddress)) {\n    return moonCatsMetadata(tokenId, moonCatsCatId(config), fetchContext)\n  }\n\n  return fetchStandardNftContractData(\n    contractAddress,\n    tokenId,\n    config,\n    fetchContext\n  )\n}\n\nfunction addProxyImage(\n  metadata: NftMetadata,\n  imageProxy: ImageProxyFn\n): NftMetadata {\n  return metadata.image.startsWith(\"http\")\n    ? { ...metadata, image: imageProxy(metadata.image, metadata) }\n    : metadata\n}\n\nfunction normalizeConfig(\n  config: EthereumFetcherConfigDeclaration\n): EthereumFetcherConfig {\n  if (!config.ethereum) {\n    if (window.ethereum) {\n      config.ethereum = window.ethereum\n    } else {\n      throw new Error(\"Missing ethereum provider.\")\n    }\n  }\n  return config as EthereumFetcherConfig\n}\n\nexport default function ethereumFetcher(\n  config: EthereumFetcherConfigDeclaration\n): EthereumFetcher {\n  const _config = normalizeConfig(config)\n  return {\n    config: _config,\n    async fetchNft(\n      contractAddress: Address,\n      tokenId: string,\n      fetchContext: FetchContext\n    ): Promise<NftMetadata> {\n      if (!isAddress(contractAddress)) {\n        throw new Error(`Invalid contract address: ${contractAddress}`)\n      }\n      const metadata = await fetchNftMetadata(\n        contractAddress,\n        tokenId,\n        _config,\n        fetchContext\n      )\n      return addProxyImage(metadata, fetchContext.imageProxy)\n    },\n  }\n}\n","import type { ContractMethod } from \"../../types\"\nimport type { EthereumFetcherConfig } from \"./types\"\n\nimport { decodeString, ethCall, uint256Hex } from \"./utils\"\n\nexport function cryptoPunksImage(config: EthereumFetcherConfig) {\n  return async function cryptoPunksImage(\n    index: string,\n    method: ContractMethod\n  ): Promise<string> {\n    if (config.ethereum === undefined) {\n      throw new Error(\"No Ethereum provider\")\n    }\n    return ethCall(\n      config.ethereum,\n      method.address,\n      method.methodHash + uint256Hex(BigInt(index))\n    ).then(decodeString)\n  }\n}\n","import type { ContractMethod } from \"../../types\"\nimport type { EthereumFetcherConfig } from \"./types\"\n\nimport { ethCall, uint256Hex } from \"./utils\"\n\nexport function moonCatsCatId(config: EthereumFetcherConfig) {\n  return async function moonCatsCatId(\n    tokenId: string,\n    method: ContractMethod\n  ): Promise<string> {\n    if (config.ethereum === undefined) {\n      throw new Error(\"No Ethereum provider\")\n    }\n    const result = await ethCall(\n      config.ethereum,\n      method.address,\n      method.methodHash + uint256Hex(BigInt(tokenId))\n    )\n    return result.slice(0, 12) // 12 = 0x prefix + 5 bytes\n  }\n}\n","import type { FC, ReactNode } from \"react\"\nimport type {\n  Address,\n  FetchContext,\n  Fetcher,\n  FetcherDeclaration,\n  FetcherDeclarationEthereum,\n  FetcherDeclarationEthers,\n  FetcherProp,\n  ImageProxyFn,\n  IpfsUrlFn,\n  JsonProxyFn,\n  NftMetadata,\n  NftResult,\n  NftResultDone,\n  NftResultError,\n  NftResultLoading,\n} from \"./types\"\nimport type { EthersFetcherConfig } from \"./fetchers/ethers/types\"\nimport type { EthereumFetcherConfigDeclaration } from \"./fetchers/ethereum/types\"\n\nimport React, { createContext, useCallback, useContext, useMemo } from \"react\"\nimport useSWR, { SWRConfig, useSWRConfig } from \"swr\"\nimport ethersFetcher from \"./fetchers/ethers\"\nimport ethereumFetcher from \"./fetchers/ethereum\"\nimport { identity, ipfsUrlDefault } from \"./utils\"\n\nconst NFT_METADATA_DEFAULT = {\n  name: \"\",\n  description: \"\",\n  image: \"\",\n} as NftMetadata\n\nfunction isFetcherDeclarationEthers(\n  fetcher: FetcherProp\n): fetcher is FetcherDeclarationEthers {\n  return (\n    Array.isArray(fetcher) && fetcher.length == 2 && fetcher[0] === \"ethers\"\n  )\n}\n\nfunction isFetcherDeclarationEthereum(\n  fetcher: FetcherProp\n): fetcher is FetcherDeclarationEthereum {\n  return (\n    Array.isArray(fetcher) && fetcher.length == 2 && fetcher[0] === \"ethereum\"\n  )\n}\n\nfunction normalizeFetcher(fetcher: FetcherProp): Fetcher<unknown> {\n  // ethers\n  if (isFetcherDeclarationEthers(fetcher)) {\n    return ethersFetcher(fetcher[1]) as Fetcher<EthersFetcherConfig>\n  }\n\n  // ethereum\n  if (isFetcherDeclarationEthereum(fetcher)) {\n    return ethereumFetcher(\n      fetcher[1]\n    ) as Fetcher<EthereumFetcherConfigDeclaration>\n  }\n\n  // custom fetcher (or wrong value)\n  return fetcher\n}\n\nconst NftContext = createContext<{\n  fetcher: Fetcher<unknown> | null\n  imageProxy: ImageProxyFn\n  ipfsUrl: IpfsUrlFn\n  jsonProxy: JsonProxyFn\n} | null>(null)\n\nconst NftProvider: FC<{\n  children: ReactNode\n  fetcher: Fetcher<unknown> | FetcherDeclaration\n  imageProxy?: ImageProxyFn\n  ipfsUrl?: IpfsUrlFn\n  jsonProxy?: JsonProxyFn\n}> = function NftProvider({\n  children,\n  fetcher,\n  imageProxy = identity,\n  ipfsUrl = ipfsUrlDefault,\n  jsonProxy = identity,\n}) {\n  if (!fetcher) {\n    throw new Error(\"Please set the fetcher prop on <NftProvider />\")\n  }\n\n  const context = {\n    fetcher: normalizeFetcher(fetcher),\n    imageProxy,\n    ipfsUrl,\n    jsonProxy,\n  }\n\n  return (\n    <SWRConfig value={{ provider: () => new Map() }}>\n      <NftContext.Provider value={context}>{children}</NftContext.Provider>\n    </SWRConfig>\n  )\n}\n\nfunction useNft(contractAddress: Address, tokenId: string): NftResult {\n  const context = useContext(NftContext)\n  if (context === null) {\n    throw new Error(\"Please wrap your app with <NftProvider />\")\n  }\n\n  const { fetcher, imageProxy, ipfsUrl, jsonProxy } = context\n  const fetchContext = useMemo<FetchContext>(\n    () => ({ imageProxy, ipfsUrl, jsonProxy }),\n    [imageProxy, ipfsUrl, jsonProxy]\n  )\n\n  const fetchNft = useCallback(() => {\n    return fetcher\n      ? fetcher.fetchNft(contractAddress, tokenId, fetchContext)\n      : { ...NFT_METADATA_DEFAULT }\n  }, [contractAddress, fetcher, fetchContext, tokenId])\n\n  const { cache } = useSWRConfig()\n  const cached = (cache.get(contractAddress + tokenId) ?? false) as boolean\n\n  const result = useSWR<NftMetadata, Error>(\n    contractAddress + tokenId,\n    fetchNft,\n    {\n      revalidateOnMount: !cached,\n      revalidateOnFocus: false,\n      revalidateOnReconnect: false,\n    }\n  )\n\n  return useMemo(() => {\n    const { error, data, mutate } = result\n\n    const reload = () =>\n      mutate()\n        .then(() => true)\n        .catch(() => false)\n\n    if (error === undefined && data === undefined) {\n      return {\n        error: undefined,\n        loading: true,\n        nft: undefined,\n        reload,\n        status: \"loading\",\n      } as NftResultLoading\n    }\n\n    if (error !== undefined) {\n      return {\n        error,\n        loading: false,\n        nft: undefined,\n        reload,\n        status: \"error\",\n      } as NftResultError\n    }\n\n    return {\n      error: undefined,\n      loading: false,\n      nft: data as NftMetadata,\n      reload,\n      status: \"done\",\n    } as NftResultDone\n  }, [result])\n}\n\nexport { useNft, NftProvider }\n","import type {\n  Address,\n  FetchContext,\n  Fetcher,\n  FetcherDeclaration,\n  FetcherDeclarationEthereum,\n  FetcherDeclarationEthers,\n  FetcherProp,\n  ImageProxyFn,\n  IpfsUrlFn,\n  JsonProxyFn,\n  NftMetadata,\n} from \"./types\"\nimport type { EthersFetcherConfig } from \"./fetchers/ethers/types\"\nimport type { EthereumFetcherConfig } from \"./fetchers/ethereum/types\"\n\nimport { identity, ipfsUrlDefault } from \"./utils\"\nimport ethersFetcher from \"./fetchers/ethers\"\nimport ethereumFetcher from \"./fetchers/ethereum\"\n\ntype FetchWrapperOptions = {\n  imageProxy?: ImageProxyFn\n  ipfsUrl?: IpfsUrlFn\n  jsonProxy?: JsonProxyFn\n}\n\nconst NFT_METADATA_DEFAULT = {\n  name: \"\",\n  description: \"\",\n  image: \"\",\n} as NftMetadata\n\nexport class FetchWrapper {\n  private fetcher: Fetcher<unknown>\n  private fetchContext: FetchContext\n\n  constructor(\n    fetcher: Fetcher<unknown> | FetcherDeclaration,\n    options: FetchWrapperOptions = {}\n  ) {\n    this.fetcher = this.normalizeFetcher(fetcher)\n    this.fetchContext = this.fetchContextFromOptions(options)\n  }\n\n  private fetchContextFromOptions({\n    imageProxy,\n    ipfsUrl,\n    jsonProxy,\n  }: FetchWrapperOptions): FetchContext {\n    return {\n      imageProxy: imageProxy ?? identity,\n      ipfsUrl: ipfsUrl ?? ipfsUrlDefault,\n      jsonProxy: jsonProxy ?? identity,\n    }\n  }\n\n  private normalizeFetcher(fetcher: FetcherProp): Fetcher<unknown> {\n    // default fetcher\n    if (!fetcher) {\n      return {\n        config: {},\n        fetchNft: () => Promise.resolve(NFT_METADATA_DEFAULT),\n      } as Fetcher<Record<string, never>>\n    }\n\n    // ethers\n    if (this.isFetcherDeclarationEthers(fetcher)) {\n      return ethersFetcher(fetcher[1]) as Fetcher<EthersFetcherConfig>\n    }\n\n    // ethereum\n    if (this.isFetcherDeclarationEthereum(fetcher)) {\n      return ethereumFetcher(fetcher[1]) as Fetcher<EthereumFetcherConfig>\n    }\n\n    // custom fetcher (or wrong value)\n    return fetcher\n  }\n\n  private isFetcherDeclarationEthers(\n    fetcher: FetcherProp\n  ): fetcher is FetcherDeclarationEthers {\n    return (\n      Array.isArray(fetcher) && fetcher.length == 2 && fetcher[0] === \"ethers\"\n    )\n  }\n\n  private isFetcherDeclarationEthereum(\n    fetcher: FetcherProp\n  ): fetcher is FetcherDeclarationEthereum {\n    return (\n      Array.isArray(fetcher) && fetcher.length == 2 && fetcher[0] === \"ethereum\"\n    )\n  }\n\n  public async fetchNft(\n    contractAddress: Address,\n    tokenId: string\n  ): Promise<NftMetadata> {\n    return await this.fetcher.fetchNft(\n      contractAddress,\n      tokenId,\n      this.fetchContext\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}