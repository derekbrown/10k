{"ast":null,"code":"import { useRef } from 'react';\nimport { equal } from '@wry/equality';\nexport function useDeepMemo(memoFn, key) {\n  var ref = useRef();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n\n  return ref.current.value;\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,KAAT,QAAsB,eAAtB;AASA,OAAM,SAAUC,WAAV,CACJC,MADI,EAEJC,GAFI,EAEK;AAET,MAAMC,GAAG,GAAGL,MAAM,EAAlB;;AAEA,MAAI,CAACK,GAAG,CAACC,OAAL,IAAgB,CAACL,KAAK,CAACG,GAAD,EAAMC,GAAG,CAACC,OAAJ,CAAYF,GAAlB,CAA1B,EAAkD;AAChDC,OAAG,CAACC,OAAJ,GAAc;AAAEF,SAAG,KAAL;AAAOG,WAAK,EAAEJ,MAAM;AAApB,KAAd;AACD;;AAED,SAAOE,GAAG,CAACC,OAAJ,CAAYC,KAAnB;AACD","names":["useRef","equal","useDeepMemo","memoFn","key","ref","current","value"],"sourceRoot":"","sources":["../../../../src/react/hooks/utils/useDeepMemo.ts"],"sourcesContent":["import { useRef } from 'react';\nimport { equal } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n"]},"metadata":{},"sourceType":"module"}