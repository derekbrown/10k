{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useNFTIndexer = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst react_1 = require(\"react\");\n\nconst NFTFetchContext_1 = require(\"../context/NFTFetchContext\");\n\nconst swr_1 = tslib_1.__importDefault(require(\"swr\"));\n\nconst ZoraIndexerTransformers_1 = require(\"../fetcher/ZoraIndexerTransformers\");\n\nconst ErrorUtils_1 = require(\"../fetcher/ErrorUtils\");\n/**\n * Fetches on-chain NFT data and pricing for the given NFT id and contract address\n *\n * @param contractAddress address of the contract, if null and tokenID is passed in, a ZNFT is assumed\n * @param tokenId id of NFT to fetch blockchain information for\n * @param options SWR flags and an option to load currency info\n * @returns useNFTType hook results include loading, error, and chainNFT data.\n */\n\n\nfunction useNFTIndexer(contractAddress, tokenId) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _a, _b;\n\n  const fetcher = react_1.useContext(NFTFetchContext_1.NFTFetchContext);\n  const {\n    refreshInterval,\n    initialData,\n    loadCurrencyInfo = true\n  } = options || {};\n  const nftData = swr_1.default(contractAddress && tokenId ? ['loadIndexerNFT', contractAddress, tokenId] : null, (_, contractAddress, tokenId) => fetcher.loadZoraNFTIndexerNFTUntransformed(contractAddress, tokenId), {\n    dedupingInterval: 0,\n    initialData: initialData === null || initialData === void 0 ? void 0 : initialData.tokenData,\n    onErrorRetry: ErrorUtils_1.onErrorRetry\n  }); // TODO(iain): Integrate auction data from zora indexer into hook\n\n  const auctionData = swr_1.default(contractAddress && tokenId ? ['loadAuctionForNFT', contractAddress, tokenId] : null, (_, contractAddress, tokenId) => fetcher.loadAuctionInfo(contractAddress, tokenId), {\n    refreshInterval,\n    initialData: initialData === null || initialData === void 0 ? void 0 : initialData.auctionData,\n    onErrorRetry: ErrorUtils_1.onErrorRetry\n  });\n  const currencyData = swr_1.default(nftData && nftData.data && loadCurrencyInfo ? ['loadCurrencies', (_a = auctionData.data) === null || _a === void 0 ? void 0 : _a.auctionCurrency.id] : null, function (_) {\n    for (var _len = arguments.length, currencies = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      currencies[_key - 1] = arguments[_key];\n    }\n\n    return fetcher.loadCurrencies(currencies);\n  }, {\n    refreshInterval,\n    dedupingInterval: 0\n  });\n  let data = undefined;\n\n  if (nftData.data !== undefined) {\n    data = ZoraIndexerTransformers_1.transformNFTIndexerResponse(nftData.data, auctionData.data, currencyData.data);\n  } else {\n    data = initialData;\n  }\n\n  return {\n    currencyLoaded: !!currencyData.data,\n    error: (_b = nftData.error) === null || _b === void 0 ? void 0 : _b.toString(),\n    data\n  };\n}\n\nexports.useNFTIndexer = useNFTIndexer;","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/@zoralabs/nft-hooks/dist/hooks/useNFTIndexer.js"],"names":["Object","defineProperty","exports","value","useNFTIndexer","tslib_1","require","react_1","NFTFetchContext_1","swr_1","__importDefault","ZoraIndexerTransformers_1","ErrorUtils_1","contractAddress","tokenId","options","_a","_b","fetcher","useContext","NFTFetchContext","refreshInterval","initialData","loadCurrencyInfo","nftData","default","_","loadZoraNFTIndexerNFTUntransformed","dedupingInterval","tokenData","onErrorRetry","auctionData","loadAuctionInfo","currencyData","data","auctionCurrency","id","currencies","loadCurrencies","undefined","transformNFTIndexerResponse","currencyLoaded","error","toString"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useNFTIndexer = void 0;\nconst tslib_1 = require(\"tslib\");\nconst react_1 = require(\"react\");\nconst NFTFetchContext_1 = require(\"../context/NFTFetchContext\");\nconst swr_1 = tslib_1.__importDefault(require(\"swr\"));\nconst ZoraIndexerTransformers_1 = require(\"../fetcher/ZoraIndexerTransformers\");\nconst ErrorUtils_1 = require(\"../fetcher/ErrorUtils\");\n/**\n * Fetches on-chain NFT data and pricing for the given NFT id and contract address\n *\n * @param contractAddress address of the contract, if null and tokenID is passed in, a ZNFT is assumed\n * @param tokenId id of NFT to fetch blockchain information for\n * @param options SWR flags and an option to load currency info\n * @returns useNFTType hook results include loading, error, and chainNFT data.\n */\nfunction useNFTIndexer(contractAddress, tokenId, options = {}) {\n    var _a, _b;\n    const fetcher = react_1.useContext(NFTFetchContext_1.NFTFetchContext);\n    const { refreshInterval, initialData, loadCurrencyInfo = true } = options || {};\n    const nftData = swr_1.default(contractAddress && tokenId\n        ? ['loadIndexerNFT', contractAddress, tokenId]\n        : null, (_, contractAddress, tokenId) => fetcher.loadZoraNFTIndexerNFTUntransformed(contractAddress, tokenId), { dedupingInterval: 0, initialData: initialData === null || initialData === void 0 ? void 0 : initialData.tokenData, onErrorRetry: ErrorUtils_1.onErrorRetry });\n    // TODO(iain): Integrate auction data from zora indexer into hook\n    const auctionData = swr_1.default(contractAddress && tokenId ? ['loadAuctionForNFT', contractAddress, tokenId] : null, (_, contractAddress, tokenId) => fetcher.loadAuctionInfo(contractAddress, tokenId), { refreshInterval, initialData: initialData === null || initialData === void 0 ? void 0 : initialData.auctionData, onErrorRetry: ErrorUtils_1.onErrorRetry });\n    const currencyData = swr_1.default(nftData && nftData.data && loadCurrencyInfo\n        ? ['loadCurrencies', (_a = auctionData.data) === null || _a === void 0 ? void 0 : _a.auctionCurrency.id]\n        : null, (_, ...currencies) => fetcher.loadCurrencies(currencies), {\n        refreshInterval,\n        dedupingInterval: 0,\n    });\n    let data = undefined;\n    if (nftData.data !== undefined) {\n        data = ZoraIndexerTransformers_1.transformNFTIndexerResponse(nftData.data, auctionData.data, currencyData.data);\n    }\n    else {\n        data = initialData;\n    }\n    return {\n        currencyLoaded: !!currencyData.data,\n        error: (_b = nftData.error) === null || _b === void 0 ? void 0 : _b.toString(),\n        data,\n    };\n}\nexports.useNFTIndexer = useNFTIndexer;\n"]},"metadata":{},"sourceType":"script"}