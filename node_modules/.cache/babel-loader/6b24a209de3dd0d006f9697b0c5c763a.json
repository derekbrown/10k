{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { createFragmentMap, getFragmentFromSelection, getDefaultValues, getFragmentDefinitions, getOperationDefinition, getTypenameFromResult, makeReference, isField, resultKeyNameFromField, isReference, shouldInclude, cloneDeep, addTypenameToDocument } from \"../../utilities/index.js\";\nimport { makeProcessedFieldsMerger, fieldNameFromStoreName, storeValueIsStoreObject } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\n;\n\nvar StoreWriter = function () {\n  function StoreWriter(cache, reader) {\n    this.cache = cache;\n    this.reader = reader;\n  }\n\n  StoreWriter.prototype.writeToStore = function (store, _a) {\n    var _this = this;\n\n    var query = _a.query,\n        result = _a.result,\n        dataId = _a.dataId,\n        variables = _a.variables,\n        overwrite = _a.overwrite;\n    var operationDefinition = getOperationDefinition(query);\n    var merger = makeProcessedFieldsMerger();\n    variables = __assign(__assign({}, getDefaultValues(operationDefinition)), variables);\n    var context = {\n      store: store,\n      written: Object.create(null),\n      merge: function (existing, incoming) {\n        return merger.merge(existing, incoming);\n      },\n      variables: variables,\n      varString: canonicalStringify(variables),\n      fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n      overwrite: !!overwrite,\n      incomingById: new Map(),\n      clientOnly: false\n    };\n    var ref = this.processSelectionSet({\n      result: result || Object.create(null),\n      dataId: dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: {\n        map: new Map()\n      },\n      context: context\n    });\n\n    if (!isReference(ref)) {\n      throw __DEV__ ? new InvariantError(\"Could not identify object \" + JSON.stringify(result)) : new InvariantError(8);\n    }\n\n    context.incomingById.forEach(function (_a, dataId) {\n      var fields = _a.fields,\n          mergeTree = _a.mergeTree,\n          selections = _a.selections;\n      var entityRef = makeReference(dataId);\n\n      if (mergeTree && mergeTree.map.size) {\n        var applied = _this.applyMerges(mergeTree, entityRef, fields, context);\n\n        if (isReference(applied)) {\n          return;\n        }\n\n        fields = applied;\n      }\n\n      if (__DEV__ && !context.overwrite) {\n        var hasSelectionSet_1 = function (storeFieldName) {\n          return fieldsWithSelectionSets_1.has(fieldNameFromStoreName(storeFieldName));\n        };\n\n        var fieldsWithSelectionSets_1 = new Set();\n        selections.forEach(function (selection) {\n          if (isField(selection) && selection.selectionSet) {\n            fieldsWithSelectionSets_1.add(selection.name.value);\n          }\n        });\n\n        var hasMergeFunction_1 = function (storeFieldName) {\n          var childTree = mergeTree && mergeTree.map.get(storeFieldName);\n          return Boolean(childTree && childTree.info && childTree.info.merge);\n        };\n\n        Object.keys(fields).forEach(function (storeFieldName) {\n          if (hasSelectionSet_1(storeFieldName) && !hasMergeFunction_1(storeFieldName)) {\n            warnAboutDataLoss(entityRef, fields, storeFieldName, context.store);\n          }\n        });\n      }\n\n      store.merge(dataId, fields);\n    });\n    store.retain(ref.__ref);\n    return ref;\n  };\n\n  StoreWriter.prototype.processSelectionSet = function (_a) {\n    var _this = this;\n\n    var dataId = _a.dataId,\n        result = _a.result,\n        selectionSet = _a.selectionSet,\n        context = _a.context,\n        mergeTree = _a.mergeTree;\n    var policies = this.cache.policies;\n\n    var _b = policies.identify(result, selectionSet, context.fragmentMap),\n        id = _b[0],\n        keyObject = _b[1];\n\n    dataId = dataId || id;\n\n    if (\"string\" === typeof dataId) {\n      var sets = context.written[dataId] || (context.written[dataId] = []);\n      var ref = makeReference(dataId);\n      if (sets.indexOf(selectionSet) >= 0) return ref;\n      sets.push(selectionSet);\n\n      if (this.reader && this.reader.isFresh(result, ref, selectionSet, context)) {\n        return ref;\n      }\n    }\n\n    var incomingFields = Object.create(null);\n\n    if (keyObject) {\n      incomingFields = context.merge(incomingFields, keyObject);\n    }\n\n    var typename = dataId && policies.rootTypenamesById[dataId] || getTypenameFromResult(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, \"__typename\");\n\n    if (\"string\" === typeof typename) {\n      incomingFields.__typename = typename;\n    }\n\n    var selections = new Set(selectionSet.selections);\n    selections.forEach(function (selection) {\n      var _a;\n\n      if (!shouldInclude(selection, context.variables)) return;\n\n      if (isField(selection)) {\n        var resultFieldKey = resultKeyNameFromField(selection);\n        var value = result[resultFieldKey];\n        var wasClientOnly = context.clientOnly;\n        context.clientOnly = wasClientOnly || !!(selection.directives && selection.directives.some(function (d) {\n          return d.name.value === \"client\";\n        }));\n\n        if (value !== void 0) {\n          var storeFieldName = policies.getStoreFieldName({\n            typename: typename,\n            fieldName: selection.name.value,\n            field: selection,\n            variables: context.variables\n          });\n          var childTree = getChildMergeTree(mergeTree, storeFieldName);\n\n          var incomingValue = _this.processFieldValue(value, selection, context, childTree);\n\n          var childTypename = void 0;\n\n          if (selection.selectionSet) {\n            childTypename = context.store.getFieldValue(incomingValue, \"__typename\");\n\n            if (!childTypename && isReference(incomingValue)) {\n              var info = context.incomingById.get(incomingValue.__ref);\n              childTypename = info && info.fields.__typename;\n            }\n          }\n\n          var merge = policies.getMergeFunction(typename, selection.name.value, childTypename);\n\n          if (merge) {\n            childTree.info = {\n              field: selection,\n              typename: typename,\n              merge: merge\n            };\n          } else {\n            maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n          }\n\n          incomingFields = context.merge(incomingFields, (_a = {}, _a[storeFieldName] = incomingValue, _a));\n        } else if (!context.clientOnly && !addTypenameToDocument.added(selection)) {\n          __DEV__ && invariant.error((\"Missing field '\" + resultKeyNameFromField(selection) + \"' while writing result \" + JSON.stringify(result, null, 2)).substring(0, 1000));\n        }\n\n        context.clientOnly = wasClientOnly;\n      } else {\n        var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n\n        if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {\n          fragment.selectionSet.selections.forEach(selections.add, selections);\n        }\n      }\n    });\n\n    if (\"string\" === typeof dataId) {\n      var previous = context.incomingById.get(dataId);\n\n      if (previous) {\n        previous.fields = context.merge(previous.fields, incomingFields);\n        previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);\n        previous.selections.forEach(selections.add, selections);\n        previous.selections = selections;\n      } else {\n        context.incomingById.set(dataId, {\n          fields: incomingFields,\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          selections: selections\n        });\n      }\n\n      return makeReference(dataId);\n    }\n\n    return incomingFields;\n  };\n\n  StoreWriter.prototype.processFieldValue = function (value, field, context, mergeTree) {\n    var _this = this;\n\n    if (!field.selectionSet || value === null) {\n      return __DEV__ ? cloneDeep(value) : value;\n    }\n\n    if (Array.isArray(value)) {\n      return value.map(function (item, i) {\n        var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context: context,\n      mergeTree: mergeTree\n    });\n  };\n\n  StoreWriter.prototype.applyMerges = function (mergeTree, existing, incoming, context, getStorageArgs) {\n    var _a;\n\n    var _this = this;\n\n    if (mergeTree.map.size && !isReference(incoming)) {\n      var e_1 = !Array.isArray(incoming) && (isReference(existing) || storeValueIsStoreObject(existing)) ? existing : void 0;\n      var i_1 = incoming;\n\n      if (e_1 && !getStorageArgs) {\n        getStorageArgs = [isReference(e_1) ? e_1.__ref : e_1];\n      }\n\n      var changedFields_1;\n\n      var getValue_1 = function (from, name) {\n        return Array.isArray(from) ? typeof name === \"number\" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));\n      };\n\n      mergeTree.map.forEach(function (childTree, storeFieldName) {\n        var eVal = getValue_1(e_1, storeFieldName);\n        var iVal = getValue_1(i_1, storeFieldName);\n        if (void 0 === iVal) return;\n\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n\n        var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n\n        if (aVal !== iVal) {\n          changedFields_1 = changedFields_1 || new Map();\n          changedFields_1.set(storeFieldName, aVal);\n        }\n\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n\n      if (changedFields_1) {\n        incoming = Array.isArray(i_1) ? i_1.slice(0) : __assign({}, i_1);\n        changedFields_1.forEach(function (value, name) {\n          incoming[name] = value;\n        });\n      }\n    }\n\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));\n    }\n\n    return incoming;\n  };\n\n  return StoreWriter;\n}();\n\nexport { StoreWriter };\nvar emptyMergeTreePool = [];\n\nfunction getChildMergeTree(_a, name) {\n  var map = _a.map;\n\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || {\n      map: new Map()\n    });\n  }\n\n  return map.get(name);\n}\n\nfunction mergeMergeTrees(left, right) {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n  var info = left.info && right.info ? __assign(__assign({}, left.info), right.info) : left.info || right.info;\n  var needToMergeMaps = left.map.size && right.map.size;\n  var map = needToMergeMaps ? new Map() : left.map.size ? left.map : right.map;\n  var merged = {\n    info: info,\n    map: map\n  };\n\n  if (needToMergeMaps) {\n    var remainingRightKeys_1 = new Set(right.map.keys());\n    left.map.forEach(function (leftTree, key) {\n      merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n      remainingRightKeys_1.delete(key);\n    });\n    remainingRightKeys_1.forEach(function (key) {\n      merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n    });\n  }\n\n  return merged;\n}\n\nfunction mergeTreeIsEmpty(tree) {\n  return !tree || !(tree.info || tree.map.size);\n}\n\nfunction maybeRecycleChildMergeTree(_a, name) {\n  var map = _a.map;\n  var childTree = map.get(name);\n\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\n\nvar warnings = new Set();\n\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n  var getChild = function (objOrRef) {\n    var child = store.getFieldValue(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n\n  var existing = getChild(existingRef);\n  if (!existing) return;\n  var incoming = getChild(incomingObj);\n  if (!incoming) return;\n  if (isReference(existing)) return;\n  if (equal(existing, incoming)) return;\n\n  if (Object.keys(existing).every(function (key) {\n    return store.getFieldValue(incoming, key) !== void 0;\n  })) {\n    return;\n  }\n\n  var parentType = store.getFieldValue(existingRef, \"__typename\") || store.getFieldValue(incomingObj, \"__typename\");\n  var fieldName = fieldNameFromStoreName(storeFieldName);\n  var typeDotName = parentType + \".\" + fieldName;\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n  var childTypenames = [];\n\n  if (!Array.isArray(existing) && !Array.isArray(incoming)) {\n    [existing, incoming].forEach(function (child) {\n      var typename = store.getFieldValue(child, \"__typename\");\n\n      if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n\n  __DEV__ && invariant.warn(\"Cache data may be lost when replacing the \" + fieldName + \" field of a \" + parentType + \" object.\\n\\nTo address this problem (which is not a bug in Apollo Client), \" + (childTypenames.length ? \"either ensure all objects of type \" + childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \" : \"\") + \"define a custom merge function for the \" + typeDotName + \" field, so InMemoryCache can safely merge these objects:\\n\\n  existing: \" + JSON.stringify(existing).slice(0, 1000) + \"\\n  incoming: \" + JSON.stringify(incoming).slice(0, 1000) + \"\\n\\nFor more information about these options, please refer to the documentation:\\n\\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\\n\");\n}","map":{"version":3,"mappings":"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","names":["invariant","InvariantError","equal","createFragmentMap","getFragmentFromSelection","getDefaultValues","getFragmentDefinitions","getOperationDefinition","getTypenameFromResult","makeReference","isField","resultKeyNameFromField","isReference","shouldInclude","cloneDeep","addTypenameToDocument","makeProcessedFieldsMerger","fieldNameFromStoreName","storeValueIsStoreObject","canonicalStringify","cache","reader","StoreWriter","store","_a","query","result","dataId","variables","overwrite","operationDefinition","merger","context","written","Object","create","merge","existing","incoming","varString","fragmentMap","incomingById","Map","clientOnly","ref","processSelectionSet","selectionSet","mergeTree","map","__DEV__","JSON","stringify","forEach","fields","selections","entityRef","size","applied","_this","applyMerges","hasSelectionSet_1","storeFieldName","has","fieldsWithSelectionSets_1","Set","selection","add","name","value","hasMergeFunction_1","childTree","get","Boolean","info","keys","warnAboutDataLoss","retain","__ref","policies","identify","id","keyObject","sets","indexOf","push","isFresh","incomingFields","typename","rootTypenamesById","__typename","resultFieldKey","wasClientOnly","directives","some","getStoreFieldName","fieldName","field","getChildMergeTree","incomingValue","processFieldValue","childTypename","getFieldValue","getMergeFunction","maybeRecycleChildMergeTree","added","substring","fragment","fragmentMatches","previous","mergeMergeTrees","set","mergeTreeIsEmpty","Array","isArray","item","i","getStorageArgs","e_1","i_1","changedFields_1","getValue_1","from","String","eVal","iVal","aVal","pop","slice","__assign","runMergeFunction","getStorage","apply","emptyMergeTreePool","left","right","needToMergeMaps","merged","remainingRightKeys_1","leftTree","key","delete","tree","warnings","existingRef","incomingObj","getChild","objOrRef","child","every","parentType","typeDotName","childTypenames","includes","join"],"sourceRoot":"","sources":["../../../src/cache/inmemory/writeToStore.ts"],"sourcesContent":["import { invariant, InvariantError } from '../../utilities/globals';\n\nimport { SelectionSetNode, FieldNode, SelectionNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport {\n  createFragmentMap,\n  FragmentMap,\n  getFragmentFromSelection,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getOperationDefinition,\n  getTypenameFromResult,\n  makeReference,\n  isField,\n  resultKeyNameFromField,\n  StoreValue,\n  StoreObject,\n  Reference,\n  isReference,\n  shouldInclude,\n  cloneDeep,\n  addTypenameToDocument,\n} from '../../utilities';\n\nimport { NormalizedCache, ReadMergeModifyContext, MergeTree } from './types';\nimport { makeProcessedFieldsMerger, fieldNameFromStoreName, storeValueIsStoreObject } from './helpers';\nimport { StoreReader } from './readFromStore';\nimport { InMemoryCache } from './inMemoryCache';\nimport { EntityStore } from './entityStore';\nimport { Cache } from '../../core';\nimport { canonicalStringify } from './object-canon';\n\nexport interface WriteContext extends ReadMergeModifyContext {\n  readonly written: {\n    [dataId: string]: SelectionSetNode[];\n  };\n  readonly fragmentMap?: FragmentMap;\n  // General-purpose deep-merge function for use during writes.\n  merge<T>(existing: T, incoming: T): T;\n  // If true, merge functions will be called with undefined existing data.\n  overwrite: boolean;\n  incomingById: Map<string, {\n    fields: StoreObject;\n    mergeTree?: MergeTree;\n    selections: Set<SelectionNode>;\n  }>;\n  clientOnly: boolean;\n};\n\ninterface ProcessSelectionSetOptions {\n  dataId?: string,\n  result: Record<string, any>;\n  selectionSet: SelectionSetNode;\n  context: WriteContext;\n  mergeTree: MergeTree;\n}\n\nexport class StoreWriter {\n  constructor(\n    public readonly cache: InMemoryCache,\n    private reader?: StoreReader,\n  ) {}\n\n  public writeToStore(store: NormalizedCache, {\n    query,\n    result,\n    dataId,\n    variables,\n    overwrite,\n  }: Cache.WriteOptions): Reference | undefined {\n    const operationDefinition = getOperationDefinition(query)!;\n    const merger = makeProcessedFieldsMerger();\n\n    variables = {\n      ...getDefaultValues(operationDefinition),\n      ...variables!,\n    };\n\n    const context: WriteContext = {\n      store,\n      written: Object.create(null),\n      merge<T>(existing: T, incoming: T) {\n        return merger.merge(existing, incoming) as T;\n      },\n      variables,\n      varString: canonicalStringify(variables),\n      fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n      overwrite: !!overwrite,\n      incomingById: new Map,\n      clientOnly: false,\n    };\n\n    const ref = this.processSelectionSet({\n      result: result || Object.create(null),\n      dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: { map: new Map },\n      context,\n    });\n\n    if (!isReference(ref)) {\n      throw new InvariantError(`Could not identify object ${JSON.stringify(result)}`);\n    }\n\n    // So far, the store has not been modified, so now it's time to process\n    // context.incomingById and merge those incoming fields into context.store.\n    context.incomingById.forEach(({ fields, mergeTree, selections }, dataId) => {\n      const entityRef = makeReference(dataId);\n\n      if (mergeTree && mergeTree.map.size) {\n        const applied = this.applyMerges(mergeTree, entityRef, fields, context);\n        if (isReference(applied)) {\n          // Assume References returned by applyMerges have already been merged\n          // into the store. See makeMergeObjectsFunction in policies.ts for an\n          // example of how this can happen.\n          return;\n        }\n        // Otherwise, applyMerges returned a StoreObject, whose fields we should\n        // merge into the store (see store.merge statement below).\n        fields = applied;\n      }\n\n      if (__DEV__ && !context.overwrite) {\n        const hasSelectionSet = (storeFieldName: string) =>\n          fieldsWithSelectionSets.has(fieldNameFromStoreName(storeFieldName));\n        const fieldsWithSelectionSets = new Set<string>();\n        selections.forEach(selection => {\n          if (isField(selection) && selection.selectionSet) {\n            fieldsWithSelectionSets.add(selection.name.value);\n          }\n        });\n\n        const hasMergeFunction = (storeFieldName: string) => {\n          const childTree = mergeTree && mergeTree.map.get(storeFieldName);\n          return Boolean(childTree && childTree.info && childTree.info.merge);\n        };\n\n        Object.keys(fields).forEach(storeFieldName => {\n          // If a merge function was defined for this field, trust that it\n          // did the right thing about (not) clobbering data. If the field\n          // has no selection set, it's a scalar field, so it doesn't need\n          // a merge function (even if it's an object, like JSON data).\n          if (hasSelectionSet(storeFieldName) &&\n              !hasMergeFunction(storeFieldName)) {\n            warnAboutDataLoss(\n              entityRef,\n              fields,\n              storeFieldName,\n              context.store,\n            );\n          }\n        });\n      }\n\n      store.merge(dataId, fields);\n    });\n\n    // Any IDs written explicitly to the cache will be retained as\n    // reachable root IDs for garbage collection purposes. Although this\n    // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n    // retainment counts are effectively ignored because cache.gc() always\n    // includes them in its root ID set.\n    store.retain(ref.__ref);\n\n    return ref;\n  }\n\n  private processSelectionSet({\n    dataId,\n    result,\n    selectionSet,\n    context,\n    // This object allows processSelectionSet to report useful information\n    // to its callers without explicitly returning that information.\n    mergeTree,\n  }: ProcessSelectionSetOptions): StoreObject | Reference {\n    const { policies } = this.cache;\n\n    // Identify the result object, even if dataId was already provided,\n    // since we always need keyObject below.\n    const [id, keyObject] = policies.identify(\n      result, selectionSet, context.fragmentMap);\n\n    // If dataId was not provided, fall back to the id just generated by\n    // policies.identify.\n    dataId = dataId || id;\n\n    if (\"string\" === typeof dataId) {\n      // Avoid processing the same entity object using the same selection\n      // set more than once. We use an array instead of a Set since most\n      // entity IDs will be written using only one selection set, so the\n      // size of this array is likely to be very small, meaning indexOf is\n      // likely to be faster than Set.prototype.has.\n      const sets = context.written[dataId] || (context.written[dataId] = []);\n      const ref = makeReference(dataId);\n      if (sets.indexOf(selectionSet) >= 0) return ref;\n      sets.push(selectionSet);\n\n      // If we're about to write a result object into the store, but we\n      // happen to know that the exact same (===) result object would be\n      // returned if we were to reread the result with the same inputs,\n      // then we can skip the rest of the processSelectionSet work for\n      // this object, and immediately return a Reference to it.\n      if (this.reader && this.reader.isFresh(\n        result,\n        ref,\n        selectionSet,\n        context,\n      )) {\n        return ref;\n      }\n    }\n\n    // This variable will be repeatedly updated using context.merge to\n    // accumulate all fields that need to be written into the store.\n    let incomingFields: StoreObject = Object.create(null);\n\n    // Write any key fields that were used during identification, even if\n    // they were not mentioned in the original query.\n    if (keyObject) {\n      incomingFields = context.merge(incomingFields, keyObject);\n    }\n\n    // If typename was not passed in, infer it. Note that typename is\n    // always passed in for tricky-to-infer cases such as \"Query\" for\n    // ROOT_QUERY.\n    const typename: string | undefined =\n      (dataId && policies.rootTypenamesById[dataId]) ||\n      getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n      (dataId && context.store.get(dataId, \"__typename\") as string);\n\n    if (\"string\" === typeof typename) {\n      incomingFields.__typename = typename;\n    }\n\n    const selections = new Set(selectionSet.selections);\n\n    selections.forEach(selection => {\n      if (!shouldInclude(selection, context.variables)) return;\n\n      if (isField(selection)) {\n        const resultFieldKey = resultKeyNameFromField(selection);\n        const value = result[resultFieldKey];\n\n        const wasClientOnly = context.clientOnly;\n        context.clientOnly = wasClientOnly || !!(\n          selection.directives &&\n          selection.directives.some(d => d.name.value === \"client\")\n        );\n\n        if (value !== void 0) {\n          const storeFieldName = policies.getStoreFieldName({\n            typename,\n            fieldName: selection.name.value,\n            field: selection,\n            variables: context.variables,\n          });\n\n          const childTree = getChildMergeTree(mergeTree, storeFieldName);\n\n          let incomingValue =\n            this.processFieldValue(value, selection, context, childTree);\n\n          // To determine if this field holds a child object with a merge\n          // function defined in its type policy (see PR #7070), we need to\n          // figure out the child object's __typename.\n          let childTypename: string | undefined;\n\n          // The field's value can be an object that has a __typename only if\n          // the field has a selection set. Otherwise incomingValue is scalar.\n          if (selection.selectionSet) {\n            // We attempt to find the child __typename first in context.store,\n            // but the child object may not exist in the store yet, likely\n            // because it's being written for the first time, during this very\n            // call to writeToStore. Note: if incomingValue is a non-normalized\n            // StoreObject (not a Reference), getFieldValue will read from that\n            // object's properties to find its __typename.\n            childTypename = context.store.getFieldValue<string>(\n              incomingValue as StoreObject | Reference,\n              \"__typename\",\n            );\n\n            // If the child object is being written for the first time, but\n            // incomingValue is a Reference, then the entity that Reference\n            // identifies should have an entry in context.incomingById, which\n            // likely contains a __typename field we can use. After all, how\n            // could we know the object's ID if it had no __typename? If we\n            // wrote data into context.store as each processSelectionSet call\n            // finished processing an entity object, the child object would\n            // already be in context.store, so we wouldn't need this extra\n            // check, but holding all context.store.merge calls until after\n            // we've finished all processSelectionSet work is cleaner and solves\n            // other problems, such as issue #8370.\n            if (!childTypename && isReference(incomingValue)) {\n              const info = context.incomingById.get(incomingValue.__ref);\n              childTypename = info && info.fields.__typename;\n            }\n          }\n\n          const merge = policies.getMergeFunction(\n            typename,\n            selection.name.value,\n            childTypename,\n          );\n\n          if (merge) {\n            childTree.info = {\n              // TODO Check compatibility against any existing\n              // childTree.field?\n              field: selection,\n              typename,\n              merge,\n            };\n          } else {\n            maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n          }\n\n          incomingFields = context.merge(incomingFields, {\n            [storeFieldName]: incomingValue,\n          });\n\n        } else if (\n          !context.clientOnly &&\n          !addTypenameToDocument.added(selection)\n        ) {\n          invariant.error(`Missing field '${\n            resultKeyNameFromField(selection)\n          }' while writing result ${\n            JSON.stringify(result, null, 2)\n          }`.substring(0, 1000));\n        }\n\n        context.clientOnly = wasClientOnly;\n\n      } else {\n        // This is not a field, so it must be a fragment, either inline or named\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.fragmentMap,\n        );\n\n        if (fragment &&\n            // By passing result and context.variables, we enable\n            // policies.fragmentMatches to bend the rules when typename is\n            // not a known subtype of the fragment type condition, but the\n            // result object contains all the keys requested by the\n            // fragment, which strongly suggests the fragment probably\n            // matched. This fuzzy matching behavior must be enabled by\n            // including a regular expression string (such as \".*\" or\n            // \"Prefix.*\" or \".*Suffix\") in the possibleTypes array for\n            // specific supertypes; otherwise, all matching remains exact.\n            // Fuzzy matches are remembered by the Policies object and\n            // later used when reading from the cache. Since there is no\n            // incoming result object to check when reading, reading does\n            // not involve the same fuzzy inference, so the StoreReader\n            // class calls policies.fragmentMatches without passing result\n            // or context.variables. The flexibility of fuzzy matching\n            // allows existing clients to accommodate previously unknown\n            // __typename strings produced by server/schema changes, which\n            // would otherwise be breaking changes.\n            policies.fragmentMatches(fragment, typename, result, context.variables)) {\n          fragment.selectionSet.selections.forEach(selections.add, selections);\n        }\n      }\n    });\n\n    if (\"string\" === typeof dataId) {\n      const previous = context.incomingById.get(dataId);\n      if (previous) {\n        previous.fields = context.merge(previous.fields, incomingFields);\n        previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);\n        // Add all previous SelectionNode objects, rather than creating a new\n        // Set, since the original unmerged selections Set is not going to be\n        // needed again (only the merged Set).\n        previous.selections.forEach(selections.add, selections);\n        previous.selections = selections;\n      } else {\n        context.incomingById.set(dataId, {\n          fields: incomingFields,\n          // Save a reference to mergeTree only if it is not empty, because\n          // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n          // reused for entirely different parts of the result tree.\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          selections,\n        });\n      }\n      return makeReference(dataId);\n    }\n\n    return incomingFields;\n  }\n\n  private processFieldValue(\n    value: any,\n    field: FieldNode,\n    context: WriteContext,\n    mergeTree: MergeTree,\n  ): StoreValue {\n    if (!field.selectionSet || value === null) {\n      // In development, we need to clone scalar values so that they can be\n      // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n      // it's cheaper to store the scalar values directly in the cache.\n      return __DEV__ ? cloneDeep(value) : value;\n    }\n\n    if (Array.isArray(value)) {\n      return value.map((item, i) => {\n        const value = this.processFieldValue(\n          item, field, context, getChildMergeTree(mergeTree, i));\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context,\n      mergeTree,\n    });\n  }\n\n  private applyMerges<T extends StoreValue>(\n    mergeTree: MergeTree,\n    existing: StoreValue,\n    incoming: T,\n    context: WriteContext,\n    getStorageArgs?: Parameters<EntityStore[\"getStorage\"]>,\n  ): T | Reference {\n    if (mergeTree.map.size && !isReference(incoming)) {\n      const e: StoreObject | Reference | undefined = (\n        // Items in the same position in different arrays are not\n        // necessarily related to each other, so when incoming is an array\n        // we process its elements as if there was no existing data.\n        !Array.isArray(incoming) &&\n        // Likewise, existing must be either a Reference or a StoreObject\n        // in order for its fields to be safe to merge with the fields of\n        // the incoming object.\n        (isReference(existing) || storeValueIsStoreObject(existing))\n      ) ? existing : void 0;\n\n      // This narrowing is implied by mergeTree.map.size > 0 and\n      // !isReference(incoming), though TypeScript understandably cannot\n      // hope to infer this type.\n      const i = incoming as StoreObject | StoreValue[];\n\n      // The options.storage objects provided to read and merge functions\n      // are derived from the identity of the parent object plus a\n      // sequence of storeFieldName strings/numbers identifying the nested\n      // field name path of each field value to be merged.\n      if (e && !getStorageArgs) {\n        getStorageArgs = [isReference(e) ? e.__ref : e];\n      }\n\n      // It's possible that applying merge functions to this subtree will\n      // not change the incoming data, so this variable tracks the fields\n      // that did change, so we can create a new incoming object when (and\n      // only when) at least one incoming field has changed. We use a Map\n      // to preserve the type of numeric keys.\n      let changedFields: Map<string | number, StoreValue> | undefined;\n\n      const getValue = (\n        from: typeof e | typeof i,\n        name: string | number,\n      ): StoreValue => {\n        return Array.isArray(from)\n          ? (typeof name === \"number\" ? from[name] : void 0)\n          : context.store.getFieldValue(from, String(name))\n      };\n\n      mergeTree.map.forEach((childTree, storeFieldName) => {\n        const eVal = getValue(e, storeFieldName);\n        const iVal = getValue(i, storeFieldName);\n        // If we have no incoming data, leave any existing data untouched.\n        if (void 0 === iVal) return;\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n        const aVal = this.applyMerges(\n          childTree,\n          eVal,\n          iVal,\n          context,\n          getStorageArgs,\n        );\n        if (aVal !== iVal) {\n          changedFields = changedFields || new Map;\n          changedFields.set(storeFieldName, aVal);\n        }\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n\n      if (changedFields) {\n        // Shallow clone i so we can add changed fields to it.\n        incoming = (Array.isArray(i) ? i.slice(0) : { ...i }) as T;\n        changedFields.forEach((value, name) => {\n          (incoming as any)[name] = value;\n        });\n      }\n    }\n\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(\n        existing,\n        incoming,\n        mergeTree.info,\n        context,\n        getStorageArgs && context.store.getStorage(...getStorageArgs),\n      );\n    }\n\n    return incoming;\n  }\n}\n\nconst emptyMergeTreePool: MergeTree[] = [];\n\nfunction getChildMergeTree(\n  { map }: MergeTree,\n  name: string | number,\n): MergeTree {\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || { map: new Map });\n  }\n  return map.get(name)!;\n}\n\nfunction mergeMergeTrees(\n  left: MergeTree | undefined,\n  right: MergeTree | undefined,\n): MergeTree {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left!;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n\n  const info = left.info && right.info ? {\n    ...left.info,\n    ...right.info,\n  } : left.info || right.info;\n\n  const needToMergeMaps = left.map.size && right.map.size;\n  const map = needToMergeMaps ? new Map :\n    left.map.size ? left.map : right.map;\n\n  const merged = { info, map };\n\n  if (needToMergeMaps) {\n    const remainingRightKeys = new Set(right.map.keys());\n\n    left.map.forEach((leftTree, key) => {\n      merged.map.set(\n        key,\n        mergeMergeTrees(leftTree, right.map.get(key)),\n      );\n      remainingRightKeys.delete(key);\n    });\n\n    remainingRightKeys.forEach(key => {\n      merged.map.set(\n        key,\n        mergeMergeTrees(\n          right.map.get(key),\n          left.map.get(key),\n        ),\n      );\n    });\n  }\n\n  return merged;\n}\n\nfunction mergeTreeIsEmpty(tree: MergeTree | undefined): boolean {\n  return !tree || !(tree.info || tree.map.size);\n}\n\nfunction maybeRecycleChildMergeTree(\n  { map }: MergeTree,\n  name: string | number,\n) {\n  const childTree = map.get(name);\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\n\nconst warnings = new Set<string>();\n\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(\n  existingRef: Reference,\n  incomingObj: StoreObject,\n  storeFieldName: string,\n  store: NormalizedCache,\n) {\n  const getChild = (objOrRef: StoreObject | Reference): StoreObject | false => {\n    const child = store.getFieldValue<StoreObject>(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n\n  const existing = getChild(existingRef);\n  if (!existing) return;\n\n  const incoming = getChild(incomingObj);\n  if (!incoming) return;\n\n  // It's always safe to replace a reference, since it refers to data\n  // safely stored elsewhere.\n  if (isReference(existing)) return;\n\n  // If the values are structurally equivalent, we do not need to worry\n  // about incoming replacing existing.\n  if (equal(existing, incoming)) return;\n\n  // If we're replacing every key of the existing object, then the\n  // existing data would be overwritten even if the objects were\n  // normalized, so warning would not be helpful here.\n  if (Object.keys(existing).every(\n    key => store.getFieldValue(incoming, key) !== void 0)) {\n    return;\n  }\n\n  const parentType =\n    store.getFieldValue<string>(existingRef, \"__typename\") ||\n    store.getFieldValue<string>(incomingObj, \"__typename\");\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const typeDotName = `${parentType}.${fieldName}`;\n  // Avoid warning more than once for the same type and field name.\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n\n  const childTypenames: string[] = [];\n  // Arrays do not have __typename fields, and always need a custom merge\n  // function, even if their elements are normalized entities.\n  if (!Array.isArray(existing) &&\n      !Array.isArray(incoming)) {\n    [existing, incoming].forEach(child => {\n      const typename = store.getFieldValue(child, \"__typename\");\n      if (typeof typename === \"string\" &&\n          !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n\n  invariant.warn(\n`Cache data may be lost when replacing the ${fieldName} field of a ${parentType} object.\n\nTo address this problem (which is not a bug in Apollo Client), ${\n  childTypenames.length\n    ? \"either ensure all objects of type \" +\n        childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \"\n    : \"\"\n}define a custom merge function for the ${\n  typeDotName\n} field, so InMemoryCache can safely merge these objects:\n\n  existing: ${JSON.stringify(existing).slice(0, 1000)}\n  incoming: ${JSON.stringify(incoming).slice(0, 1000)}\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n`);\n}\n"]},"metadata":{},"sourceType":"module"}