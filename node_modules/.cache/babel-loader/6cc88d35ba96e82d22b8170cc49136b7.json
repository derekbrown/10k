{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useZNFTGroup = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst react_1 = require(\"react\");\n\nconst swr_1 = tslib_1.__importDefault(require(\"swr\"));\n\nconst NFTFetchContext_1 = require(\"../context/NFTFetchContext\");\n\nconst TransformFetchResults_1 = require(\"../fetcher/TransformFetchResults\");\n\nconst ExtractResultData_1 = require(\"../fetcher/ExtractResultData\");\n/**\n * Fetches on-chain NFT data and pricing for the given zNFT id\n *\n * @param id id of zNFT to fetch blockchain information for\n * @param options SWR flags and an option to load currency info\n * @returns useNFTType hook results include loading, error, and chainNFT data.\n */\n\n\nfunction useZNFTGroup(ids) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'creator';\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const fetcher = react_1.useContext(NFTFetchContext_1.NFTFetchContext);\n  const {\n    loadCurrencyInfo = false,\n    refreshInterval,\n    initialData\n  } = options || {};\n  const nftData = swr_1.default(ids ? ['fetchZNFTGroupData', type, ...ids] : null, function (_, type) {\n    for (var _len = arguments.length, ids = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      ids[_key - 2] = arguments[_key];\n    }\n\n    return fetcher.fetchZNFTGroupData(ids, type);\n  }, {\n    refreshInterval,\n    dedupingInterval: 0\n  });\n  const currencyData = swr_1.default(nftData.data && nftData.data.length > 0 && loadCurrencyInfo ? ['loadCurrencies', ...nftData.data.map(item => ExtractResultData_1.getCurrenciesInUse(TransformFetchResults_1.addAuctionInformation(item.pricing))).reduce((last, item) => last.concat(item), [])] : null, function (_) {\n    for (var _len2 = arguments.length, currencies = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      currencies[_key2 - 1] = arguments[_key2];\n    }\n\n    return fetcher.loadCurrencies(currencies);\n  }, {\n    refreshInterval,\n    dedupingInterval: 0\n  });\n  let medias;\n\n  if (nftData.data !== undefined) {\n    medias = nftData.data.map(media => ({ ...media,\n      pricing: TransformFetchResults_1.addAuctionInformation(media.pricing, currencyData.data)\n    }));\n  } else {\n    medias = initialData;\n  }\n\n  return {\n    currencyLoaded: !!currencyData.data,\n    error: nftData.error,\n    medias\n  };\n}\n\nexports.useZNFTGroup = useZNFTGroup;","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/@zoralabs/nft-hooks/dist/hooks/useZNFTGroup.js"],"names":["Object","defineProperty","exports","value","useZNFTGroup","tslib_1","require","react_1","swr_1","__importDefault","NFTFetchContext_1","TransformFetchResults_1","ExtractResultData_1","ids","type","options","fetcher","useContext","NFTFetchContext","loadCurrencyInfo","refreshInterval","initialData","nftData","default","_","fetchZNFTGroupData","dedupingInterval","currencyData","data","length","map","item","getCurrenciesInUse","addAuctionInformation","pricing","reduce","last","concat","currencies","loadCurrencies","medias","undefined","media","currencyLoaded","error"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useZNFTGroup = void 0;\nconst tslib_1 = require(\"tslib\");\nconst react_1 = require(\"react\");\nconst swr_1 = tslib_1.__importDefault(require(\"swr\"));\nconst NFTFetchContext_1 = require(\"../context/NFTFetchContext\");\nconst TransformFetchResults_1 = require(\"../fetcher/TransformFetchResults\");\nconst ExtractResultData_1 = require(\"../fetcher/ExtractResultData\");\n/**\n * Fetches on-chain NFT data and pricing for the given zNFT id\n *\n * @param id id of zNFT to fetch blockchain information for\n * @param options SWR flags and an option to load currency info\n * @returns useNFTType hook results include loading, error, and chainNFT data.\n */\nfunction useZNFTGroup(ids, type = 'creator', options = {}) {\n    const fetcher = react_1.useContext(NFTFetchContext_1.NFTFetchContext);\n    const { loadCurrencyInfo = false, refreshInterval, initialData } = options || {};\n    const nftData = swr_1.default(ids ? ['fetchZNFTGroupData', type, ...ids] : null, (_, type, ...ids) => fetcher.fetchZNFTGroupData(ids, type), { refreshInterval, dedupingInterval: 0 });\n    const currencyData = swr_1.default(nftData.data && nftData.data.length > 0 && loadCurrencyInfo\n        ? [\n            'loadCurrencies',\n            ...nftData.data\n                .map((item) => ExtractResultData_1.getCurrenciesInUse(TransformFetchResults_1.addAuctionInformation(item.pricing)))\n                .reduce((last, item) => last.concat(item), []),\n        ]\n        : null, (_, ...currencies) => fetcher.loadCurrencies(currencies), {\n        refreshInterval,\n        dedupingInterval: 0,\n    });\n    let medias;\n    if (nftData.data !== undefined) {\n        medias = nftData.data.map((media) => ({\n            ...media,\n            pricing: TransformFetchResults_1.addAuctionInformation(media.pricing, currencyData.data),\n        }));\n    }\n    else {\n        medias = initialData;\n    }\n    return {\n        currencyLoaded: !!currencyData.data,\n        error: nftData.error,\n        medias,\n    };\n}\nexports.useZNFTGroup = useZNFTGroup;\n"]},"metadata":{},"sourceType":"script"}