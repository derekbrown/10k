{"ast":null,"code":"var _jsxFileName = \"/Users/derekbrown/workspace/10kdigits/src/NFT.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useNft } from \"use-nft\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NFT(_ref) {\n  _s();\n\n  let {\n    contractAddress,\n    name,\n    size,\n    tokenId\n  } = _ref;\n  const [address, setAddress] = useState(null);\n  const {\n    loading,\n    error,\n    nft\n  } = useNft(contractAddress, tokenId);\n  useEffect(() => {\n    async function getAddress() {\n      let provider = new ethers.providers.AlchemyProvider(null, \"92FsN3H0jQHXFn3_eNKYXY9IRPiMcnI7\");\n      await provider.resolveName(`${tokenId}.eth`).then(async result => {\n        setAddress(result);\n      });\n    }\n\n    getAddress();\n  }, [tokenId, setAddress]);\n  if (loading || error) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  {\n    console.log(nft);\n  }\n  return /*#__PURE__*/_jsxDEV(\"a\", {\n    className: `grow-0 shrink-0 flex flex-col block aspect-square mr-4 cursor-pointer depress rounded-lg hover:bg-blue-50 p-4`,\n    href: `https://opensea.io/assets/${contractAddress}/${tokenId}`,\n    target: \"_blank\",\n    children: [nft.owner === address && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"OWNED\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 33\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: nft.image,\n      alt: `${nft.name} Asset`,\n      className: \"rounded-lg aspect-square\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"my-2 text-center\",\n      children: `${name !== null && name !== void 0 ? name : \"Token\"} #${tokenId}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NFT, \"K9jFdCy6VFqRAsYbxfoRYM/4SoM=\", false, function () {\n  return [useNft];\n});\n\n_c = NFT;\nexport default NFT;\n\nvar _c;\n\n$RefreshReg$(_c, \"NFT\");","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/src/NFT.js"],"names":["React","useEffect","useState","ethers","useNft","NFT","contractAddress","name","size","tokenId","address","setAddress","loading","error","nft","getAddress","provider","providers","AlchemyProvider","resolveName","then","result","console","log","owner","image"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,MAAT,QAAuB,SAAvB;;;;AAEA,SAASC,GAAT,OAAqD;AAAA;;AAAA,MAAxC;AAACC,IAAAA,eAAD;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA,IAAxB;AAA8BC,IAAAA;AAA9B,GAAwC;AACnD,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0BT,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM;AAAEU,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA0BV,MAAM,CAACE,eAAD,EAAkBG,OAAlB,CAAtC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAec,UAAf,GAA6B;AAC3B,UAAIC,QAAQ,GAAG,IAAIb,MAAM,CAACc,SAAP,CAAiBC,eAArB,CAAqC,IAArC,EAA2C,kCAA3C,CAAf;AACA,YAAMF,QAAQ,CAACG,WAAT,CAAsB,GAAEV,OAAQ,MAAhC,EAAuCW,IAAvC,CAA4C,MAAMC,MAAN,IAAgB;AAChEV,QAAAA,UAAU,CAACU,MAAD,CAAV;AACD,OAFK,CAAN;AAGD;;AACDN,IAAAA,UAAU;AACX,GARQ,EAQN,CAACN,OAAD,EAAUE,UAAV,CARM,CAAT;AAUA,MAAIC,OAAO,IAAIC,KAAf,EAAsB,oBAAO,qCAAP;AACtB;AAACS,IAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;AAAiB;AAClB,sBACE;AACE,IAAA,SAAS,EAAG,+GADd;AAEE,IAAA,IAAI,EAAG,6BAA4BR,eAAgB,IAAGG,OAAQ,EAFhE;AAGE,IAAA,MAAM,EAAC,QAHT;AAAA,eAIGK,GAAG,CAACU,KAAJ,KAAcd,OAAd,iBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJ5B,eAKE;AAAK,MAAA,GAAG,EAAEI,GAAG,CAACW,KAAd;AAAqB,MAAA,GAAG,EAAG,GAAEX,GAAG,CAACP,IAAK,QAAtC;AAA+C,MAAA,SAAS,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAI,MAAA,SAAS,EAAC,kBAAd;AAAA,gBAAmC,GAAEA,IAAH,aAAGA,IAAH,cAAGA,IAAH,GAAW,OAAQ,KAAIE,OAAQ;AAAjE;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA1BQJ,G;UAEyBD,M;;;KAFzBC,G;AA4BT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useNft } from \"use-nft\"\n\nfunction NFT({contractAddress, name, size, tokenId}) {\n  const [ address, setAddress ] = useState(null);\n  const { loading, error, nft } = useNft(contractAddress, tokenId)\n\n  useEffect(() => {\n    async function getAddress () {\n      let provider = new ethers.providers.AlchemyProvider(null, \"92FsN3H0jQHXFn3_eNKYXY9IRPiMcnI7\");\n      await provider.resolveName(`${tokenId}.eth`).then(async result => {\n        setAddress(result)\n      })\n    }\n    getAddress();\n  }, [tokenId, setAddress])\n\n  if (loading || error) return <></>;\n  {console.log(nft)}\n  return (\n    <a\n      className={`grow-0 shrink-0 flex flex-col block aspect-square mr-4 cursor-pointer depress rounded-lg hover:bg-blue-50 p-4`}\n      href={`https://opensea.io/assets/${contractAddress}/${tokenId}`}\n      target=\"_blank\">\n      {nft.owner === address && <h3>OWNED</h3>}\n      <img src={nft.image} alt={`${nft.name} Asset`} className=\"rounded-lg aspect-square\"/>\n      <h4 className=\"my-2 text-center\">{`${name ?? \"Token\"} #${tokenId}`}</h4>\n    </a>\n  )\n}\n\nexport default NFT;"]},"metadata":{},"sourceType":"module"}