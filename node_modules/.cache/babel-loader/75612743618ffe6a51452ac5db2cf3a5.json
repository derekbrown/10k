{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MediaConfiguration = void 0;\n\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\n\nconst react_1 = require(\"react\");\n\nconst nft_hooks_1 = require(\"@zoralabs/nft-hooks\");\n\nconst merge_anything_1 = require(\"merge-anything\");\n\nconst content_components_1 = require(\"../content-components\");\n\nconst MediaContext_1 = require(\"./MediaContext\");\n\nconst MediaConfiguration = _ref => {\n  let {\n    networkId,\n    style = {},\n    children,\n    strings = {},\n    renderers\n  } = _ref;\n  const superContext = react_1.useContext(MediaContext_1.MediaContext);\n  const newNetworkId = networkId || superContext.networkId;\n\n  if (!renderers) {\n    renderers = content_components_1.MediaRendererDefaults;\n  }\n\n  let newContext = {\n    // TODO(iain): Fix typing\n    style: merge_anything_1.merge(superContext.style, style),\n    strings: merge_anything_1.merge(superContext.strings, strings),\n    renderers,\n    networkId: newNetworkId\n  };\n  return jsx_runtime_1.jsx(MediaContext_1.MediaContext.Provider, Object.assign({\n    value: newContext\n  }, {\n    children: jsx_runtime_1.jsx(nft_hooks_1.NFTFetchConfiguration, Object.assign({\n      networkId: newNetworkId\n    }, {\n      children: children\n    }), void 0)\n  }), void 0);\n};\n\nexports.MediaConfiguration = MediaConfiguration;","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/@zoralabs/nft-components/dist/context/MediaConfiguration.js"],"names":["Object","defineProperty","exports","value","MediaConfiguration","jsx_runtime_1","require","react_1","nft_hooks_1","merge_anything_1","content_components_1","MediaContext_1","networkId","style","children","strings","renderers","superContext","useContext","MediaContext","newNetworkId","MediaRendererDefaults","newContext","merge","jsx","Provider","assign","NFTFetchConfiguration"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6B,KAAK,CAAlC;;AACA,MAAMC,aAAa,GAAGC,OAAO,CAAC,mBAAD,CAA7B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,gBAAD,CAAhC;;AACA,MAAMI,oBAAoB,GAAGJ,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMK,cAAc,GAAGL,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAMF,kBAAkB,GAAG,QAAmE;AAAA,MAAlE;AAAEQ,IAAAA,SAAF;AAAaC,IAAAA,KAAK,GAAG,EAArB;AAAyBC,IAAAA,QAAzB;AAAmCC,IAAAA,OAAO,GAAG,EAA7C;AAAiDC,IAAAA;AAAjD,GAAkE;AAC1F,QAAMC,YAAY,GAAGV,OAAO,CAACW,UAAR,CAAmBP,cAAc,CAACQ,YAAlC,CAArB;AACA,QAAMC,YAAY,GAAGR,SAAS,IAAIK,YAAY,CAACL,SAA/C;;AACA,MAAI,CAACI,SAAL,EAAgB;AACZA,IAAAA,SAAS,GAAGN,oBAAoB,CAACW,qBAAjC;AACH;;AACD,MAAIC,UAAU,GAAG;AACb;AACAT,IAAAA,KAAK,EAAEJ,gBAAgB,CAACc,KAAjB,CAAuBN,YAAY,CAACJ,KAApC,EAA2CA,KAA3C,CAFM;AAGbE,IAAAA,OAAO,EAAEN,gBAAgB,CAACc,KAAjB,CAAuBN,YAAY,CAACF,OAApC,EAA6CA,OAA7C,CAHI;AAIbC,IAAAA,SAJa;AAKbJ,IAAAA,SAAS,EAAEQ;AALE,GAAjB;AAOA,SAAQf,aAAa,CAACmB,GAAd,CAAkBb,cAAc,CAACQ,YAAf,CAA4BM,QAA9C,EAAwDzB,MAAM,CAAC0B,MAAP,CAAc;AAAEvB,IAAAA,KAAK,EAAEmB;AAAT,GAAd,EAAqC;AAAER,IAAAA,QAAQ,EAAET,aAAa,CAACmB,GAAd,CAAkBhB,WAAW,CAACmB,qBAA9B,EAAqD3B,MAAM,CAAC0B,MAAP,CAAc;AAAEd,MAAAA,SAAS,EAAEQ;AAAb,KAAd,EAA2C;AAAEN,MAAAA,QAAQ,EAAEA;AAAZ,KAA3C,CAArD,EAAyH,KAAK,CAA9H;AAAZ,GAArC,CAAxD,EAA8O,KAAK,CAAnP,CAAR;AACH,CAdD;;AAeAZ,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MediaConfiguration = void 0;\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\nconst react_1 = require(\"react\");\nconst nft_hooks_1 = require(\"@zoralabs/nft-hooks\");\nconst merge_anything_1 = require(\"merge-anything\");\nconst content_components_1 = require(\"../content-components\");\nconst MediaContext_1 = require(\"./MediaContext\");\nconst MediaConfiguration = ({ networkId, style = {}, children, strings = {}, renderers, }) => {\n    const superContext = react_1.useContext(MediaContext_1.MediaContext);\n    const newNetworkId = networkId || superContext.networkId;\n    if (!renderers) {\n        renderers = content_components_1.MediaRendererDefaults;\n    }\n    let newContext = {\n        // TODO(iain): Fix typing\n        style: merge_anything_1.merge(superContext.style, style),\n        strings: merge_anything_1.merge(superContext.strings, strings),\n        renderers,\n        networkId: newNetworkId,\n    };\n    return (jsx_runtime_1.jsx(MediaContext_1.MediaContext.Provider, Object.assign({ value: newContext }, { children: jsx_runtime_1.jsx(nft_hooks_1.NFTFetchConfiguration, Object.assign({ networkId: newNetworkId }, { children: children }), void 0) }), void 0));\n};\nexports.MediaConfiguration = MediaConfiguration;\n"]},"metadata":{},"sourceType":"script"}