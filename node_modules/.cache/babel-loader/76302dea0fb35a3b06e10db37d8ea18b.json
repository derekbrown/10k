{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { wrap } from 'optimism';\nimport { getFragmentQueryDocument } from \"../../utilities/index.js\";\n\nvar ApolloCache = function () {\n  function ApolloCache() {\n    this.getFragmentDoc = wrap(getFragmentQueryDocument);\n  }\n\n  ApolloCache.prototype.batch = function (options) {\n    var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic : options.optimistic === false ? null : void 0;\n    this.performTransaction(options.update, optimisticId);\n  };\n\n  ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n    this.performTransaction(transaction, optimisticId);\n  };\n\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.identify = function (object) {\n    return;\n  };\n\n  ApolloCache.prototype.gc = function () {\n    return [];\n  };\n\n  ApolloCache.prototype.modify = function (options) {\n    return false;\n  };\n\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n\n    return this.read(__assign(__assign({}, options), {\n      rootId: options.id || 'ROOT_QUERY',\n      optimistic: optimistic\n    }));\n  };\n\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n\n    return this.read(__assign(__assign({}, options), {\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic: optimistic\n    }));\n  };\n\n  ApolloCache.prototype.writeQuery = function (_a) {\n    var id = _a.id,\n        data = _a.data,\n        options = __rest(_a, [\"id\", \"data\"]);\n\n    return this.write(Object.assign(options, {\n      dataId: id || 'ROOT_QUERY',\n      result: data\n    }));\n  };\n\n  ApolloCache.prototype.writeFragment = function (_a) {\n    var id = _a.id,\n        data = _a.data,\n        fragment = _a.fragment,\n        fragmentName = _a.fragmentName,\n        options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n\n    return this.write(Object.assign(options, {\n      query: this.getFragmentDoc(fragment, fragmentName),\n      dataId: id,\n      result: data\n    }));\n  };\n\n  return ApolloCache;\n}();\n\nexport { ApolloCache };","map":{"version":3,"mappings":";AACA,SAASA,IAAT,QAAqB,UAArB;AAEA,SAGEC,wBAHF,QAIO,0BAJP;;AAUA;AAAA;AAwHU,0BAAiBD,IAAI,CAACC,wBAAD,CAArB;AAsCT;;AA3GQC,gCAAP,UAAaC,OAAb,EAA8C;AAC5C,QAAMC,YAAY,GAChB,OAAOD,OAAO,CAACE,UAAf,KAA8B,QAA9B,GAAyCF,OAAO,CAACE,UAAjD,GACAF,OAAO,CAACE,UAAR,KAAuB,KAAvB,GAA+B,IAA/B,GAAsC,KAAK,CAF7C;AAGA,SAAKC,kBAAL,CAAwBH,OAAO,CAACI,MAAhC,EAAwCH,YAAxC;AACD,GALM;;AAmBAF,sDAAP,UACEM,WADF,EAEEJ,YAFF,EAEsB;AAEpB,SAAKE,kBAAL,CAAwBE,WAAxB,EAAqCJ,YAArC;AACD,GALM;;AASAF,4CAAP,UAAyBO,QAAzB,EAA+C;AAC7C,WAAOA,QAAP;AACD,GAFM;;AAIAP,mCAAP,UAAgBQ,MAAhB,EAA+C;AAC7C;AACD,GAFM;;AAIAR,6BAAP;AACE,WAAO,EAAP;AACD,GAFM;;AAIAA,iCAAP,UAAcC,OAAd,EAA0C;AACxC,WAAO,KAAP;AACD,GAFM;;AAMAD,2CAAP,UAAwBO,QAAxB,EAA8C;AAC5C,WAAOA,QAAP;AACD,GAFM;;AAUAP,oCAAP,UACEC,OADF,EAEEE,UAFF,EAEmC;AAAjC;AAAAA,oBAAc,CAACF,OAAO,CAACE,UAAvB;AAAiC;;AAEjC,WAAO,KAAKM,IAAL,CAASC,sBACXT,OADW,GACJ;AACVU,YAAM,EAAEV,OAAO,CAACW,EAAR,IAAc,YADZ;AAEVT,gBAAU;AAFA,KADI,CAAT,CAAP;AAKD,GATM;;AAeAH,uCAAP,UACEC,OADF,EAEEE,UAFF,EAEmC;AAAjC;AAAAA,oBAAc,CAACF,OAAO,CAACE,UAAvB;AAAiC;;AAEjC,WAAO,KAAKM,IAAL,CAASC,sBACXT,OADW,GACJ;AACVY,WAAK,EAAE,KAAKC,cAAL,CAAoBb,OAAO,CAACc,QAA5B,EAAsCd,OAAO,CAACe,YAA9C,CADG;AAEVL,YAAM,EAAEV,OAAO,CAACW,EAFN;AAGVT,gBAAU;AAHA,KADI,CAAT,CAAP;AAMD,GAVM;;AAYAH,qCAAP,UAAiDiB,EAAjD,EAI6C;AAH3C,UAAE,QAAF;AAAA,QACAC,IAAI,UADJ;AAAA,QAEGjB,OAAO,cAHqC,cAGrC,CAFV;;AAIA,WAAO,KAAKkB,KAAL,CAAWC,MAAM,CAACC,MAAP,CAAcpB,OAAd,EAAuB;AACvCqB,YAAM,EAAEV,EAAE,IAAI,YADyB;AAEvCW,YAAM,EAAEL;AAF+B,KAAvB,CAAX,CAAP;AAID,GATM;;AAWAlB,wCAAP,UAAoDiB,EAApD,EAMgD;AAL9C,UAAE,QAAF;AAAA,QACAC,IAAI,UADJ;AAAA,QAEAH,QAAQ,cAFR;AAAA,QAGAC,YAAY,kBAHZ;AAAA,QAIGf,OAAO,cALwC,0CAKxC,CAJV;;AAMA,WAAO,KAAKkB,KAAL,CAAWC,MAAM,CAACC,MAAP,CAAcpB,OAAd,EAAuB;AACvCY,WAAK,EAAE,KAAKC,cAAL,CAAoBC,QAApB,EAA8BC,YAA9B,CADgC;AAEvCM,YAAM,EAAEV,EAF+B;AAGvCW,YAAM,EAAEL;AAH+B,KAAvB,CAAX,CAAP;AAKD,GAZM;;AAaT;AAAC,CA9JD","names":["wrap","getFragmentQueryDocument","ApolloCache","options","optimisticId","optimistic","performTransaction","update","transaction","document","object","read","__assign","rootId","id","query","getFragmentDoc","fragment","fragmentName","_a","data","write","Object","assign","dataId","result"],"sourceRoot":"","sources":["../../../src/cache/core/cache.ts"],"sourcesContent":["import { DocumentNode } from 'graphql';\nimport { wrap } from 'optimism';\n\nimport {\n  StoreObject,\n  Reference,\n  getFragmentQueryDocument,\n} from '../../utilities';\nimport { DataProxy } from './types/DataProxy';\nimport { Cache } from './types/Cache';\n\nexport type Transaction<T> = (c: ApolloCache<T>) => void;\n\nexport abstract class ApolloCache<TSerialized> implements DataProxy {\n  // required to implement\n  // core API\n  public abstract read<T, TVariables = any>(\n    query: Cache.ReadOptions<TVariables, T>,\n  ): T | null;\n  public abstract write<TResult = any, TVariables = any>(\n    write: Cache.WriteOptions<TResult, TVariables>,\n  ): Reference | undefined;\n  public abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\n  public abstract watch(watch: Cache.WatchOptions): () => void;\n\n  // Empty the cache and restart all current watches (unless\n  // options.discardWatches is true).\n  public abstract reset(options?: Cache.ResetOptions): Promise<void>;\n\n  // Remove whole objects from the cache by passing just options.id, or\n  // specific fields by passing options.field and/or options.args. If no\n  // options.args are provided, all fields matching options.field (even\n  // those with arguments) will be removed. Returns true iff any data was\n  // removed from the cache.\n  public abstract evict(options: Cache.EvictOptions): boolean;\n\n  // initializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(\n    serializedState: TSerialized,\n  ): ApolloCache<TSerialized>;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): TSerialized;\n\n  // Optimistic API\n\n  public abstract removeOptimistic(id: string): void;\n\n  // Transactional API\n\n  // The batch method is intended to replace/subsume both performTransaction\n  // and recordOptimisticTransaction, but performTransaction came first, so we\n  // provide a default batch implementation that's just another way of calling\n  // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n  // override the batch method to do more interesting things with its options.\n  public batch(options: Cache.BatchOptions<this>) {\n    const optimisticId =\n      typeof options.optimistic === \"string\" ? options.optimistic :\n      options.optimistic === false ? null : void 0;\n    this.performTransaction(options.update, optimisticId);\n  }\n\n  public abstract performTransaction(\n    transaction: Transaction<TSerialized>,\n    // Although subclasses may implement recordOptimisticTransaction\n    // however they choose, the default implementation simply calls\n    // performTransaction with a string as the second argument, allowing\n    // performTransaction to handle both optimistic and non-optimistic\n    // (broadcast-batching) transactions. Passing null for optimisticId is\n    // also allowed, and indicates that performTransaction should apply\n    // the transaction non-optimistically (ignoring optimistic data).\n    optimisticId?: string | null,\n  ): void;\n\n  public recordOptimisticTransaction(\n    transaction: Transaction<TSerialized>,\n    optimisticId: string,\n  ) {\n    this.performTransaction(transaction, optimisticId);\n  }\n\n  // Optional API\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  public identify(object: StoreObject | Reference): string | undefined {\n    return;\n  }\n\n  public gc(): string[] {\n    return [];\n  }\n\n  public modify(options: Cache.ModifyOptions): boolean {\n    return false;\n  }\n\n  // Experimental API\n\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // DataProxy API\n  /**\n   *\n   * @param options\n   * @param optimistic\n   */\n  public readQuery<QueryType, TVariables = any>(\n    options: Cache.ReadQueryOptions<QueryType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): QueryType | null {\n    return this.read({\n      ...options,\n      rootId: options.id || 'ROOT_QUERY',\n      optimistic,\n    });\n  }\n\n  // Make sure we compute the same (===) fragment query document every\n  // time we receive the same fragment in readFragment.\n  private getFragmentDoc = wrap(getFragmentQueryDocument);\n\n  public readFragment<FragmentType, TVariables = any>(\n    options: Cache.ReadFragmentOptions<FragmentType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): FragmentType | null {\n    return this.read({\n      ...options,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic,\n    });\n  }\n\n  public writeQuery<TData = any, TVariables = any>({\n    id,\n    data,\n    ...options\n  }: Cache.WriteQueryOptions<TData, TVariables>): Reference | undefined {\n    return this.write(Object.assign(options, {\n      dataId: id || 'ROOT_QUERY',\n      result: data,\n    }));\n  }\n\n  public writeFragment<TData = any, TVariables = any>({\n    id,\n    data,\n    fragment,\n    fragmentName,\n    ...options\n  }: Cache.WriteFragmentOptions<TData, TVariables>): Reference | undefined {\n    return this.write(Object.assign(options, {\n      query: this.getFragmentDoc(fragment, fragmentName),\n      dataId: id,\n      result: data,\n    }));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}