{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reverseResolveEnsAddresses = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst bytes = tslib_1.__importStar(require(\"@ethersproject/bytes\"));\n\nconst address_1 = require(\"@ethersproject/address\");\n\nconst FetchWithTimeout_1 = require(\"./FetchWithTimeout\");\n\nconst urls_1 = require(\"../constants/urls\");\n\nconst addresses_1 = require(\"../constants/addresses\");\n\nfunction parseHexNumber(hex) {\n  return parseInt(bytes.hexStripZeros(`0x${hex}`), 16);\n}\n\nfunction processReturnData(result) {\n  let pieces = [];\n\n  for (let i = 2; i < result.length; i += 64) {\n    pieces.push(result.substr(i, 64));\n  }\n\n  const numberEntries = parseHexNumber(pieces[1]);\n  const addresses = [];\n  const offsets = [];\n\n  for (let i = 0; i < numberEntries; i++) {\n    offsets.push(parseHexNumber(pieces[i + 2]));\n  }\n\n  for (let i = 0; i < numberEntries; i++) {\n    let pieceId = offsets[i] / 32 + 2;\n    let strLen = parseHexNumber(pieces[pieceId]);\n    const strHex = result.substr((pieceId + 1) * 64 + 2, strLen * 2);\n    addresses.push(Buffer.from(strHex, 'hex').toString());\n  }\n\n  return addresses;\n}\n\nasync function reverseResolveEnsAddresses(addresses, networkId, timeout) {\n  const mapping = addresses.reduce((last, at) => {\n    if (!address_1.isAddress(at)) {\n      return last;\n    }\n\n    last[at] = at;\n    return last;\n  }, {});\n  const mappingKeys = Object.keys(mapping);\n  const requestData = bytes.hexConcat(['0xcbf8b66c', bytes.hexConcat(['0x20', bytes.arrayify(mappingKeys.length), ...mappingKeys].map(el => bytes.zeroPad(el, 32)))]);\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      id: '1',\n      method: 'eth_call',\n      params: [{\n        to: addresses_1.ENS_REVERSE_LOOKUP_CONTRACT_BY_NETWORK[networkId],\n        data: requestData\n      }, 'latest']\n    })\n  };\n  const fetcher = new FetchWithTimeout_1.FetchWithTimeout(timeout, 'application/json');\n  const result = await fetcher.fetch(urls_1.RPC_URL_BY_NETWORK[networkId], requestOptions);\n  const json = await result.json();\n  const resultAddresses = processReturnData(json.result);\n\n  if (resultAddresses.length !== mappingKeys.length) {\n    throw new Error('Wrong address return length');\n  }\n\n  return mappingKeys.reduce((last, at, index) => {\n    last[at] = resultAddresses[index];\n    return last;\n  }, {});\n}\n\nexports.reverseResolveEnsAddresses = reverseResolveEnsAddresses;","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/@zoralabs/nft-hooks/dist/fetcher/EnsReverseFetcher.js"],"names":["Object","defineProperty","exports","value","reverseResolveEnsAddresses","tslib_1","require","bytes","__importStar","address_1","FetchWithTimeout_1","urls_1","addresses_1","parseHexNumber","hex","parseInt","hexStripZeros","processReturnData","result","pieces","i","length","push","substr","numberEntries","addresses","offsets","pieceId","strLen","strHex","Buffer","from","toString","networkId","timeout","mapping","reduce","last","at","isAddress","mappingKeys","keys","requestData","hexConcat","arrayify","map","el","zeroPad","requestOptions","method","headers","body","JSON","stringify","jsonrpc","id","params","to","ENS_REVERSE_LOOKUP_CONTRACT_BY_NETWORK","data","fetcher","FetchWithTimeout","fetch","RPC_URL_BY_NETWORK","json","resultAddresses","Error","index"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reverseResolveEnsAddresses = void 0;\nconst tslib_1 = require(\"tslib\");\nconst bytes = tslib_1.__importStar(require(\"@ethersproject/bytes\"));\nconst address_1 = require(\"@ethersproject/address\");\nconst FetchWithTimeout_1 = require(\"./FetchWithTimeout\");\nconst urls_1 = require(\"../constants/urls\");\nconst addresses_1 = require(\"../constants/addresses\");\nfunction parseHexNumber(hex) {\n    return parseInt(bytes.hexStripZeros(`0x${hex}`), 16);\n}\nfunction processReturnData(result) {\n    let pieces = [];\n    for (let i = 2; i < result.length; i += 64) {\n        pieces.push(result.substr(i, 64));\n    }\n    const numberEntries = parseHexNumber(pieces[1]);\n    const addresses = [];\n    const offsets = [];\n    for (let i = 0; i < numberEntries; i++) {\n        offsets.push(parseHexNumber(pieces[i + 2]));\n    }\n    for (let i = 0; i < numberEntries; i++) {\n        let pieceId = offsets[i] / 32 + 2;\n        let strLen = parseHexNumber(pieces[pieceId]);\n        const strHex = result.substr((pieceId + 1) * 64 + 2, strLen * 2);\n        addresses.push(Buffer.from(strHex, 'hex').toString());\n    }\n    return addresses;\n}\nasync function reverseResolveEnsAddresses(addresses, networkId, timeout) {\n    const mapping = addresses.reduce((last, at) => {\n        if (!address_1.isAddress(at)) {\n            return last;\n        }\n        last[at] = at;\n        return last;\n    }, {});\n    const mappingKeys = Object.keys(mapping);\n    const requestData = bytes.hexConcat([\n        '0xcbf8b66c',\n        bytes.hexConcat(['0x20', bytes.arrayify(mappingKeys.length), ...mappingKeys].map((el) => bytes.zeroPad(el, 32))),\n    ]);\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            jsonrpc: '2.0',\n            id: '1',\n            method: 'eth_call',\n            params: [\n                { to: addresses_1.ENS_REVERSE_LOOKUP_CONTRACT_BY_NETWORK[networkId], data: requestData },\n                'latest',\n            ],\n        }),\n    };\n    const fetcher = new FetchWithTimeout_1.FetchWithTimeout(timeout, 'application/json');\n    const result = await fetcher.fetch(urls_1.RPC_URL_BY_NETWORK[networkId], requestOptions);\n    const json = await result.json();\n    const resultAddresses = processReturnData(json.result);\n    if (resultAddresses.length !== mappingKeys.length) {\n        throw new Error('Wrong address return length');\n    }\n    return mappingKeys.reduce((last, at, index) => {\n        last[at] = resultAddresses[index];\n        return last;\n    }, {});\n}\nexports.reverseResolveEnsAddresses = reverseResolveEnsAddresses;\n"]},"metadata":{},"sourceType":"script"}