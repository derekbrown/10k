{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useZNFT = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst react_1 = require(\"react\");\n\nconst swr_1 = tslib_1.__importDefault(require(\"swr\"));\n\nconst NFTFetchContext_1 = require(\"../context/NFTFetchContext\");\n\nconst TransformFetchResults_1 = require(\"../fetcher/TransformFetchResults\");\n\nconst ExtractResultData_1 = require(\"../fetcher/ExtractResultData\");\n/**\n * Fetches on-chain NFT data and pricing for the given zNFT id\n * Deprecated: Please use useNFT instead.\n *\n * @param id id of zNFT to fetch blockchain information for\n * @param options SWR flags and an option to load currency info\n * @returns useNFTType hook results include loading, error, and chainNFT data.\n */\n\n\nfunction useZNFT(id) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const fetcher = react_1.useContext(NFTFetchContext_1.NFTFetchContext);\n  const {\n    loadCurrencyInfo = false,\n    refreshInterval,\n    initialData\n  } = options || {};\n  const nftData = swr_1.default(id ? ['loadZNFTDataUntransformed', id] : null, (_, id) => fetcher.loadZNFTDataUntransformed(id), {\n    refreshInterval,\n    dedupingInterval: 0\n  });\n  const currencyData = swr_1.default(nftData.data && nftData.data.pricing && loadCurrencyInfo ? ['loadCurrencies', ...ExtractResultData_1.getCurrenciesInUse(TransformFetchResults_1.addAuctionInformation(nftData.data.pricing))] : null, function (_) {\n    for (var _len = arguments.length, currencies = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      currencies[_key - 1] = arguments[_key];\n    }\n\n    return fetcher.loadCurrencies(currencies);\n  }, {\n    refreshInterval,\n    dedupingInterval: 0\n  });\n  let data;\n\n  if (nftData.data !== undefined) {\n    data = { ...nftData.data,\n      pricing: TransformFetchResults_1.addAuctionInformation(nftData.data.pricing, currencyData.data)\n    };\n  } else {\n    data = initialData;\n  }\n\n  return {\n    currencyLoaded: !!currencyData.data,\n    error: nftData.error,\n    data\n  };\n}\n\nexports.useZNFT = useZNFT;","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/@zoralabs/nft-hooks/dist/hooks/useZNFT.js"],"names":["Object","defineProperty","exports","value","useZNFT","tslib_1","require","react_1","swr_1","__importDefault","NFTFetchContext_1","TransformFetchResults_1","ExtractResultData_1","id","options","fetcher","useContext","NFTFetchContext","loadCurrencyInfo","refreshInterval","initialData","nftData","default","_","loadZNFTDataUntransformed","dedupingInterval","currencyData","data","pricing","getCurrenciesInUse","addAuctionInformation","currencies","loadCurrencies","undefined","currencyLoaded","error"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAME,KAAK,GAAGH,OAAO,CAACI,eAAR,CAAwBH,OAAO,CAAC,KAAD,CAA/B,CAAd;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,4BAAD,CAAjC;;AACA,MAAMK,uBAAuB,GAAGL,OAAO,CAAC,kCAAD,CAAvC;;AACA,MAAMM,mBAAmB,GAAGN,OAAO,CAAC,8BAAD,CAAnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,OAAT,CAAiBS,EAAjB,EAAmC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC/B,QAAMC,OAAO,GAAGR,OAAO,CAACS,UAAR,CAAmBN,iBAAiB,CAACO,eAArC,CAAhB;AACA,QAAM;AAAEC,IAAAA,gBAAgB,GAAG,KAArB;AAA4BC,IAAAA,eAA5B;AAA6CC,IAAAA;AAA7C,MAA6DN,OAAO,IAAI,EAA9E;AACA,QAAMO,OAAO,GAAGb,KAAK,CAACc,OAAN,CAAcT,EAAE,GAAG,CAAC,2BAAD,EAA8BA,EAA9B,CAAH,GAAuC,IAAvD,EAA6D,CAACU,CAAD,EAAIV,EAAJ,KAAWE,OAAO,CAACS,yBAAR,CAAkCX,EAAlC,CAAxE,EAA+G;AAAEM,IAAAA,eAAF;AAAmBM,IAAAA,gBAAgB,EAAE;AAArC,GAA/G,CAAhB;AACA,QAAMC,YAAY,GAAGlB,KAAK,CAACc,OAAN,CAAcD,OAAO,CAACM,IAAR,IAAgBN,OAAO,CAACM,IAAR,CAAaC,OAA7B,IAAwCV,gBAAxC,GAC7B,CACE,gBADF,EAEE,GAAGN,mBAAmB,CAACiB,kBAApB,CAAuClB,uBAAuB,CAACmB,qBAAxB,CAA8CT,OAAO,CAACM,IAAR,CAAaC,OAA3D,CAAvC,CAFL,CAD6B,GAK7B,IALe,EAKT,UAACL,CAAD;AAAA,sCAAOQ,UAAP;AAAOA,MAAAA,UAAP;AAAA;;AAAA,WAAsBhB,OAAO,CAACiB,cAAR,CAAuBD,UAAvB,CAAtB;AAAA,GALS,EAKiD;AAClEZ,IAAAA,eADkE;AAElEM,IAAAA,gBAAgB,EAAE;AAFgD,GALjD,CAArB;AASA,MAAIE,IAAJ;;AACA,MAAIN,OAAO,CAACM,IAAR,KAAiBM,SAArB,EAAgC;AAC5BN,IAAAA,IAAI,GAAG,EACH,GAAGN,OAAO,CAACM,IADR;AAEHC,MAAAA,OAAO,EAAEjB,uBAAuB,CAACmB,qBAAxB,CAA8CT,OAAO,CAACM,IAAR,CAAaC,OAA3D,EAAoEF,YAAY,CAACC,IAAjF;AAFN,KAAP;AAIH,GALD,MAMK;AACDA,IAAAA,IAAI,GAAGP,WAAP;AACH;;AACD,SAAO;AACHc,IAAAA,cAAc,EAAE,CAAC,CAACR,YAAY,CAACC,IAD5B;AAEHQ,IAAAA,KAAK,EAAEd,OAAO,CAACc,KAFZ;AAGHR,IAAAA;AAHG,GAAP;AAKH;;AACDzB,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useZNFT = void 0;\nconst tslib_1 = require(\"tslib\");\nconst react_1 = require(\"react\");\nconst swr_1 = tslib_1.__importDefault(require(\"swr\"));\nconst NFTFetchContext_1 = require(\"../context/NFTFetchContext\");\nconst TransformFetchResults_1 = require(\"../fetcher/TransformFetchResults\");\nconst ExtractResultData_1 = require(\"../fetcher/ExtractResultData\");\n/**\n * Fetches on-chain NFT data and pricing for the given zNFT id\n * Deprecated: Please use useNFT instead.\n *\n * @param id id of zNFT to fetch blockchain information for\n * @param options SWR flags and an option to load currency info\n * @returns useNFTType hook results include loading, error, and chainNFT data.\n */\nfunction useZNFT(id, options = {}) {\n    const fetcher = react_1.useContext(NFTFetchContext_1.NFTFetchContext);\n    const { loadCurrencyInfo = false, refreshInterval, initialData } = options || {};\n    const nftData = swr_1.default(id ? ['loadZNFTDataUntransformed', id] : null, (_, id) => fetcher.loadZNFTDataUntransformed(id), { refreshInterval, dedupingInterval: 0 });\n    const currencyData = swr_1.default(nftData.data && nftData.data.pricing && loadCurrencyInfo\n        ? [\n            'loadCurrencies',\n            ...ExtractResultData_1.getCurrenciesInUse(TransformFetchResults_1.addAuctionInformation(nftData.data.pricing)),\n        ]\n        : null, (_, ...currencies) => fetcher.loadCurrencies(currencies), {\n        refreshInterval,\n        dedupingInterval: 0,\n    });\n    let data;\n    if (nftData.data !== undefined) {\n        data = {\n            ...nftData.data,\n            pricing: TransformFetchResults_1.addAuctionInformation(nftData.data.pricing, currencyData.data),\n        };\n    }\n    else {\n        data = initialData;\n    }\n    return {\n        currencyLoaded: !!currencyData.data,\n        error: nftData.error,\n        data,\n    };\n}\nexports.useZNFT = useZNFT;\n"]},"metadata":{},"sourceType":"script"}