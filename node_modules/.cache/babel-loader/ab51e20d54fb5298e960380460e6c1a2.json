{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useContext, useState, useRef, useEffect } from 'react';\nimport { MutationData } from \"../data/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nexport function useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,MAA/B,EAAuCC,SAAvC,QAAwD,OAAxD;AAKA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,SAASC,gBAAT,QAAiC,qBAAjC;AAEA,OAAM,SAAUC,WAAV,CAMJC,QANI,EAOJC,OAPI,EAOsD;AAE1D,MAAMC,OAAO,GAAGT,UAAU,CAACK,gBAAgB,EAAjB,CAA1B;;AACM,WAAsBJ,QAAQ,CAAC;AAAES,UAAM,EAAE,KAAV;AAAiBC,WAAO,EAAE;AAA1B,GAAD,CAA9B;AAAA,MAACC,MAAM,QAAP;AAAA,MAASC,SAAS,QAAlB;;AACN,MAAMC,cAAc,GAAGN,OAAO,GAAEO,sBAAMP,OAAN,GAAa;AAAED,YAAQ;AAAV,GAAb,CAAF,GAA8B;AAAEA,YAAQ;AAAV,GAA5D;AAEA,MAAMS,eAAe,GAAGd,MAAM,EAA9B;;AACA,WAASe,kBAAT,GAA2B;AACzB,QAAI,CAACD,eAAe,CAACE,OAArB,EAA8B;AAC5BF,qBAAe,CAACE,OAAhB,GAA0B,IAAId,YAAJ,CAA8C;AACtEI,eAAO,EAAEM,cAD6D;AAEtEL,eAAO,SAF+D;AAGtEG,cAAM,QAHgE;AAItEC,iBAAS;AAJ6D,OAA9C,CAA1B;AAMD;;AACD,WAAOG,eAAe,CAACE,OAAvB;AACD;;AAED,MAAMC,YAAY,GAAGF,kBAAkB,EAAvC;AACAE,cAAY,CAACC,UAAb,CAAwBN,cAAxB;AACAK,cAAY,CAACV,OAAb,GAAuBA,OAAvB;AAEAN,WAAS,CAAC;AAAM,uBAAY,CAACkB,YAAb;AAA2B,GAAlC,CAAT;AAEA,SAAOF,YAAY,CAACG,OAAb,CAAqBV,MAArB,CAAP;AACD","names":["useContext","useState","useRef","useEffect","MutationData","getApolloContext","useMutation","mutation","options","context","called","loading","result","setResult","updatedOptions","__assign","mutationDataRef","getMutationDataRef","current","mutationData","setOptions","afterExecute","execute"],"sourceRoot":"","sources":["../../../src/react/hooks/useMutation.ts"],"sourcesContent":["import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { MutationHookOptions, MutationTuple } from '../types/types';\nimport { MutationData } from '../data';\nimport { ApolloCache, DefaultContext, OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables, TContext>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables, TContext>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n"]},"metadata":{},"sourceType":"module"}