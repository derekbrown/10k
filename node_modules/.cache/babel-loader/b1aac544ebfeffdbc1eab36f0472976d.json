{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { OperationData } from \"./OperationData.js\";\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy,\n      context: options.context\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var _this = this;\n\n    Promise.resolve().then(function () {\n      var onSubscriptionComplete = _this.getOptions().onSubscriptionComplete;\n\n      if (onSubscriptionComplete) onSubscriptionComplete();\n\n      _this.endSubscription();\n    });\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nexport { SubscriptionData };","map":{"version":3,"mappings":"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","names":["equal","OperationData","__extends","_a","options","context","setResult","_super","_this","initialize","SubscriptionData","result","getOptions","skip","cleanup","loading","error","undefined","data","variables","currentResult","refreshClient","isNew","getLoadingResult","shouldResubscribe","previousOptions","Object","keys","length","subscription","startSubscription","isMounted","endSubscription","currentObservable","query","client","subscribe","fetchPolicy","next","updateCurrentData","bind","updateError","complete","completeSubscription","onSubscriptionData","updateResult","subscriptionData","Promise","resolve","then","onSubscriptionComplete","unsubscribe"],"sourceRoot":"","sources":["../../../src/react/data/SubscriptionData.ts"],"sourcesContent":["import { equal } from '@wry/equality';\n\nimport { OperationData } from './OperationData';\nimport {\n  SubscriptionCurrentObservable,\n  SubscriptionDataOptions,\n  SubscriptionResult\n} from '../types/types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionDataOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionDataOptions<TData, TVariables>;\n    context: any;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !equal(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionDataOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy,\n      context: options.context,\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    } as SubscriptionResult<TData>;\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    // We have to defer this endSubscription call, because otherwise multiple\n    // subscriptions for the same component will cause infinite rendering.\n    // See https://github.com/apollographql/apollo-client/pull/7917\n    Promise.resolve().then(() => {\n      const { onSubscriptionComplete } = this.getOptions();\n      if (onSubscriptionComplete) onSubscriptionComplete();\n      this.endSubscription();\n    });\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}