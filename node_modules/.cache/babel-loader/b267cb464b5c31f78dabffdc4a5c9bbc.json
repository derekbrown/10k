{"ast":null,"code":"import * as React from 'react';\nimport { styleSingleton } from 'react-style-singleton';\nimport { fullWidthClassName, zeroRightClassName, noScrollbarsClassName, removedBarSizeVariable } from './constants';\nimport { getGapWidth } from './utils';\nvar Style = styleSingleton(); // important tip - once we measure scrollBar width and remove them\n// we could not repeat this operation\n// thus we are using style-singleton - only the first \"yet correct\" style will be applied.\n\nvar getStyles = function (_a, allowRelative, gapMode, important) {\n  var left = _a.left,\n      top = _a.top,\n      right = _a.right,\n      gap = _a.gap;\n\n  if (gapMode === void 0) {\n    gapMode = 'margin';\n  }\n\n  return \"\\n  .\".concat(noScrollbarsClassName, \" {\\n   overflow: hidden \").concat(important, \";\\n   padding-right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  body {\\n    overflow: hidden \").concat(important, \";\\n    \").concat([allowRelative && \"position: relative \".concat(important, \";\"), gapMode === 'margin' && \"\\n    padding-left: \".concat(left, \"px;\\n    padding-top: \").concat(top, \"px;\\n    padding-right: \").concat(right, \"px;\\n    margin-left:0;\\n    margin-top:0;\\n    margin-right: \").concat(gap, \"px \").concat(important, \";\\n    \"), gapMode === 'padding' && \"padding-right: \".concat(gap, \"px \").concat(important, \";\")].filter(Boolean).join(''), \"\\n  }\\n  \\n  .\").concat(zeroRightClassName, \" {\\n    right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  \\n  .\").concat(fullWidthClassName, \" {\\n    margin-right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  \\n  .\").concat(zeroRightClassName, \" .\").concat(zeroRightClassName, \" {\\n    right: 0 \").concat(important, \";\\n  }\\n  \\n  .\").concat(fullWidthClassName, \" .\").concat(fullWidthClassName, \" {\\n    margin-right: 0 \").concat(important, \";\\n  }\\n  \\n  body {\\n    \").concat(removedBarSizeVariable, \": \").concat(gap, \"px;\\n  }\\n\");\n};\n/**\n * Removes page scrollbar and blocks page scroll when mounted\n */\n\n\nexport var RemoveScrollBar = function (props) {\n  var _a = React.useState(getGapWidth(props.gapMode)),\n      gap = _a[0],\n      setGap = _a[1];\n\n  React.useEffect(function () {\n    setGap(getGapWidth(props.gapMode));\n  }, [props.gapMode]);\n  var noRelative = props.noRelative,\n      noImportant = props.noImportant,\n      _b = props.gapMode,\n      gapMode = _b === void 0 ? 'margin' : _b;\n  return React.createElement(Style, {\n    styles: getStyles(gap, !noRelative, gapMode, !noImportant ? '!important' : '')\n  });\n};","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/react-remove-scroll-bar/dist/es2015/component.js"],"names":["React","styleSingleton","fullWidthClassName","zeroRightClassName","noScrollbarsClassName","removedBarSizeVariable","getGapWidth","Style","getStyles","_a","allowRelative","gapMode","important","left","top","right","gap","concat","filter","Boolean","join","RemoveScrollBar","props","useState","setGap","useEffect","noRelative","noImportant","_b","createElement","styles"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { styleSingleton } from 'react-style-singleton';\nimport { fullWidthClassName, zeroRightClassName, noScrollbarsClassName, removedBarSizeVariable } from './constants';\nimport { getGapWidth } from './utils';\nvar Style = styleSingleton();\n// important tip - once we measure scrollBar width and remove them\n// we could not repeat this operation\n// thus we are using style-singleton - only the first \"yet correct\" style will be applied.\nvar getStyles = function (_a, allowRelative, gapMode, important) {\n    var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;\n    if (gapMode === void 0) { gapMode = 'margin'; }\n    return \"\\n  .\".concat(noScrollbarsClassName, \" {\\n   overflow: hidden \").concat(important, \";\\n   padding-right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  body {\\n    overflow: hidden \").concat(important, \";\\n    \").concat([\n        allowRelative && \"position: relative \".concat(important, \";\"),\n        gapMode === 'margin' &&\n            \"\\n    padding-left: \".concat(left, \"px;\\n    padding-top: \").concat(top, \"px;\\n    padding-right: \").concat(right, \"px;\\n    margin-left:0;\\n    margin-top:0;\\n    margin-right: \").concat(gap, \"px \").concat(important, \";\\n    \"),\n        gapMode === 'padding' && \"padding-right: \".concat(gap, \"px \").concat(important, \";\"),\n    ]\n        .filter(Boolean)\n        .join(''), \"\\n  }\\n  \\n  .\").concat(zeroRightClassName, \" {\\n    right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  \\n  .\").concat(fullWidthClassName, \" {\\n    margin-right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  \\n  .\").concat(zeroRightClassName, \" .\").concat(zeroRightClassName, \" {\\n    right: 0 \").concat(important, \";\\n  }\\n  \\n  .\").concat(fullWidthClassName, \" .\").concat(fullWidthClassName, \" {\\n    margin-right: 0 \").concat(important, \";\\n  }\\n  \\n  body {\\n    \").concat(removedBarSizeVariable, \": \").concat(gap, \"px;\\n  }\\n\");\n};\n/**\n * Removes page scrollbar and blocks page scroll when mounted\n */\nexport var RemoveScrollBar = function (props) {\n    var _a = React.useState(getGapWidth(props.gapMode)), gap = _a[0], setGap = _a[1];\n    React.useEffect(function () {\n        setGap(getGapWidth(props.gapMode));\n    }, [props.gapMode]);\n    var noRelative = props.noRelative, noImportant = props.noImportant, _b = props.gapMode, gapMode = _b === void 0 ? 'margin' : _b;\n    return React.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? '!important' : '') });\n};\n"]},"metadata":{},"sourceType":"module"}