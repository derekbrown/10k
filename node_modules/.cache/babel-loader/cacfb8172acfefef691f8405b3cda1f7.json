{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FetchWithTimeout = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst cross_fetch_1 = tslib_1.__importDefault(require(\"cross-fetch\"));\n\nconst node_abort_controller_1 = tslib_1.__importDefault(require(\"node-abort-controller\"));\n\nconst RequestError_1 = require(\"./RequestError\");\n/**\n * Simple Fetch wrapper that enables a timeout.\n * Allows for showing an error state for slow-to-load IPFS files\n */\n\n\nclass FetchWithTimeout {\n  constructor() {\n    let timeoutDuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5000;\n    let contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    this.controller = new node_abort_controller_1.default();\n    this.expectedContentType = contentType;\n    this.timeoutDuration = timeoutDuration; // Bind context to class\n\n    this.fetch = this.fetch.bind(this);\n  }\n\n  async fetch(url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _a;\n\n    const controller = this.controller;\n    const response = await cross_fetch_1.default(url, { ...options,\n      signal: this.controller.signal\n    });\n    setTimeout(() => controller.abort(), this.timeoutDuration);\n\n    if (response.status !== 200) {\n      throw new RequestError_1.RequestError(`Request Status = ${response.status}`);\n    }\n\n    if (this.expectedContentType && !((_a = response.headers.get('content-type')) === null || _a === void 0 ? void 0 : _a.startsWith(this.expectedContentType))) {\n      throw new RequestError_1.RequestError('Reponse Content Type incorrect');\n    }\n\n    return response;\n  }\n\n}\n\nexports.FetchWithTimeout = FetchWithTimeout;","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/@zoralabs/nft-hooks/dist/fetcher/FetchWithTimeout.js"],"names":["Object","defineProperty","exports","value","FetchWithTimeout","tslib_1","require","cross_fetch_1","__importDefault","node_abort_controller_1","RequestError_1","constructor","timeoutDuration","contentType","undefined","controller","default","expectedContentType","fetch","bind","url","options","_a","response","signal","setTimeout","abort","status","RequestError","headers","get","startsWith"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,aAAa,GAAGF,OAAO,CAACG,eAAR,CAAwBF,OAAO,CAAC,aAAD,CAA/B,CAAtB;;AACA,MAAMG,uBAAuB,GAAGJ,OAAO,CAACG,eAAR,CAAwBF,OAAO,CAAC,uBAAD,CAA/B,CAAhC;;AACA,MAAMI,cAAc,GAAGJ,OAAO,CAAC,gBAAD,CAA9B;AACA;AACA;AACA;AACA;;;AACA,MAAMF,gBAAN,CAAuB;AACnBO,EAAAA,WAAW,GAAkD;AAAA,QAAjDC,eAAiD,uEAA/B,IAA+B;AAAA,QAAzBC,WAAyB,uEAAXC,SAAW;AACzD,SAAKC,UAAL,GAAkB,IAAIN,uBAAuB,CAACO,OAA5B,EAAlB;AACA,SAAKC,mBAAL,GAA2BJ,WAA3B;AACA,SAAKD,eAAL,GAAuBA,eAAvB,CAHyD,CAIzD;;AACA,SAAKM,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACH;;AACU,QAALD,KAAK,CAACE,GAAD,EAAoB;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAC3B,QAAIC,EAAJ;;AACA,UAAMP,UAAU,GAAG,KAAKA,UAAxB;AACA,UAAMQ,QAAQ,GAAG,MAAMhB,aAAa,CAACS,OAAd,CAAsBI,GAAtB,EAA2B,EAC9C,GAAGC,OAD2C;AAE9CG,MAAAA,MAAM,EAAE,KAAKT,UAAL,CAAgBS;AAFsB,KAA3B,CAAvB;AAIAC,IAAAA,UAAU,CAAC,MAAMV,UAAU,CAACW,KAAX,EAAP,EAA2B,KAAKd,eAAhC,CAAV;;AACA,QAAIW,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AACzB,YAAM,IAAIjB,cAAc,CAACkB,YAAnB,CAAiC,oBAAmBL,QAAQ,CAACI,MAAO,EAApE,CAAN;AACH;;AACD,QAAI,KAAKV,mBAAL,IACA,EAAE,CAACK,EAAE,GAAGC,QAAQ,CAACM,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAAN,MAAgD,IAAhD,IAAwDR,EAAE,KAAK,KAAK,CAApE,GAAwE,KAAK,CAA7E,GAAiFA,EAAE,CAACS,UAAH,CAAc,KAAKd,mBAAnB,CAAnF,CADJ,EACiI;AAC7H,YAAM,IAAIP,cAAc,CAACkB,YAAnB,CAAgC,gCAAhC,CAAN;AACH;;AACD,WAAOL,QAAP;AACH;;AAxBkB;;AA0BvBrB,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FetchWithTimeout = void 0;\nconst tslib_1 = require(\"tslib\");\nconst cross_fetch_1 = tslib_1.__importDefault(require(\"cross-fetch\"));\nconst node_abort_controller_1 = tslib_1.__importDefault(require(\"node-abort-controller\"));\nconst RequestError_1 = require(\"./RequestError\");\n/**\n * Simple Fetch wrapper that enables a timeout.\n * Allows for showing an error state for slow-to-load IPFS files\n */\nclass FetchWithTimeout {\n    constructor(timeoutDuration = 5000, contentType = undefined) {\n        this.controller = new node_abort_controller_1.default();\n        this.expectedContentType = contentType;\n        this.timeoutDuration = timeoutDuration;\n        // Bind context to class\n        this.fetch = this.fetch.bind(this);\n    }\n    async fetch(url, options = {}) {\n        var _a;\n        const controller = this.controller;\n        const response = await cross_fetch_1.default(url, {\n            ...options,\n            signal: this.controller.signal,\n        });\n        setTimeout(() => controller.abort(), this.timeoutDuration);\n        if (response.status !== 200) {\n            throw new RequestError_1.RequestError(`Request Status = ${response.status}`);\n        }\n        if (this.expectedContentType &&\n            !((_a = response.headers.get('content-type')) === null || _a === void 0 ? void 0 : _a.startsWith(this.expectedContentType))) {\n            throw new RequestError_1.RequestError('Reponse Content Type incorrect');\n        }\n        return response;\n    }\n}\nexports.FetchWithTimeout = FetchWithTimeout;\n"]},"metadata":{},"sourceType":"script"}