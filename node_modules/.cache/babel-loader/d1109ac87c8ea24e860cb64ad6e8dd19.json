{"ast":null,"code":"import { __assign } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { useContext, useState, useRef, useEffect, useReducer } from 'react';\nimport { SubscriptionData } from \"../data/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { useAfterFastRefresh } from \"./utils/useAfterFastRefresh.js\";\nexport function useSubscription(subscription, options) {\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      forceUpdate = _a[1];\n\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _b = useState({\n    loading: !updatedOptions.skip,\n    error: void 0,\n    data: void 0\n  }),\n      result = _b[0],\n      setResult = _b[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  if (__DEV__) {\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return function () {\n      subscriptionData.cleanup();\n      subscriptionDataRef.current = void 0;\n    };\n  }, []);\n  return subscriptionData.execute(result);\n}","map":{"version":3,"mappings":";AAAA,OAAO,kCAAP;AAEA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,MAA/B,EAAuCC,SAAvC,EAAkDC,UAAlD,QAAoE,OAApE;AAKA,SAASC,gBAAT,QAAiC,kBAAjC;AAEA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,mBAAT,QAAoC,gCAApC;AAEA,OAAM,SAAUC,eAAV,CACJC,YADI,EAEJC,OAFI,EAEgD;AAE9C,WAAkBN,UAAU,CAAC,aAAC;AAAI,YAAC,GAAG,CAAJ;AAAK,GAAX,EAAa,CAAb,CAA5B;AAAA,MAAGO,WAAW,QAAd;;AACN,MAAMC,OAAO,GAAGZ,UAAU,CAACM,gBAAgB,EAAjB,CAA1B;AACA,MAAMO,cAAc,GAAGH,OAAO,GAC3BI,sBAAMJ,OAAN,GAAa;AAAED,gBAAY;AAAd,GAAb,CAD2B,GAE1B;AAAEA,gBAAY;AAAd,GAFJ;;AAGM,WAAsBR,QAAQ,CAAC;AACnCc,WAAO,EAAE,CAACF,cAAc,CAACG,IADU;AAEnCC,SAAK,EAAE,KAAK,CAFuB;AAGnCC,QAAI,EAAE,KAAK;AAHwB,GAAD,CAA9B;AAAA,MAACC,MAAM,QAAP;AAAA,MAASC,SAAS,QAAlB;;AAMN,MAAMC,mBAAmB,GAAGnB,MAAM,EAAlC;;AACA,WAASoB,sBAAT,GAA+B;AAC7B,QAAI,CAACD,mBAAmB,CAACE,OAAzB,EAAkC;AAChCF,yBAAmB,CAACE,OAApB,GAA8B,IAAIlB,gBAAJ,CAAwC;AACpEK,eAAO,EAAEG,cAD2D;AAEpED,eAAO,SAF6D;AAGpEQ,iBAAS;AAH2D,OAAxC,CAA9B;AAKD;;AACD,WAAOC,mBAAmB,CAACE,OAA3B;AACD;;AAED,MAAMC,gBAAgB,GAAGF,sBAAsB,EAA/C;AACAE,kBAAgB,CAACC,UAAjB,CAA4BZ,cAA5B,EAA4C,IAA5C;AACAW,kBAAgB,CAACZ,OAAjB,GAA2BA,OAA3B;;AAEA,MAAIc,OAAJ,EAAa;AAEXnB,uBAAmB,CAACI,WAAD,CAAnB;AACD;;AAEDR,WAAS,CAAC;AAAM,2BAAgB,CAACwB,YAAjB;AAA+B,GAAtC,CAAT;AACAxB,WAAS,CAAC;AACR,WAAO;AACLqB,sBAAgB,CAACI,OAAjB;AACAP,yBAAmB,CAACE,OAApB,GAA8B,KAAK,CAAnC;AACD,KAHD;AAID,GALQ,EAKN,EALM,CAAT;AAOA,SAAOC,gBAAgB,CAACK,OAAjB,CAAyBV,MAAzB,CAAP;AACD","names":["useContext","useState","useRef","useEffect","useReducer","SubscriptionData","getApolloContext","useAfterFastRefresh","useSubscription","subscription","options","forceUpdate","context","updatedOptions","__assign","loading","skip","error","data","result","setResult","subscriptionDataRef","getSubscriptionDataRef","current","subscriptionData","setOptions","__DEV__","afterExecute","cleanup","execute"],"sourceRoot":"","sources":["../../../src/react/hooks/useSubscription.ts"],"sourcesContent":["import '../../utilities/globals';\n\nimport { useContext, useState, useRef, useEffect, useReducer } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { SubscriptionHookOptions } from '../types/types';\nimport { SubscriptionData } from '../data';\nimport { OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\nimport { useAfterFastRefresh } from './utils/useAfterFastRefresh';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: void 0,\n    data: void 0,\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  if (__DEV__) {\n    // ensure we run an update after refreshing so that we can resubscribe\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => {\n    return () => {\n      subscriptionData.cleanup();\n      subscriptionDataRef.current = void 0;\n    };\n  }, []);\n\n  return subscriptionData.execute(result);\n}\n"]},"metadata":{},"sourceType":"module"}