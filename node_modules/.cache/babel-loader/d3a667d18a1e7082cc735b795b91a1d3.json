{"ast":null,"code":"import { isArray, isPlainObject, isSymbol } from 'is-what';\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nfunction concatArrays(originVal, newVal) {\n  if (isArray(originVal) && isArray(newVal)) {\n    // concat logic\n    return originVal.concat(newVal);\n  }\n\n  return newVal; // always return newVal as fallback!!\n}\n\nfunction assignProp(carry, key, newVal, originalObject) {\n  const propType = {}.propertyIsEnumerable.call(originalObject, key) ? 'enumerable' : 'nonenumerable';\n  if (propType === 'enumerable') carry[key] = newVal;\n\n  if (propType === 'nonenumerable') {\n    Object.defineProperty(carry, key, {\n      value: newVal,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    });\n  }\n}\n\nfunction mergeRecursively(origin, newComer, compareFn) {\n  // always return newComer if its not an object\n  if (!isPlainObject(newComer)) return newComer; // define newObject to merge all values upon\n\n  let newObject = {};\n\n  if (isPlainObject(origin)) {\n    const props = Object.getOwnPropertyNames(origin);\n    const symbols = Object.getOwnPropertySymbols(origin);\n    newObject = [...props, ...symbols].reduce((carry, key) => {\n      const targetVal = origin[key];\n\n      if (!isSymbol(key) && !Object.getOwnPropertyNames(newComer).includes(key) || isSymbol(key) && !Object.getOwnPropertySymbols(newComer).includes(key)) {\n        assignProp(carry, key, targetVal, origin);\n      }\n\n      return carry;\n    }, {});\n  } // newObject has all properties that newComer hasn't\n\n\n  const props = Object.getOwnPropertyNames(newComer);\n  const symbols = Object.getOwnPropertySymbols(newComer);\n  const result = [...props, ...symbols].reduce((carry, key) => {\n    // re-define the origin and newComer as targetVal and newVal\n    let newVal = newComer[key];\n    const targetVal = isPlainObject(origin) ? origin[key] : undefined; // When newVal is an object do the merge recursively\n\n    if (targetVal !== undefined && isPlainObject(newVal)) {\n      newVal = mergeRecursively(targetVal, newVal, compareFn);\n    }\n\n    const propToAssign = compareFn ? compareFn(targetVal, newVal, key) : newVal;\n    assignProp(carry, key, propToAssign, newComer);\n    return carry;\n  }, newObject);\n  return result;\n}\n/**\r\n * Merge anything recursively.\r\n * Objects get merged, special objects (classes etc.) are re-assigned \"as is\".\r\n * Basic types overwrite objects or other basic types.\r\n * @param object\r\n * @param otherObjects\r\n */\n\n\nfunction merge(object) {\n  for (var _len = arguments.length, otherObjects = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    otherObjects[_key - 1] = arguments[_key];\n  }\n\n  return otherObjects.reduce((result, newComer) => {\n    return mergeRecursively(result, newComer);\n  }, object);\n}\n\nfunction mergeAndCompare(compareFn, object) {\n  for (var _len2 = arguments.length, otherObjects = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    otherObjects[_key2 - 2] = arguments[_key2];\n  }\n\n  return otherObjects.reduce((result, newComer) => {\n    return mergeRecursively(result, newComer, compareFn);\n  }, object);\n}\n\nfunction mergeAndConcat(object) {\n  for (var _len3 = arguments.length, otherObjects = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    otherObjects[_key3 - 1] = arguments[_key3];\n  }\n\n  return otherObjects.reduce((result, newComer) => {\n    return mergeRecursively(result, newComer, concatArrays);\n  }, object);\n}\n\nexport { concatArrays, merge, mergeAndCompare, mergeAndConcat };","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/merge-anything/dist/index.es.js"],"names":["isArray","isPlainObject","isSymbol","concatArrays","originVal","newVal","concat","assignProp","carry","key","originalObject","propType","propertyIsEnumerable","call","Object","defineProperty","value","enumerable","writable","configurable","mergeRecursively","origin","newComer","compareFn","newObject","props","getOwnPropertyNames","symbols","getOwnPropertySymbols","reduce","targetVal","includes","result","undefined","propToAssign","merge","object","otherObjects","mergeAndCompare","mergeAndConcat"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,aAAlB,EAAiCC,QAAjC,QAAiD,SAAjD;AAEA;;AACA,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,MAAjC,EAAyC;AACrC,MAAIL,OAAO,CAACI,SAAD,CAAP,IAAsBJ,OAAO,CAACK,MAAD,CAAjC,EAA2C;AACvC;AACA,WAAOD,SAAS,CAACE,MAAV,CAAiBD,MAAjB,CAAP;AACH;;AACD,SAAOA,MAAP,CALqC,CAKtB;AAClB;;AAED,SAASE,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgCJ,MAAhC,EAAwCK,cAAxC,EAAwD;AACpD,QAAMC,QAAQ,GAAG,GAAGC,oBAAH,CAAwBC,IAAxB,CAA6BH,cAA7B,EAA6CD,GAA7C,IACX,YADW,GAEX,eAFN;AAGA,MAAIE,QAAQ,KAAK,YAAjB,EACIH,KAAK,CAACC,GAAD,CAAL,GAAaJ,MAAb;;AACJ,MAAIM,QAAQ,KAAK,eAAjB,EAAkC;AAC9BG,IAAAA,MAAM,CAACC,cAAP,CAAsBP,KAAtB,EAA6BC,GAA7B,EAAkC;AAC9BO,MAAAA,KAAK,EAAEX,MADuB;AAE9BY,MAAAA,UAAU,EAAE,KAFkB;AAG9BC,MAAAA,QAAQ,EAAE,IAHoB;AAI9BC,MAAAA,YAAY,EAAE;AAJgB,KAAlC;AAMH;AACJ;;AACD,SAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,QAAlC,EAA4CC,SAA5C,EAAuD;AACnD;AACA,MAAI,CAACtB,aAAa,CAACqB,QAAD,CAAlB,EACI,OAAOA,QAAP,CAH+C,CAInD;;AACA,MAAIE,SAAS,GAAG,EAAhB;;AACA,MAAIvB,aAAa,CAACoB,MAAD,CAAjB,EAA2B;AACvB,UAAMI,KAAK,GAAGX,MAAM,CAACY,mBAAP,CAA2BL,MAA3B,CAAd;AACA,UAAMM,OAAO,GAAGb,MAAM,CAACc,qBAAP,CAA6BP,MAA7B,CAAhB;AACAG,IAAAA,SAAS,GAAG,CAAC,GAAGC,KAAJ,EAAW,GAAGE,OAAd,EAAuBE,MAAvB,CAA8B,CAACrB,KAAD,EAAQC,GAAR,KAAgB;AACtD,YAAMqB,SAAS,GAAGT,MAAM,CAACZ,GAAD,CAAxB;;AACA,UAAK,CAACP,QAAQ,CAACO,GAAD,CAAT,IAAkB,CAACK,MAAM,CAACY,mBAAP,CAA2BJ,QAA3B,EAAqCS,QAArC,CAA8CtB,GAA9C,CAApB,IACCP,QAAQ,CAACO,GAAD,CAAR,IAAiB,CAACK,MAAM,CAACc,qBAAP,CAA6BN,QAA7B,EAAuCS,QAAvC,CAAgDtB,GAAhD,CADvB,EAC8E;AAC1EF,QAAAA,UAAU,CAACC,KAAD,EAAQC,GAAR,EAAaqB,SAAb,EAAwBT,MAAxB,CAAV;AACH;;AACD,aAAOb,KAAP;AACH,KAPW,EAOT,EAPS,CAAZ;AAQH,GAjBkD,CAkBnD;;;AACA,QAAMiB,KAAK,GAAGX,MAAM,CAACY,mBAAP,CAA2BJ,QAA3B,CAAd;AACA,QAAMK,OAAO,GAAGb,MAAM,CAACc,qBAAP,CAA6BN,QAA7B,CAAhB;AACA,QAAMU,MAAM,GAAG,CAAC,GAAGP,KAAJ,EAAW,GAAGE,OAAd,EAAuBE,MAAvB,CAA8B,CAACrB,KAAD,EAAQC,GAAR,KAAgB;AACzD;AACA,QAAIJ,MAAM,GAAGiB,QAAQ,CAACb,GAAD,CAArB;AACA,UAAMqB,SAAS,GAAG7B,aAAa,CAACoB,MAAD,CAAb,GAAwBA,MAAM,CAACZ,GAAD,CAA9B,GAAsCwB,SAAxD,CAHyD,CAIzD;;AACA,QAAIH,SAAS,KAAKG,SAAd,IAA2BhC,aAAa,CAACI,MAAD,CAA5C,EAAsD;AAClDA,MAAAA,MAAM,GAAGe,gBAAgB,CAACU,SAAD,EAAYzB,MAAZ,EAAoBkB,SAApB,CAAzB;AACH;;AACD,UAAMW,YAAY,GAAGX,SAAS,GAAGA,SAAS,CAACO,SAAD,EAAYzB,MAAZ,EAAoBI,GAApB,CAAZ,GAAuCJ,MAArE;AACAE,IAAAA,UAAU,CAACC,KAAD,EAAQC,GAAR,EAAayB,YAAb,EAA2BZ,QAA3B,CAAV;AACA,WAAOd,KAAP;AACH,GAXc,EAWZgB,SAXY,CAAf;AAYA,SAAOQ,MAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,KAAT,CAAeC,MAAf,EAAwC;AAAA,oCAAdC,YAAc;AAAdA,IAAAA,YAAc;AAAA;;AACpC,SAAOA,YAAY,CAACR,MAAb,CAAoB,CAACG,MAAD,EAASV,QAAT,KAAsB;AAC7C,WAAOF,gBAAgB,CAACY,MAAD,EAASV,QAAT,CAAvB;AACH,GAFM,EAEJc,MAFI,CAAP;AAGH;;AACD,SAASE,eAAT,CAAyBf,SAAzB,EAAoCa,MAApC,EAA6D;AAAA,qCAAdC,YAAc;AAAdA,IAAAA,YAAc;AAAA;;AACzD,SAAOA,YAAY,CAACR,MAAb,CAAoB,CAACG,MAAD,EAASV,QAAT,KAAsB;AAC7C,WAAOF,gBAAgB,CAACY,MAAD,EAASV,QAAT,EAAmBC,SAAnB,CAAvB;AACH,GAFM,EAEJa,MAFI,CAAP;AAGH;;AACD,SAASG,cAAT,CAAwBH,MAAxB,EAAiD;AAAA,qCAAdC,YAAc;AAAdA,IAAAA,YAAc;AAAA;;AAC7C,SAAOA,YAAY,CAACR,MAAb,CAAoB,CAACG,MAAD,EAASV,QAAT,KAAsB;AAC7C,WAAOF,gBAAgB,CAACY,MAAD,EAASV,QAAT,EAAmBnB,YAAnB,CAAvB;AACH,GAFM,EAEJiC,MAFI,CAAP;AAGH;;AAED,SAASjC,YAAT,EAAuBgC,KAAvB,EAA8BG,eAA9B,EAA+CC,cAA/C","sourcesContent":["import { isArray, isPlainObject, isSymbol } from 'is-what';\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nfunction concatArrays(originVal, newVal) {\r\n    if (isArray(originVal) && isArray(newVal)) {\r\n        // concat logic\r\n        return originVal.concat(newVal);\r\n    }\r\n    return newVal; // always return newVal as fallback!!\r\n}\n\nfunction assignProp(carry, key, newVal, originalObject) {\r\n    const propType = {}.propertyIsEnumerable.call(originalObject, key)\r\n        ? 'enumerable'\r\n        : 'nonenumerable';\r\n    if (propType === 'enumerable')\r\n        carry[key] = newVal;\r\n    if (propType === 'nonenumerable') {\r\n        Object.defineProperty(carry, key, {\r\n            value: newVal,\r\n            enumerable: false,\r\n            writable: true,\r\n            configurable: true,\r\n        });\r\n    }\r\n}\r\nfunction mergeRecursively(origin, newComer, compareFn) {\r\n    // always return newComer if its not an object\r\n    if (!isPlainObject(newComer))\r\n        return newComer;\r\n    // define newObject to merge all values upon\r\n    let newObject = {};\r\n    if (isPlainObject(origin)) {\r\n        const props = Object.getOwnPropertyNames(origin);\r\n        const symbols = Object.getOwnPropertySymbols(origin);\r\n        newObject = [...props, ...symbols].reduce((carry, key) => {\r\n            const targetVal = origin[key];\r\n            if ((!isSymbol(key) && !Object.getOwnPropertyNames(newComer).includes(key)) ||\r\n                (isSymbol(key) && !Object.getOwnPropertySymbols(newComer).includes(key))) {\r\n                assignProp(carry, key, targetVal, origin);\r\n            }\r\n            return carry;\r\n        }, {});\r\n    }\r\n    // newObject has all properties that newComer hasn't\r\n    const props = Object.getOwnPropertyNames(newComer);\r\n    const symbols = Object.getOwnPropertySymbols(newComer);\r\n    const result = [...props, ...symbols].reduce((carry, key) => {\r\n        // re-define the origin and newComer as targetVal and newVal\r\n        let newVal = newComer[key];\r\n        const targetVal = isPlainObject(origin) ? origin[key] : undefined;\r\n        // When newVal is an object do the merge recursively\r\n        if (targetVal !== undefined && isPlainObject(newVal)) {\r\n            newVal = mergeRecursively(targetVal, newVal, compareFn);\r\n        }\r\n        const propToAssign = compareFn ? compareFn(targetVal, newVal, key) : newVal;\r\n        assignProp(carry, key, propToAssign, newComer);\r\n        return carry;\r\n    }, newObject);\r\n    return result;\r\n}\r\n/**\r\n * Merge anything recursively.\r\n * Objects get merged, special objects (classes etc.) are re-assigned \"as is\".\r\n * Basic types overwrite objects or other basic types.\r\n * @param object\r\n * @param otherObjects\r\n */\r\nfunction merge(object, ...otherObjects) {\r\n    return otherObjects.reduce((result, newComer) => {\r\n        return mergeRecursively(result, newComer);\r\n    }, object);\r\n}\r\nfunction mergeAndCompare(compareFn, object, ...otherObjects) {\r\n    return otherObjects.reduce((result, newComer) => {\r\n        return mergeRecursively(result, newComer, compareFn);\r\n    }, object);\r\n}\r\nfunction mergeAndConcat(object, ...otherObjects) {\r\n    return otherObjects.reduce((result, newComer) => {\r\n        return mergeRecursively(result, newComer, concatArrays);\r\n    }, object);\r\n}\n\nexport { concatArrays, merge, mergeAndCompare, mergeAndConcat };\n"]},"metadata":{},"sourceType":"module"}