{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useNFTMetadata = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst react_1 = require(\"react\");\n\nconst swr_1 = tslib_1.__importDefault(require(\"swr\"));\n\nconst NFTFetchContext_1 = require(\"../context/NFTFetchContext\");\n/**\n * Fetches NFT Metadata from IPFS.\n * This hook is cached, it can be called\n *  multiple times with no issue on one page.\n *\n * @param uri URI of metadata to fetch\n * @returns @type useNFTMetadataType\n */\n\n\nfunction useNFTMetadata(uri, initialData) {\n  const fetcher = react_1.useContext(NFTFetchContext_1.NFTFetchContext);\n  const {\n    error,\n    data\n  } = swr_1.default(uri ? ['loadMetadata', uri] : null, (_, uri) => fetcher.fetchIPFSMetadata(uri), {\n    initialData\n  });\n  return {\n    loading: !error && !data,\n    error,\n    metadata: data\n  };\n}\n\nexports.useNFTMetadata = useNFTMetadata;","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/@zoralabs/nft-hooks/dist/hooks/useNFTMetadata.js"],"names":["Object","defineProperty","exports","value","useNFTMetadata","tslib_1","require","react_1","swr_1","__importDefault","NFTFetchContext_1","uri","initialData","fetcher","useContext","NFTFetchContext","error","data","default","_","fetchIPFSMetadata","loading","metadata"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAME,KAAK,GAAGH,OAAO,CAACI,eAAR,CAAwBH,OAAO,CAAC,KAAD,CAA/B,CAAd;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,4BAAD,CAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,cAAT,CAAwBO,GAAxB,EAA6BC,WAA7B,EAA0C;AACtC,QAAMC,OAAO,GAAGN,OAAO,CAACO,UAAR,CAAmBJ,iBAAiB,CAACK,eAArC,CAAhB;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkBT,KAAK,CAACU,OAAN,CAAcP,GAAG,GAAG,CAAC,cAAD,EAAiBA,GAAjB,CAAH,GAA2B,IAA5C,EAAkD,CAACQ,CAAD,EAAIR,GAAJ,KAAYE,OAAO,CAACO,iBAAR,CAA0BT,GAA1B,CAA9D,EAA8F;AAAEC,IAAAA;AAAF,GAA9F,CAAxB;AACA,SAAO;AACHS,IAAAA,OAAO,EAAE,CAACL,KAAD,IAAU,CAACC,IADjB;AAEHD,IAAAA,KAFG;AAGHM,IAAAA,QAAQ,EAAEL;AAHP,GAAP;AAKH;;AACDf,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useNFTMetadata = void 0;\nconst tslib_1 = require(\"tslib\");\nconst react_1 = require(\"react\");\nconst swr_1 = tslib_1.__importDefault(require(\"swr\"));\nconst NFTFetchContext_1 = require(\"../context/NFTFetchContext\");\n/**\n * Fetches NFT Metadata from IPFS.\n * This hook is cached, it can be called\n *  multiple times with no issue on one page.\n *\n * @param uri URI of metadata to fetch\n * @returns @type useNFTMetadataType\n */\nfunction useNFTMetadata(uri, initialData) {\n    const fetcher = react_1.useContext(NFTFetchContext_1.NFTFetchContext);\n    const { error, data } = swr_1.default(uri ? ['loadMetadata', uri] : null, (_, uri) => fetcher.fetchIPFSMetadata(uri), { initialData });\n    return {\n        loading: !error && !data,\n        error,\n        metadata: data,\n    };\n}\nexports.useNFTMetadata = useNFTMetadata;\n"]},"metadata":{},"sourceType":"script"}