{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TOKENS_WITHOUT_AUCTIONS = exports.ACTIVE_AUCTIONS_QUERY = exports.BY_IDS = exports.BY_OWNER = void 0;\n\nconst graphql_request_1 = require(\"graphql-request\");\n\nconst MEDIA_FRAGMENTS = graphql_request_1.gql`\n  fragment IndexerTokenPart on Token {\n    id\n    tokenId\n    owner\n    address\n    tokenContract {\n      name\n      symbol\n      address\n      supportsMetadata\n    }\n    tokenURI\n    minter\n    metadata {\n      json\n    }\n    mintTransferEvent {\n      transactionHash\n      blockTimestamp\n      blockNumber\n    }\n    media {\n      contentURI\n      contentHash\n      metadataHash\n      metadataURI\n      ownerBidShare\n      creatorBidShare\n    }\n  }\n  fragment IndexerAuctionPart on Auction {\n    winner\n    lastBidAmount\n    duration\n    tokenId\n    auctionId\n    tokenContract\n    reservePrice\n    firstBidTime\n    expiresAt\n    tokenOwner\n    curator\n    curatorFee\n    curatorFeePercentage\n    canceledEvent {\n      id\n    }\n    endedEvent {\n      id\n    }\n    bidEvents {\n      id\n      value\n      sender\n      transactionHash\n    }\n  }\n  fragment IndexerAuctionWithToken on Auction {\n    ...IndexerAuctionPart\n    token {\n      ...IndexerTokenPart\n    }\n  }\n`;\nconst BASE_FRAGMENTS = graphql_request_1.gql`\n  ${MEDIA_FRAGMENTS}\n  fragment IndexerTokenWithAuction on Token {\n    ...IndexerTokenPart\n    auctions(where: { _and: [{ _not: { canceledEvent: {} } }] }) {\n      ...IndexerAuctionPart\n    }\n  }\n`; // Get list of nfts owned by user from contracts\n\nexports.BY_OWNER = graphql_request_1.gql`\n  ${BASE_FRAGMENTS}\n  query byOwner(\n    $addressQueryPart: String_comparison_exp!\n    $owner: String\n    $offset: Int\n    $limit: Int\n  ) @cached {\n    Token(\n      limit: $limit\n      offset: $offset\n      where: {\n        address: $addressQueryPart\n        _or: [\n          { owner: { _eq: $owner } }\n          {\n            auctions: {\n              _and: [\n                { _not: { endedEvent: {} } }\n                { _not: { canceledEvent: {} } }\n                { tokenOwner: { _eq: $owner } }\n              ]\n            }\n          }\n        ]\n      }\n    ) {\n      ...IndexerTokenWithAuction\n    }\n  }\n`;\nexports.BY_IDS = graphql_request_1.gql`\n  ${BASE_FRAGMENTS}\n  query byIds($ids: [String!]) @cached {\n    Token(where: { id: { _in: $ids } }) {\n      ...IndexerTokenWithAuction\n    }\n  }\n`;\nexports.ACTIVE_AUCTIONS_QUERY = graphql_request_1.gql`\n  ${BASE_FRAGMENTS}\n  query activeAuctionsQuery($andQuery: [Token_bool_exp!], $limit: Int, $offset: Int)\n  @cached {\n    Token(\n      where: { _and: $andQuery }\n      order_by: [\n        { auctions_aggregate: { max: { lastBidAmount: asc_nulls_last } } }\n        { auctions_aggregate: { count: desc } }\n        { tokenId: asc }\n      ]\n      limit: $limit\n      offset: $offset\n    ) {\n      ...IndexerTokenWithAuction\n    }\n  }\n`;\nexports.TOKENS_WITHOUT_AUCTIONS = graphql_request_1.gql`\n  ${MEDIA_FRAGMENTS}\n  query tokensWithoutAuctions($addresses: [String!], $limit: Int, $offset: Int) @cached {\n    Token(\n      where: {\n        address: { _in: $addresses }\n        _not: { auctions: {} }\n        owner: { _neq: \"0x0000000000000000000000000000000000000000\" }\n      }\n      limit: $limit\n      offset: $offset\n    ) {\n      ...IndexerTokenPart\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/@zoralabs/nft-hooks/dist/graph-queries/zora-indexer.js"],"names":["Object","defineProperty","exports","value","TOKENS_WITHOUT_AUCTIONS","ACTIVE_AUCTIONS_QUERY","BY_IDS","BY_OWNER","graphql_request_1","require","MEDIA_FRAGMENTS","gql","BASE_FRAGMENTS"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,uBAAR,GAAkCF,OAAO,CAACG,qBAAR,GAAgCH,OAAO,CAACI,MAAR,GAAiBJ,OAAO,CAACK,QAAR,GAAmB,KAAK,CAA3G;;AACA,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,iBAAD,CAAjC;;AACA,MAAMC,eAAe,GAAGF,iBAAiB,CAACG,GAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhEA;AAiEA,MAAMC,cAAc,GAAGJ,iBAAiB,CAACG,GAAK;AAC9C,IAAID,eAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,CARA,C,CASA;;AACAR,OAAO,CAACK,QAAR,GAAmBC,iBAAiB,CAACG,GAAK;AAC1C,IAAIC,cAAe;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA9BA;AA+BAV,OAAO,CAACI,MAAR,GAAiBE,iBAAiB,CAACG,GAAK;AACxC,IAAIC,cAAe;AACnB;AACA;AACA;AACA;AACA;AACA,CAPA;AAQAV,OAAO,CAACG,qBAAR,GAAgCG,iBAAiB,CAACG,GAAK;AACvD,IAAIC,cAAe;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBA;AAkBAV,OAAO,CAACE,uBAAR,GAAkCI,iBAAiB,CAACG,GAAK;AACzD,IAAID,eAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TOKENS_WITHOUT_AUCTIONS = exports.ACTIVE_AUCTIONS_QUERY = exports.BY_IDS = exports.BY_OWNER = void 0;\nconst graphql_request_1 = require(\"graphql-request\");\nconst MEDIA_FRAGMENTS = graphql_request_1.gql `\n  fragment IndexerTokenPart on Token {\n    id\n    tokenId\n    owner\n    address\n    tokenContract {\n      name\n      symbol\n      address\n      supportsMetadata\n    }\n    tokenURI\n    minter\n    metadata {\n      json\n    }\n    mintTransferEvent {\n      transactionHash\n      blockTimestamp\n      blockNumber\n    }\n    media {\n      contentURI\n      contentHash\n      metadataHash\n      metadataURI\n      ownerBidShare\n      creatorBidShare\n    }\n  }\n  fragment IndexerAuctionPart on Auction {\n    winner\n    lastBidAmount\n    duration\n    tokenId\n    auctionId\n    tokenContract\n    reservePrice\n    firstBidTime\n    expiresAt\n    tokenOwner\n    curator\n    curatorFee\n    curatorFeePercentage\n    canceledEvent {\n      id\n    }\n    endedEvent {\n      id\n    }\n    bidEvents {\n      id\n      value\n      sender\n      transactionHash\n    }\n  }\n  fragment IndexerAuctionWithToken on Auction {\n    ...IndexerAuctionPart\n    token {\n      ...IndexerTokenPart\n    }\n  }\n`;\nconst BASE_FRAGMENTS = graphql_request_1.gql `\n  ${MEDIA_FRAGMENTS}\n  fragment IndexerTokenWithAuction on Token {\n    ...IndexerTokenPart\n    auctions(where: { _and: [{ _not: { canceledEvent: {} } }] }) {\n      ...IndexerAuctionPart\n    }\n  }\n`;\n// Get list of nfts owned by user from contracts\nexports.BY_OWNER = graphql_request_1.gql `\n  ${BASE_FRAGMENTS}\n  query byOwner(\n    $addressQueryPart: String_comparison_exp!\n    $owner: String\n    $offset: Int\n    $limit: Int\n  ) @cached {\n    Token(\n      limit: $limit\n      offset: $offset\n      where: {\n        address: $addressQueryPart\n        _or: [\n          { owner: { _eq: $owner } }\n          {\n            auctions: {\n              _and: [\n                { _not: { endedEvent: {} } }\n                { _not: { canceledEvent: {} } }\n                { tokenOwner: { _eq: $owner } }\n              ]\n            }\n          }\n        ]\n      }\n    ) {\n      ...IndexerTokenWithAuction\n    }\n  }\n`;\nexports.BY_IDS = graphql_request_1.gql `\n  ${BASE_FRAGMENTS}\n  query byIds($ids: [String!]) @cached {\n    Token(where: { id: { _in: $ids } }) {\n      ...IndexerTokenWithAuction\n    }\n  }\n`;\nexports.ACTIVE_AUCTIONS_QUERY = graphql_request_1.gql `\n  ${BASE_FRAGMENTS}\n  query activeAuctionsQuery($andQuery: [Token_bool_exp!], $limit: Int, $offset: Int)\n  @cached {\n    Token(\n      where: { _and: $andQuery }\n      order_by: [\n        { auctions_aggregate: { max: { lastBidAmount: asc_nulls_last } } }\n        { auctions_aggregate: { count: desc } }\n        { tokenId: asc }\n      ]\n      limit: $limit\n      offset: $offset\n    ) {\n      ...IndexerTokenWithAuction\n    }\n  }\n`;\nexports.TOKENS_WITHOUT_AUCTIONS = graphql_request_1.gql `\n  ${MEDIA_FRAGMENTS}\n  query tokensWithoutAuctions($addresses: [String!], $limit: Int, $offset: Int) @cached {\n    Token(\n      where: {\n        address: { _in: $addresses }\n        _not: { auctions: {} }\n        owner: { _neq: \"0x0000000000000000000000000000000000000000\" }\n      }\n      limit: $limit\n      offset: $offset\n    ) {\n      ...IndexerTokenPart\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"script"}