{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { print } from 'graphql';\nvar defaultHttpOptions = {\n  includeQuery: true,\n  includeExtensions: false\n};\nvar defaultHeaders = {\n  accept: '*/*',\n  'content-type': 'application/json'\n};\nvar defaultOptions = {\n  method: 'POST'\n};\nexport var fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions\n};\nexport var selectHttpOptionsAndBody = function (operation, fallbackConfig) {\n  var configs = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    configs[_i - 2] = arguments[_i];\n  }\n\n  var options = __assign(__assign({}, fallbackConfig.options), {\n    headers: fallbackConfig.headers,\n    credentials: fallbackConfig.credentials\n  });\n\n  var http = fallbackConfig.http || {};\n  configs.forEach(function (config) {\n    options = __assign(__assign(__assign({}, options), config.options), {\n      headers: __assign(__assign({}, options.headers), headersToLowerCase(config.headers))\n    });\n    if (config.credentials) options.credentials = config.credentials;\n    http = __assign(__assign({}, http), config.http);\n  });\n  var operationName = operation.operationName,\n      extensions = operation.extensions,\n      variables = operation.variables,\n      query = operation.query;\n  var body = {\n    operationName: operationName,\n    variables: variables\n  };\n  if (http.includeExtensions) body.extensions = extensions;\n  if (http.includeQuery) body.query = print(query);\n  return {\n    options: options,\n    body: body\n  };\n};\n\nfunction headersToLowerCase(headers) {\n  if (headers) {\n    var normalized_1 = Object.create(null);\n    Object.keys(Object(headers)).forEach(function (name) {\n      normalized_1[name.toLowerCase()] = headers[name];\n    });\n    return normalized_1;\n  }\n\n  return headers;\n}","map":{"version":3,"mappings":";AAAA,SAASA,KAAT,QAAsB,SAAtB;AAiFA,IAAMC,kBAAkB,GAAqB;AAC3CC,cAAY,EAAE,IAD6B;AAE3CC,mBAAiB,EAAE;AAFwB,CAA7C;AAKA,IAAMC,cAAc,GAAG;AAErBC,QAAM,EAAE,KAFa;AAGrB,kBAAgB;AAHK,CAAvB;AAMA,IAAMC,cAAc,GAAG;AACrBC,QAAM,EAAE;AADa,CAAvB;AAIA,OAAO,IAAMC,kBAAkB,GAAG;AAChCC,MAAI,EAAER,kBAD0B;AAEhCS,SAAO,EAAEN,cAFuB;AAGhCO,SAAO,EAAEL;AAHuB,CAA3B;AAMP,OAAO,IAAMM,wBAAwB,GAAG,UACtCC,SADsC,EAEtCC,cAFsC,EAEZ;AAC1B;;OAAA,yCAA6B;AAA7BC;;;AAEA,MAAIJ,OAAO,yBACNG,cAAc,CAACH,OADT,GACgB;AACzBD,WAAO,EAAEI,cAAc,CAACJ,OADC;AAEzBM,eAAW,EAAEF,cAAc,CAACE;AAFH,GADhB,CAAX;;AAKA,MAAIP,IAAI,GAAqBK,cAAc,CAACL,IAAf,IAAuB,EAApD;AAMAM,SAAO,CAACE,OAAR,CAAgB,kBAAM;AACpBN,WAAO,kCACFA,OADE,GAEFO,MAAM,CAACP,OAFL,GAEY;AACjBD,aAAO,wBACFC,OAAO,CAACD,OADN,GAEFS,kBAAkB,CAACD,MAAM,CAACR,OAAR,CAFhB;AADU,KAFZ,CAAP;AAQA,QAAIQ,MAAM,CAACF,WAAX,EAAwBL,OAAO,CAACK,WAAR,GAAsBE,MAAM,CAACF,WAA7B;AAExBP,QAAI,yBACCA,IADD,GAECS,MAAM,CAACT,IAFR,CAAJ;AAID,GAfD;AAkBQ,mBAAa,GAAmCI,SAAS,cAAzD;AAAA,MAAeO,UAAU,GAAuBP,SAAS,WAAzD;AAAA,MAA2BQ,SAAS,GAAYR,SAAS,UAAzD;AAAA,MAAsCS,KAAK,GAAKT,SAAS,MAAzD;AACR,MAAMU,IAAI,GAAS;AAAEC,iBAAa,eAAf;AAAiBH,aAAS;AAA1B,GAAnB;AAEA,MAAIZ,IAAI,CAACN,iBAAT,EAA6BoB,IAAY,CAACH,UAAb,GAA0BA,UAA1B;AAG7B,MAAIX,IAAI,CAACP,YAAT,EAAwBqB,IAAY,CAACD,KAAb,GAAqBtB,KAAK,CAACsB,KAAD,CAA1B;AAExB,SAAO;AACLX,WAAO,SADF;AAELY,QAAI;AAFC,GAAP;AAID,CA9CM;;AAgDP,SAASJ,kBAAT,CACET,OADF,EAC6C;AAE3C,MAAIA,OAAJ,EAAa;AACX,QAAMe,YAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAnB;AACAD,UAAM,CAACE,IAAP,CAAYF,MAAM,CAAChB,OAAD,CAAlB,EAA6BO,OAA7B,CAAqC,gBAAI;AACvCQ,kBAAU,CAACI,IAAI,CAACC,WAAL,EAAD,CAAV,GAAiCpB,OAAO,CAACmB,IAAD,CAAxC;AACD,KAFD;AAGA,WAAOJ,YAAP;AACD;;AACD,SAAOf,OAAP;AACD","names":["print","defaultHttpOptions","includeQuery","includeExtensions","defaultHeaders","accept","defaultOptions","method","fallbackHttpConfig","http","headers","options","selectHttpOptionsAndBody","operation","fallbackConfig","configs","credentials","forEach","config","headersToLowerCase","extensions","variables","query","body","operationName","normalized_1","Object","create","keys","name","toLowerCase"],"sourceRoot":"","sources":["../../../src/link/http/selectHttpOptionsAndBody.ts"],"sourcesContent":["import { print } from 'graphql';\n\nimport { Operation } from '../core';\n\nexport interface UriFunction {\n  (operation: Operation): string;\n}\n\nexport interface Body {\n  query?: string;\n  operationName?: string;\n  variables?: Record<string, any>;\n  extensions?: Record<string, any>;\n}\n\nexport interface HttpOptions {\n  /**\n   * The URI to use when fetching operations.\n   *\n   * Defaults to '/graphql'.\n   */\n  uri?: string | UriFunction;\n\n  /**\n   * Passes the extensions field to your graphql server.\n   *\n   * Defaults to false.\n   */\n  includeExtensions?: boolean;\n\n  /**\n   * A `fetch`-compatible API to use when making requests.\n   */\n  fetch?: WindowOrWorkerGlobalScope['fetch'];\n\n  /**\n   * An object representing values to be sent as headers on the request.\n   */\n  headers?: any;\n\n  /**\n   * The credentials policy you want to use for the fetch call.\n   */\n  credentials?: string;\n\n  /**\n   * Any overrides of the fetch options argument to pass to the fetch call.\n   */\n  fetchOptions?: any;\n\n  /**\n   * If set to true, use the HTTP GET method for query operations. Mutations\n   * will still use the method specified in fetchOptions.method (which defaults\n   * to POST).\n   */\n  useGETForQueries?: boolean;\n\n  /**\n   * If set to true, the default behavior of stripping unused variables\n   * from the request will be disabled.\n   *\n   * Unused variables are likely to trigger server-side validation errors,\n   * per https://spec.graphql.org/draft/#sec-All-Variables-Used, but this\n   * includeUnusedVariables option can be useful if your server deviates\n   * from the GraphQL specification by not strictly enforcing that rule.\n   */\n  includeUnusedVariables?: boolean;\n}\n\nexport interface HttpQueryOptions {\n  includeQuery?: boolean;\n  includeExtensions?: boolean;\n}\n\nexport interface HttpConfig {\n  http?: HttpQueryOptions;\n  options?: any;\n  headers?: any;\n  credentials?: any;\n}\n\nconst defaultHttpOptions: HttpQueryOptions = {\n  includeQuery: true,\n  includeExtensions: false,\n};\n\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: '*/*',\n  'content-type': 'application/json',\n};\n\nconst defaultOptions = {\n  method: 'POST',\n};\n\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions,\n};\n\nexport const selectHttpOptionsAndBody = (\n  operation: Operation,\n  fallbackConfig: HttpConfig,\n  ...configs: Array<HttpConfig>\n) => {\n  let options: HttpConfig & Record<string, any> = {\n    ...fallbackConfig.options,\n    headers: fallbackConfig.headers,\n    credentials: fallbackConfig.credentials,\n  };\n  let http: HttpQueryOptions = fallbackConfig.http || {};\n\n  /*\n   * use the rest of the configs to populate the options\n   * configs later in the list will overwrite earlier fields\n   */\n  configs.forEach(config => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...headersToLowerCase(config.headers),\n      },\n    };\n    if (config.credentials) options.credentials = config.credentials;\n\n    http = {\n      ...http,\n      ...config.http,\n    };\n  });\n\n  //The body depends on the http options\n  const { operationName, extensions, variables, query } = operation;\n  const body: Body = { operationName, variables };\n\n  if (http.includeExtensions) (body as any).extensions = extensions;\n\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) (body as any).query = print(query);\n\n  return {\n    options,\n    body,\n  };\n};\n\nfunction headersToLowerCase(\n  headers: Record<string, string> | undefined\n): typeof headers {\n  if (headers) {\n    const normalized = Object.create(null);\n    Object.keys(Object(headers)).forEach(name => {\n      normalized[name.toLowerCase()] = headers[name];\n    });\n    return normalized;\n  }\n  return headers;\n}\n"]},"metadata":{},"sourceType":"module"}