{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { wrap } from 'optimism';\nimport { isField, resultKeyNameFromField, isReference, makeReference, createFragmentMap, shouldInclude, addTypenameToDocument, getDefaultValues, getFragmentDefinitions, getMainDefinition, getQueryDefinition, mergeDeepArray, getFragmentFromSelection, maybeDeepFreeze, isNonNullObject, canUseWeakMap, compact } from \"../../utilities/index.js\";\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching } from \"./entityStore.js\";\nimport { getTypenameFromStoreObject, shouldCanonizeResults } from \"./helpers.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { canonicalStringify, ObjectCanon } from \"./object-canon.js\";\n;\n\nfunction missingFromInvariant(err, context) {\n  return new MissingFieldError(err.message, context.path.slice(), context.query, context.variables);\n}\n\nfunction execSelectionSetKeyArgs(options) {\n  return [options.selectionSet, options.objectOrReference, options.context, options.context.canonizeResults];\n}\n\nvar StoreReader = function () {\n  function StoreReader(config) {\n    var _this = this;\n\n    this.knownResults = new (canUseWeakMap ? WeakMap : Map)();\n    this.config = compact(config, {\n      addTypename: config.addTypename !== false,\n      canonizeResults: shouldCanonizeResults(config)\n    });\n    this.canon = config.canon || new ObjectCanon();\n    this.executeSelectionSet = wrap(function (options) {\n      var _a;\n\n      var canonizeResults = options.context.canonizeResults;\n      var peekArgs = execSelectionSetKeyArgs(options);\n      peekArgs[3] = !canonizeResults;\n\n      var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n\n      if (other) {\n        if (canonizeResults) {\n          return __assign(__assign({}, other), {\n            result: _this.canon.admit(other.result)\n          });\n        }\n\n        return other;\n      }\n\n      maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n      return _this.execSelectionSetImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      keyArgs: execSelectionSetKeyArgs,\n      makeCacheKey: function (selectionSet, parent, context, canonizeResults) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n        }\n      }\n    });\n    this.executeSubSelectedArray = wrap(function (options) {\n      maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n      return _this.execSubSelectedArrayImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: function (_a) {\n        var field = _a.field,\n            array = _a.array,\n            context = _a.context;\n\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(field, array, context.varString);\n        }\n      }\n    });\n  }\n\n  StoreReader.prototype.resetCanon = function () {\n    this.canon = new ObjectCanon();\n  };\n\n  StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n    var store = _a.store,\n        query = _a.query,\n        _b = _a.rootId,\n        rootId = _b === void 0 ? 'ROOT_QUERY' : _b,\n        variables = _a.variables,\n        _c = _a.returnPartialData,\n        returnPartialData = _c === void 0 ? true : _c,\n        _d = _a.canonizeResults,\n        canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n    var policies = this.config.cache.policies;\n    variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);\n    var rootRef = makeReference(rootId);\n    var execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: {\n        store: store,\n        query: query,\n        policies: policies,\n        variables: variables,\n        varString: canonicalStringify(variables),\n        canonizeResults: canonizeResults,\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n        path: []\n      }\n    });\n    var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n\n    if (hasMissingFields && !returnPartialData) {\n      throw execResult.missing[0];\n    }\n\n    return {\n      result: execResult.result,\n      missing: execResult.missing,\n      complete: !hasMissingFields\n    };\n  };\n\n  StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {\n    if (supportsResultCaching(context.store) && this.knownResults.get(result) === selectionSet) {\n      var latest = this.executeSelectionSet.peek(selectionSet, parent, context, this.canon.isKnown(result));\n\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  StoreReader.prototype.execSelectionSetImpl = function (_a) {\n    var _this = this;\n\n    var selectionSet = _a.selectionSet,\n        objectOrReference = _a.objectOrReference,\n        enclosingRef = _a.enclosingRef,\n        context = _a.context;\n\n    if (isReference(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: this.canon.empty,\n        missing: [missingFromInvariant(__DEV__ ? new InvariantError(\"Dangling reference to missing \" + objectOrReference.__ref + \" object\") : new InvariantError(5), context)]\n      };\n    }\n\n    var variables = context.variables,\n        policies = context.policies,\n        store = context.store;\n    var objectsToMerge = [];\n    var finalResult = {\n      result: null\n    };\n    var typename = store.getFieldValue(objectOrReference, \"__typename\");\n\n    if (this.config.addTypename && typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n      objectsToMerge.push({\n        __typename: typename\n      });\n    }\n\n    function getMissing() {\n      return finalResult.missing || (finalResult.missing = []);\n    }\n\n    function handleMissing(result) {\n      var _a;\n\n      if (result.missing) (_a = getMissing()).push.apply(_a, result.missing);\n      return result.result;\n    }\n\n    var workSet = new Set(selectionSet.selections);\n    workSet.forEach(function (selection) {\n      var _a;\n\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        var fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference\n        }, context);\n        var resultName = resultKeyNameFromField(selection);\n        context.path.push(resultName);\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            getMissing().push(missingFromInvariant(__DEV__ ? new InvariantError(\"Can't find field '\" + selection.name.value + \"' on \" + (isReference(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2))) : new InvariantError(6), context));\n          }\n        } else if (Array.isArray(fieldValue)) {\n          fieldValue = handleMissing(_this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            enclosingRef: enclosingRef,\n            context: context\n          }));\n        } else if (!selection.selectionSet) {\n          if (context.canonizeResults) {\n            fieldValue = _this.canon.pass(fieldValue);\n          }\n        } else if (fieldValue != null) {\n          fieldValue = handleMissing(_this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue,\n            enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n            context: context\n          }));\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push((_a = {}, _a[resultName] = fieldValue, _a));\n        }\n\n        invariant(context.path.pop() === resultName);\n      } else {\n        var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n    var merged = mergeDeepArray(objectsToMerge);\n    finalResult.result = context.canonizeResults ? this.canon.admit(merged) : maybeDeepFreeze(merged);\n    this.knownResults.set(finalResult.result, selectionSet);\n    return finalResult;\n  };\n\n  StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n    var _this = this;\n\n    var field = _a.field,\n        array = _a.array,\n        enclosingRef = _a.enclosingRef,\n        context = _a.context;\n    var missing;\n\n    function handleMissing(childResult, i) {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push.apply(missing, childResult.missing);\n      }\n\n      invariant(context.path.pop() === i);\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map(function (item, i) {\n      if (item === null) {\n        return null;\n      }\n\n      context.path.push(i);\n\n      if (Array.isArray(item)) {\n        return handleMissing(_this.executeSubSelectedArray({\n          field: field,\n          array: item,\n          enclosingRef: enclosingRef,\n          context: context\n        }), i);\n      }\n\n      if (field.selectionSet) {\n        return handleMissing(_this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          enclosingRef: isReference(item) ? item : enclosingRef,\n          context: context\n        }), i);\n      }\n\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      invariant(context.path.pop() === i);\n      return item;\n    });\n    return {\n      result: context.canonizeResults ? this.canon.admit(array) : array,\n      missing: missing\n    };\n  };\n\n  return StoreReader;\n}();\n\nexport { StoreReader };\n\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n  if (!field.selectionSet) {\n    var workSet_1 = new Set([fieldValue]);\n    workSet_1.forEach(function (value) {\n      if (isNonNullObject(value)) {\n        __DEV__ ? invariant(!isReference(value), \"Missing selection set for object of type \" + getTypenameFromStoreObject(store, value) + \" returned for query field \" + field.name.value) : invariant(!isReference(value), 7);\n        Object.values(value).forEach(workSet_1.add, workSet_1);\n      }\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["invariant","InvariantError","wrap","isField","resultKeyNameFromField","isReference","makeReference","createFragmentMap","shouldInclude","addTypenameToDocument","getDefaultValues","getFragmentDefinitions","getMainDefinition","getQueryDefinition","mergeDeepArray","getFragmentFromSelection","maybeDeepFreeze","isNonNullObject","canUseWeakMap","compact","maybeDependOnExistenceOfEntity","supportsResultCaching","getTypenameFromStoreObject","shouldCanonizeResults","MissingFieldError","canonicalStringify","ObjectCanon","missingFromInvariant","err","context","message","path","slice","query","variables","execSelectionSetKeyArgs","options","selectionSet","objectOrReference","canonizeResults","config","WeakMap","Map","addTypename","canon","executeSelectionSet","peekArgs","other","peek","apply","_a","result","_this","admit","store","enclosingRef","__ref","execSelectionSetImpl","max","resultCacheMaxSize","keyArgs","makeCacheKey","parent","varString","executeSubSelectedArray","execSubSelectedArrayImpl","field","array","StoreReader","_b","rootId","_c","returnPartialData","_d","policies","cache","rootRef","execResult","fragmentMap","hasMissingFields","missing","length","complete","knownResults","get","latest","isKnown","rootTypenamesById","has","empty","__DEV__","objectsToMerge","finalResult","typename","getFieldValue","rootIdsByTypename","push","__typename","getMissing","handleMissing","workSet","Set","selections","forEach","selection","fieldValue","readField","fieldName","name","value","from","resultName","added","JSON","stringify","Array","isArray","pass","pop","fragment","fragmentMatches","add","merged","set","childResult","i","filter","canRead","map","item","assertSelectionSetForIdValue","workSet_1","Object","values"],"sourceRoot":"","sources":["../../../src/cache/inmemory/readFromStore.ts"],"sourcesContent":["import { invariant, InvariantError } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  FieldNode,\n  SelectionSetNode,\n} from 'graphql';\nimport { wrap, OptimisticWrapperFunction } from 'optimism';\n\nimport {\n  isField,\n  resultKeyNameFromField,\n  Reference,\n  isReference,\n  makeReference,\n  StoreObject,\n  createFragmentMap,\n  FragmentMap,\n  shouldInclude,\n  addTypenameToDocument,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getMainDefinition,\n  getQueryDefinition,\n  mergeDeepArray,\n  getFragmentFromSelection,\n  maybeDeepFreeze,\n  isNonNullObject,\n  canUseWeakMap,\n  compact,\n} from '../../utilities';\nimport { Cache } from '../core/types/Cache';\nimport {\n  DiffQueryAgainstStoreOptions,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from './types';\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching } from './entityStore';\nimport { getTypenameFromStoreObject, shouldCanonizeResults } from './helpers';\nimport { Policies } from './policies';\nimport { InMemoryCache } from './inMemoryCache';\nimport { MissingFieldError } from '../core/types/common';\nimport { canonicalStringify, ObjectCanon } from './object-canon';\n\nexport type VariableMap = { [name: string]: any };\n\ninterface ReadContext extends ReadMergeModifyContext {\n  query: DocumentNode;\n  policies: Policies;\n  canonizeResults: boolean;\n  fragmentMap: FragmentMap;\n  path: (string | number)[];\n};\n\nexport type ExecResult<R = any> = {\n  result: R;\n  missing?: MissingFieldError[];\n};\n\nfunction missingFromInvariant(\n  err: InvariantError,\n  context: ReadContext,\n) {\n  return new MissingFieldError(\n    err.message,\n    context.path.slice(),\n    context.query,\n    context.variables,\n  );\n}\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  objectOrReference: StoreObject | Reference;\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: any[];\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\nexport interface StoreReaderConfig {\n  cache: InMemoryCache,\n  addTypename?: boolean;\n  resultCacheMaxSize?: number;\n  canonizeResults?: boolean;\n  canon?: ObjectCanon;\n}\n\n// Arguments type after keyArgs translation.\ntype ExecSelectionSetKeyArgs = [\n  SelectionSetNode,\n  StoreObject | Reference,\n  ReadMergeModifyContext,\n  boolean,\n];\n\nfunction execSelectionSetKeyArgs(\n  options: ExecSelectionSetOptions,\n): ExecSelectionSetKeyArgs {\n  return [\n    options.selectionSet,\n    options.objectOrReference,\n    options.context,\n    // We split out this property so we can pass different values\n    // independently without modifying options.context itself.\n    options.context.canonizeResults,\n  ];\n}\n\nexport class StoreReader {\n  // cached version of executeSelectionSet\n  private executeSelectionSet: OptimisticWrapperFunction<\n    [ExecSelectionSetOptions], // Actual arguments tuple type.\n    ExecResult, // Actual return type.\n    ExecSelectionSetKeyArgs\n  >;\n\n  // cached version of executeSubSelectedArray\n  private executeSubSelectedArray: OptimisticWrapperFunction<\n    [ExecSubSelectedArrayOptions],\n    ExecResult<any>,\n    [ExecSubSelectedArrayOptions]>;\n\n  private config: {\n    cache: InMemoryCache,\n    addTypename: boolean;\n    resultCacheMaxSize?: number;\n    canonizeResults: boolean;\n  };\n\n  private knownResults = new (\n    canUseWeakMap ? WeakMap : Map\n  )<Record<string, any>, SelectionSetNode>();\n\n  public canon: ObjectCanon;\n  public resetCanon() {\n    this.canon = new ObjectCanon;\n  }\n\n  constructor(config: StoreReaderConfig) {\n    this.config = compact(config, {\n      addTypename: config.addTypename !== false,\n      canonizeResults: shouldCanonizeResults(config),\n    });\n\n    this.canon = config.canon || new ObjectCanon;\n\n    this.executeSelectionSet = wrap(options => {\n      const { canonizeResults } = options.context;\n\n      const peekArgs = execSelectionSetKeyArgs(options);\n\n      // Negate this boolean option so we can find out if we've already read\n      // this result using the other boolean value.\n      peekArgs[3] = !canonizeResults;\n\n      const other = this.executeSelectionSet.peek(...peekArgs);\n\n      if (other) {\n        if (canonizeResults) {\n          return {\n            ...other,\n            // If we previously read this result without canonizing it, we can\n            // reuse that result simply by canonizing it now.\n            result: this.canon.admit(other.result),\n          };\n        }\n        // If we previously read this result with canonization enabled, we can\n        // return that canonized result as-is.\n        return other;\n      }\n\n      maybeDependOnExistenceOfEntity(\n        options.context.store,\n        options.enclosingRef.__ref,\n      );\n\n      // Finally, if we didn't find any useful previous results, run the real\n      // execSelectionSetImpl method with the given options.\n      return this.execSelectionSetImpl(options);\n\n    }, {\n      max: this.config.resultCacheMaxSize,\n      keyArgs: execSelectionSetKeyArgs,\n      // Note that the parameters of makeCacheKey are determined by the\n      // array returned by keyArgs.\n      makeCacheKey(selectionSet, parent, context, canonizeResults) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(\n            selectionSet,\n            isReference(parent) ? parent.__ref : parent,\n            context.varString,\n            canonizeResults,\n          );\n        }\n      }\n    });\n\n    this.executeSubSelectedArray = wrap((options: ExecSubSelectedArrayOptions) => {\n      maybeDependOnExistenceOfEntity(\n        options.context.store,\n        options.enclosingRef.__ref,\n      );\n      return this.execSubSelectedArrayImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey({ field, array, context }) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(\n            field,\n            array,\n            context.varString,\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   * @param  {DocumentNode} query A parsed GraphQL query document\n   * @param  {Store} store The Apollo Client store object\n   * @return {result: Object, complete: [boolean]}\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    rootId = 'ROOT_QUERY',\n    variables,\n    returnPartialData = true,\n    canonizeResults = this.config.canonizeResults,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    const policies = this.config.cache.policies;\n\n    variables = {\n      ...getDefaultValues(getQueryDefinition(query)),\n      ...variables!,\n    };\n\n    const rootRef = makeReference(rootId);\n    const execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: {\n        store,\n        query,\n        policies,\n        variables,\n        varString: canonicalStringify(variables),\n        canonizeResults,\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n        path: [],\n      },\n    });\n\n    const hasMissingFields =\n      execResult.missing && execResult.missing.length > 0;\n    if (hasMissingFields && !returnPartialData) {\n      throw execResult.missing![0];\n    }\n\n    return {\n      result: execResult.result,\n      missing: execResult.missing,\n      complete: !hasMissingFields,\n    };\n  }\n\n  public isFresh(\n    result: Record<string, any>,\n    parent: StoreObject | Reference,\n    selectionSet: SelectionSetNode,\n    context: ReadMergeModifyContext,\n  ): boolean {\n    if (supportsResultCaching(context.store) &&\n        this.knownResults.get(result) === selectionSet) {\n      const latest = this.executeSelectionSet.peek(\n        selectionSet,\n        parent,\n        context,\n        // If result is canonical, then it could only have been previously\n        // cached by the canonizing version of executeSelectionSet, so we can\n        // avoid checking both possibilities here.\n        this.canon.isKnown(result),\n      );\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Uncached version of executeSelectionSet.\n  private execSelectionSetImpl({\n    selectionSet,\n    objectOrReference,\n    enclosingRef,\n    context,\n  }: ExecSelectionSetOptions): ExecResult {\n    if (isReference(objectOrReference) &&\n        !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n        !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: this.canon.empty,\n        missing: [missingFromInvariant(\n          new InvariantError(\n            `Dangling reference to missing ${objectOrReference.__ref} object`\n          ),\n          context,\n        )],\n      };\n    }\n\n    const { variables, policies, store } = context;\n    const objectsToMerge: { [key: string]: any }[] = [];\n    const finalResult: ExecResult = { result: null };\n    const typename = store.getFieldValue<string>(objectOrReference, \"__typename\");\n\n    if (this.config.addTypename &&\n        typeof typename === \"string\" &&\n        !policies.rootIdsByTypename[typename]) {\n      // Ensure we always include a default value for the __typename\n      // field, if we have one, and this.config.addTypename is true. Note\n      // that this field can be overridden by other merged objects.\n      objectsToMerge.push({ __typename: typename });\n    }\n\n    function getMissing() {\n      return finalResult.missing || (finalResult.missing = []);\n    }\n\n    function handleMissing<T>(result: ExecResult<T>): T {\n      if (result.missing) getMissing().push(...result.missing);\n      return result.result;\n    }\n\n    const workSet = new Set(selectionSet.selections);\n\n    workSet.forEach(selection => {\n      // Omit fields with directives @skip(if: <truthy value>) or\n      // @include(if: <falsy value>).\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        let fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference,\n        }, context);\n\n        const resultName = resultKeyNameFromField(selection);\n        context.path.push(resultName);\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            getMissing().push(\n              missingFromInvariant(\n                new InvariantError(`Can't find field '${\n                  selection.name.value\n                }' on ${\n                  isReference(objectOrReference)\n                    ? objectOrReference.__ref + \" object\"\n                    : \"object \" + JSON.stringify(objectOrReference, null, 2)\n                }`),\n                context,\n              ),\n            );\n          }\n\n        } else if (Array.isArray(fieldValue)) {\n          fieldValue = handleMissing(this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            enclosingRef,\n            context,\n          }));\n\n        } else if (!selection.selectionSet) {\n          // If the field does not have a selection set, then we handle it\n          // as a scalar value. To keep this.canon from canonicalizing\n          // this value, we use this.canon.pass to wrap fieldValue in a\n          // Pass object that this.canon.admit will later unwrap as-is.\n          if (context.canonizeResults) {\n            fieldValue = this.canon.pass(fieldValue);\n          }\n\n        } else if (fieldValue != null) {\n          // In this case, because we know the field has a selection set,\n          // it must be trying to query a GraphQLObjectType, which is why\n          // fieldValue must be != null.\n          fieldValue = handleMissing(this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue as StoreObject | Reference,\n            enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n            context,\n          }));\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push({ [resultName]: fieldValue });\n        }\n\n        invariant(context.path.pop() === resultName);\n\n      } else {\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.fragmentMap,\n        );\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    // Perform a single merge at the end so that we can avoid making more\n    // defensive shallow copies than necessary.\n    const merged = mergeDeepArray(objectsToMerge);\n    finalResult.result = context.canonizeResults\n      ? this.canon.admit(merged)\n      // Since this.canon is normally responsible for freezing results (only in\n      // development), freeze them manually if canonization is disabled.\n      : maybeDeepFreeze(merged);\n\n    // Store this result with its selection set so that we can quickly\n    // recognize it again in the StoreReader#isFresh method.\n    this.knownResults.set(finalResult.result, selectionSet);\n\n    return finalResult;\n  }\n\n  // Uncached version of executeSubSelectedArray.\n  private execSubSelectedArrayImpl({\n    field,\n    array,\n    enclosingRef,\n    context,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: MissingFieldError[] | undefined;\n\n    function handleMissing<T>(childResult: ExecResult<T>, i: number): T {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push(...childResult.missing);\n      }\n\n      invariant(context.path.pop() === i);\n\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map((item, i) => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      context.path.push(i);\n\n      // This is a nested array, recurse\n      if (Array.isArray(item)) {\n        return handleMissing(this.executeSubSelectedArray({\n          field,\n          array: item,\n          enclosingRef,\n          context,\n        }), i);\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          enclosingRef: isReference(item) ? item : enclosingRef,\n          context,\n        }), i);\n      }\n\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      invariant(context.path.pop() === i);\n\n      return item;\n    });\n\n    return {\n      result: context.canonizeResults ? this.canon.admit(array) : array,\n      missing,\n    };\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  store: NormalizedCache,\n  field: FieldNode,\n  fieldValue: any,\n) {\n  if (!field.selectionSet) {\n    const workSet = new Set([fieldValue]);\n    workSet.forEach(value => {\n      if (isNonNullObject(value)) {\n        invariant(\n          !isReference(value),\n          `Missing selection set for object of type ${\n            getTypenameFromStoreObject(store, value)\n          } returned for query field ${field.name.value}`,\n        );\n        Object.values(value).forEach(workSet.add, workSet);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}