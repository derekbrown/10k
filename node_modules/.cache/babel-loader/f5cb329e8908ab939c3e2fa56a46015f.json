{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.camelCase = exports.capitalize = void 0;\n\nconst capitalize = word => word.split('').map((letter, index) => index ? letter.toLowerCase() : letter.toUpperCase()).join('');\n\nexports.capitalize = capitalize;\n\nconst camelCase = text => {\n  if (text !== 'unknown') {\n    const regex = /[^a-z0-9]|\\s+|\\r?\\n|\\r/gmi;\n    return text.split(regex).map((word, index) => index ? exports.capitalize(word) : word.toLowerCase()).join('');\n  } else {\n    return '';\n  }\n};\n\nexports.camelCase = camelCase;","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/@zoralabs/nft-components/dist/utils/camelCase.js"],"names":["Object","defineProperty","exports","value","camelCase","capitalize","word","split","map","letter","index","toLowerCase","toUpperCase","join","text","regex"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACG,UAAR,GAAqB,KAAK,CAA9C;;AACA,MAAMA,UAAU,GAAIC,IAAD,IAAUA,IAAI,CAC5BC,KADwB,CAClB,EADkB,EAExBC,GAFwB,CAEpB,CAACC,MAAD,EAASC,KAAT,KAAmBA,KAAK,GAAGD,MAAM,CAACE,WAAP,EAAH,GAA0BF,MAAM,CAACG,WAAP,EAF9B,EAGxBC,IAHwB,CAGnB,EAHmB,CAA7B;;AAIAX,OAAO,CAACG,UAAR,GAAqBA,UAArB;;AACA,MAAMD,SAAS,GAAIU,IAAD,IAAU;AACxB,MAAIA,IAAI,KAAK,SAAb,EAAwB;AACpB,UAAMC,KAAK,GAAG,2BAAd;AACA,WAAOD,IAAI,CACNP,KADE,CACIQ,KADJ,EAEFP,GAFE,CAEE,CAACF,IAAD,EAAOI,KAAP,KAAiBA,KAAK,GAAGR,OAAO,CAACG,UAAR,CAAmBC,IAAnB,CAAH,GAA8BA,IAAI,CAACK,WAAL,EAFtD,EAGFE,IAHE,CAGG,EAHH,CAAP;AAIH,GAND,MAOK;AACD,WAAO,EAAP;AACH;AACJ,CAXD;;AAYAX,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.camelCase = exports.capitalize = void 0;\nconst capitalize = (word) => word\n    .split('')\n    .map((letter, index) => index ? letter.toLowerCase() : letter.toUpperCase())\n    .join('');\nexports.capitalize = capitalize;\nconst camelCase = (text) => {\n    if (text !== 'unknown') {\n        const regex = /[^a-z0-9]|\\s+|\\r?\\n|\\r/gmi;\n        return text\n            .split(regex)\n            .map((word, index) => index ? exports.capitalize(word) : word.toLowerCase())\n            .join('');\n    }\n    else {\n        return '';\n    }\n};\nexports.camelCase = camelCase;\n"]},"metadata":{},"sourceType":"script"}