{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useNFT = void 0;\n\nconst react_1 = require(\"react\");\n\nconst NFTFetchContext_1 = require(\"../context/NFTFetchContext\");\n\nconst useOpenseaNFT_1 = require(\"./useOpenseaNFT\");\n\nconst addresses_1 = require(\"../constants/addresses\");\n\nconst useZNFT_1 = require(\"./useZNFT\");\n\nconst useNFTIndexer_1 = require(\"./useNFTIndexer\");\n/**\n * Fetches on-chain NFT data and pricing for the given zNFT id\n *\n * @param contractAddress address of the contract, if null and tokenID is passed in, a ZNFT is assumed\n * @param tokenId id of NFT to fetch blockchain information for\n * @param options SWR flags and an option to load currency info\n * @returns useNFTType hook results include loading, error, and chainNFT data.\n */\n\n\nfunction useNFT(contractAddress, tokenId) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const fetcher = react_1.useContext(NFTFetchContext_1.NFTFetchContext);\n\n  if (!contractAddress) {\n    contractAddress = addresses_1.ZORA_MEDIA_CONTRACT_BY_NETWORK[fetcher.networkId];\n  }\n\n  const isZoraContractAddress = contractAddress === addresses_1.ZORA_MEDIA_CONTRACT_BY_NETWORK[fetcher.networkId];\n  const openseaNFT = useOpenseaNFT_1.useOpenseaNFT(!options.useBetaIndexer && !isZoraContractAddress ? contractAddress : undefined, !options.useBetaIndexer && !isZoraContractAddress ? tokenId : undefined, options);\n  const betaIndexerNFT = useNFTIndexer_1.useNFTIndexer(options.useBetaIndexer ? contractAddress : undefined, options.useBetaIndexer ? tokenId : undefined, options);\n  const zoraNFT = useZNFT_1.useZNFT(!options.useBetaIndexer && isZoraContractAddress ? tokenId : undefined, options);\n  let data = options.useBetaIndexer ? betaIndexerNFT : isZoraContractAddress ? zoraNFT : openseaNFT;\n  return {\n    currencyLoaded: !!data.currencyLoaded,\n    error: data.error,\n    data: data.data\n  };\n}\n\nexports.useNFT = useNFT;","map":{"version":3,"sources":["/Users/derekbrown/workspace/10kdigits/node_modules/@zoralabs/nft-hooks/dist/hooks/useNFT.js"],"names":["Object","defineProperty","exports","value","useNFT","react_1","require","NFTFetchContext_1","useOpenseaNFT_1","addresses_1","useZNFT_1","useNFTIndexer_1","contractAddress","tokenId","options","fetcher","useContext","NFTFetchContext","ZORA_MEDIA_CONTRACT_BY_NETWORK","networkId","isZoraContractAddress","openseaNFT","useOpenseaNFT","useBetaIndexer","undefined","betaIndexerNFT","useNFTIndexer","zoraNFT","useZNFT","data","currencyLoaded","error"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,4BAAD,CAAjC;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,wBAAD,CAA3B;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAC,iBAAD,CAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,MAAT,CAAgBQ,eAAhB,EAAiCC,OAAjC,EAAwD;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACpD,QAAMC,OAAO,GAAGV,OAAO,CAACW,UAAR,CAAmBT,iBAAiB,CAACU,eAArC,CAAhB;;AACA,MAAI,CAACL,eAAL,EAAsB;AAClBA,IAAAA,eAAe,GAAGH,WAAW,CAACS,8BAAZ,CAA2CH,OAAO,CAACI,SAAnD,CAAlB;AACH;;AACD,QAAMC,qBAAqB,GAAGR,eAAe,KAAKH,WAAW,CAACS,8BAAZ,CAA2CH,OAAO,CAACI,SAAnD,CAAlD;AACA,QAAME,UAAU,GAAGb,eAAe,CAACc,aAAhB,CAA8B,CAACR,OAAO,CAACS,cAAT,IAA2B,CAACH,qBAA5B,GAAoDR,eAApD,GAAsEY,SAApG,EAA+G,CAACV,OAAO,CAACS,cAAT,IAA2B,CAACH,qBAA5B,GAAoDP,OAApD,GAA8DW,SAA7K,EAAwLV,OAAxL,CAAnB;AACA,QAAMW,cAAc,GAAGd,eAAe,CAACe,aAAhB,CAA8BZ,OAAO,CAACS,cAAR,GAAyBX,eAAzB,GAA2CY,SAAzE,EAAoFV,OAAO,CAACS,cAAR,GAAyBV,OAAzB,GAAmCW,SAAvH,EAAkIV,OAAlI,CAAvB;AACA,QAAMa,OAAO,GAAGjB,SAAS,CAACkB,OAAV,CAAkB,CAACd,OAAO,CAACS,cAAT,IAA2BH,qBAA3B,GAAmDP,OAAnD,GAA6DW,SAA/E,EAA0FV,OAA1F,CAAhB;AACA,MAAIe,IAAI,GAAGf,OAAO,CAACS,cAAR,GACLE,cADK,GAELL,qBAAqB,GACjBO,OADiB,GAEjBN,UAJV;AAKA,SAAO;AACHS,IAAAA,cAAc,EAAE,CAAC,CAACD,IAAI,CAACC,cADpB;AAEHC,IAAAA,KAAK,EAAEF,IAAI,CAACE,KAFT;AAGHF,IAAAA,IAAI,EAAEA,IAAI,CAACA;AAHR,GAAP;AAKH;;AACD3B,OAAO,CAACE,MAAR,GAAiBA,MAAjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useNFT = void 0;\nconst react_1 = require(\"react\");\nconst NFTFetchContext_1 = require(\"../context/NFTFetchContext\");\nconst useOpenseaNFT_1 = require(\"./useOpenseaNFT\");\nconst addresses_1 = require(\"../constants/addresses\");\nconst useZNFT_1 = require(\"./useZNFT\");\nconst useNFTIndexer_1 = require(\"./useNFTIndexer\");\n/**\n * Fetches on-chain NFT data and pricing for the given zNFT id\n *\n * @param contractAddress address of the contract, if null and tokenID is passed in, a ZNFT is assumed\n * @param tokenId id of NFT to fetch blockchain information for\n * @param options SWR flags and an option to load currency info\n * @returns useNFTType hook results include loading, error, and chainNFT data.\n */\nfunction useNFT(contractAddress, tokenId, options = {}) {\n    const fetcher = react_1.useContext(NFTFetchContext_1.NFTFetchContext);\n    if (!contractAddress) {\n        contractAddress = addresses_1.ZORA_MEDIA_CONTRACT_BY_NETWORK[fetcher.networkId];\n    }\n    const isZoraContractAddress = contractAddress === addresses_1.ZORA_MEDIA_CONTRACT_BY_NETWORK[fetcher.networkId];\n    const openseaNFT = useOpenseaNFT_1.useOpenseaNFT(!options.useBetaIndexer && !isZoraContractAddress ? contractAddress : undefined, !options.useBetaIndexer && !isZoraContractAddress ? tokenId : undefined, options);\n    const betaIndexerNFT = useNFTIndexer_1.useNFTIndexer(options.useBetaIndexer ? contractAddress : undefined, options.useBetaIndexer ? tokenId : undefined, options);\n    const zoraNFT = useZNFT_1.useZNFT(!options.useBetaIndexer && isZoraContractAddress ? tokenId : undefined, options);\n    let data = options.useBetaIndexer\n        ? betaIndexerNFT\n        : isZoraContractAddress\n            ? zoraNFT\n            : openseaNFT;\n    return {\n        currencyLoaded: !!data.currencyLoaded,\n        error: data.error,\n        data: data.data,\n    };\n}\nexports.useNFT = useNFT;\n"]},"metadata":{},"sourceType":"script"}