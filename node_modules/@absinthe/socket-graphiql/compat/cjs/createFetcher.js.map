{"version":3,"file":"createFetcher.js","sources":["../../src/SubscriptionsClient.js","../../src/createFetcher.js"],"sourcesContent":["// @flow\n\nimport * as withAbsintheSocket from \"@absinthe/socket\";\nimport {requestFromCompat} from \"@jumpn/utils-graphql\";\nimport {Socket as PhoenixSocket} from \"phoenix\";\n\nimport type {\n  AbsintheSocket,\n  GqlRequest,\n  SubscriptionPayload\n} from \"@absinthe/socket\";\nimport type {GqlRequestCompat} from \"@jumpn/utils-graphql/dist/types\";\nimport type {SocketOpts} from \"phoenix\";\n\ntype SubscriptionCallback = (\n  error: ?Error,\n  payload?: SubscriptionPayload<any>\n) => void;\n\nconst observe = (subscriptionsClient, notifier, callback) =>\n  withAbsintheSocket.observe(subscriptionsClient.absintheSocket, notifier, {\n    onAbort: callback,\n    onResult: result => callback(null, result)\n  });\n\nconst generateRequestKey = subscriptionsClient => {\n  subscriptionsClient.requestsCount += 1;\n\n  return String(subscriptionsClient.requestsCount);\n};\n\nconst storeRequest = (subscriptionsClient, request) => {\n  const requestKey = generateRequestKey(subscriptionsClient);\n\n  subscriptionsClient.requests.set(request, requestKey);\n\n  return requestKey;\n};\n\nconst storeRequestIfNeeded = (subscriptionsClient, request) => {\n  const requestKey = subscriptionsClient.requests.get(request);\n\n  return requestKey !== undefined\n    ? requestKey\n    : storeRequest(subscriptionsClient, request);\n};\n\nconst findNotifier = (subscriptionsClient, request) =>\n  subscriptionsClient.absintheSocket.notifiers.find(\n    notifier => notifier.request === request\n  );\n\n// eslint-disable-next-line consistent-return\nconst findRequest = (subscriptionsClient, requestKey) => {\n  for (const [request, key] of subscriptionsClient.requests.entries()) {\n    if (key === requestKey) return request;\n  }\n};\n\nconst cancel = (subscriptionsClient, notifier) => {\n  withAbsintheSocket.cancel(subscriptionsClient.absintheSocket, notifier);\n\n  subscriptionsClient.requests.delete(notifier.request);\n};\n\nexport default class SubscriptionsClient {\n  absintheSocket: AbsintheSocket;\n\n  requestsCount = 0;\n\n  requests: Map<GqlRequest<any>, string>;\n\n  constructor(socketUrl: string, options: SocketOpts) {\n    this.absintheSocket = withAbsintheSocket.create(\n      new PhoenixSocket(socketUrl, options)\n    );\n\n    this.requests = new Map();\n  }\n\n  close() {\n    this.absintheSocket.phoenixSocket.disconnect();\n  }\n\n  subscribe(\n    requestCompat: GqlRequestCompat<any>,\n    callback: SubscriptionCallback\n  ): string {\n    const notifier = withAbsintheSocket.send(\n      this.absintheSocket,\n      requestFromCompat(requestCompat)\n    );\n\n    const requestKey = storeRequestIfNeeded(this, notifier.request);\n\n    observe(this, notifier, callback);\n\n    return requestKey;\n  }\n\n  unsubscribe(requestKey: string) {\n    const request = findRequest(this, requestKey);\n\n    if (request) {\n      const notifier = findNotifier(this, request);\n\n      if (notifier) cancel(this, notifier);\n    }\n  }\n\n  unsubscribeAll() {\n    this.absintheSocket.notifiers.forEach(notifier => cancel(this, notifier));\n  }\n}\n","// @flow\n\nimport {getOperationType} from \"@jumpn/utils-graphql\";\n\nimport type {GqlRequestCompat} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport SubscriptionClient from \"./SubscriptionsClient\";\n\nconst parseIfJson = text => {\n  try {\n    return JSON.parse(text);\n  } catch (error) {\n    return text;\n  }\n};\n\nconst responseToText = response => response.text();\n\nconst postJson = (url: string, body: Object): Promise<string> =>\n  fetch(url, {\n    method: \"post\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body),\n    credentials: \"include\"\n  })\n    .then(responseToText)\n    .then(parseIfJson);\n\nconst getSubscribeCallback = observer => (error, result) => {\n  if (error) {\n    observer.error(error);\n  } else {\n    observer.next(result);\n  }\n};\n\nconst subscribeWithObservable = (\n  state,\n  subscriptionsClient,\n  subscriptionSentMessage,\n  gqlRequestCompat\n) => ({\n  subscribe: (observer: {error: Function, next: Function}) => {\n    observer.next(subscriptionSentMessage);\n\n    state.activeSubscriptionId = subscriptionsClient.subscribe(\n      gqlRequestCompat,\n      getSubscribeCallback(observer)\n    );\n  }\n});\n\n/**\n * Creates a Fetcher using the given arguments\n */\nconst createFetcher = (\n  apiUrl: string,\n  subscriptionsClient: SubscriptionClient,\n  subscriptionSentMessage: string\n) => {\n  const state = {activeSubscriptionId: undefined};\n\n  return (gqlRequestCompat: GqlRequestCompat<any>) => {\n    if (state.activeSubscriptionId) {\n      subscriptionsClient.unsubscribe(state.activeSubscriptionId);\n    }\n\n    return getOperationType(gqlRequestCompat.query) !== \"subscription\"\n      ? postJson(apiUrl, gqlRequestCompat)\n      : subscribeWithObservable(\n          state,\n          subscriptionsClient,\n          subscriptionSentMessage,\n          gqlRequestCompat\n        );\n  };\n};\n\nexport default createFetcher;\n"],"names":["observe","subscriptionsClient","notifier","callback","withAbsintheSocket","absintheSocket","onAbort","onResult","result","generateRequestKey","requestsCount","String","storeRequest","request","requestKey","requests","set","storeRequestIfNeeded","get","undefined","findNotifier","notifiers","find","findRequest","entries","key","cancel","delete","SubscriptionsClient","socketUrl","options","PhoenixSocket","Map","phoenixSocket","disconnect","requestCompat","requestFromCompat","forEach","parseIfJson","text","JSON","parse","error","responseToText","response","postJson","url","body","fetch","method","headers","Accept","stringify","credentials","then","getSubscribeCallback","observer","next","subscribeWithObservable","state","subscriptionSentMessage","gqlRequestCompat","subscribe","activeSubscriptionId","createFetcher","apiUrl","unsubscribe","getOperationType","query"],"mappings":"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"}