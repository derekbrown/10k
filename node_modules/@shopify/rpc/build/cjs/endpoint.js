'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');
var memory = require('./memory.js');
var messenger = require('./strategies/messenger.js');

const APPLY = 0;
const RESULT = 1;
const TERMINATE = 2;
const FUNCTION = '_@f';
function createEndpoint(initialMessenger, {
  uuid = defaultUuid,
  createFunctionStrategy = messenger.createMessengerFunctionStrategy
} = {}) {
  let terminated = false;
  let messenger = initialMessenger;
  const eventListeners = new Set();
  const functions = createFunctionStrategy({
    uuid,
    toWire,
    fromWire,
    messenger: {
      postMessage: (...args) => messenger.postMessage(...args),
      addEventListener: (_, listener) => {
        eventListeners.add(listener);
      },
      removeEventListener: (_, listener) => {
        eventListeners.delete(listener);
      }
    }
  });
  const activeApi = new Map();

  function terminate() {
    terminated = true;
    activeApi.clear();
    messenger.removeEventListener('message', listener);

    if (functions.terminate != null) {
      functions.terminate();
    }
  }

  function listener(_x) {
    return _listener.apply(this, arguments);
  }

  function _listener() {
    _listener = _rollupPluginBabelHelpers.asyncToGenerator(function* (event) {
      for (const listener of [...eventListeners]) {
        listener(event);
      }

      const {
        data
      } = event;

      if (data == null) {
        return;
      }

      switch (data[0]) {
        case TERMINATE:
          {
            terminate();
            break;
          }

        case APPLY:
          {
            const stackFrame = new memory.StackFrame();
            const [, id, target, args] = data;
            const func = activeApi.get(target);

            try {
              if (func == null) {
                throw new Error(`No '${target}' method is exposed on this endpoint`);
              }

              const result = yield func(...fromWire(args, [stackFrame]));
              const [serializedResult, transferables] = toWire(result);
              messenger.postMessage([RESULT, id, undefined, serializedResult], transferables);
            } catch (error) {
              const {
                name,
                message,
                stack
              } = error;
              messenger.postMessage([RESULT, id, {
                name,
                message,
                stack
              }]);
            } finally {
              stackFrame.release();
            }

            break;
          }
      }
    });
    return _listener.apply(this, arguments);
  }

  messenger.addEventListener('message', listener);
  return {
    call: new Proxy({}, {
      get(_target, property) {
        return (...args) => {
          if (terminated) {
            throw new Error('You attempted to call a function on a terminated web worker.');
          }

          const id = uuid();
          const done = new Promise((resolve, reject) => {
            messenger.addEventListener('message', function listener({
              data
            }) {
              if (data == null || data[0] !== RESULT || data[1] !== id) {
                return;
              }

              messenger.removeEventListener('message', listener);
              const [,, errorResult, value] = data;

              if (errorResult == null) {
                resolve(fromWire(value));
              } else {
                const error = new Error();
                Object.assign(error, errorResult);
                reject(error);
              }
            });
          });
          const [serializedArgs, transferables] = toWire(args);
          messenger.postMessage([APPLY, id, property, serializedArgs], transferables);
          return done;
        };
      }

    }),
    functions,

    replace(newMessenger) {
      const oldMessenger = messenger;
      messenger = newMessenger;
      oldMessenger.removeEventListener('message', listener);
      newMessenger.addEventListener('message', listener);
    },

    expose(api) {
      for (const key of Object.keys(api)) {
        const value = api[key];

        if (typeof value === 'function') {
          activeApi.set(key, value);
        } else {
          activeApi.delete(key);
        }
      }
    },

    terminate() {
      terminate();

      if (messenger.terminate) {
        messenger.terminate();
      } else {
        messenger.postMessage([TERMINATE]);
      }
    }

  };

  function toWire(value) {
    if (typeof value === 'object') {
      if (value == null) {
        return [value];
      }

      const transferables = [];

      if (Array.isArray(value)) {
        const _result = value.map(item => {
          const [result, nestedTransferables = []] = toWire(item);
          transferables.push(...nestedTransferables);
          return result;
        });

        return [_result, transferables];
      }

      const result = Object.keys(value).reduce((object, key) => {
        const [result, nestedTransferables = []] = toWire(value[key]);
        transferables.push(...nestedTransferables);
        return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, object), {}, {
          [key]: result
        });
      }, {});
      return [result, transferables];
    }

    if (typeof value === 'function') {
      const [result, transferables] = functions.toWire(value);
      return [{
        [FUNCTION]: result
      }, transferables];
    }

    return [value];
  }

  function fromWire(value, retainedBy = []) {
    if (typeof value === 'object') {
      if (value == null) {
        return value;
      }

      if (Array.isArray(value)) {
        return value.map(value => fromWire(value, retainedBy));
      }

      if (value[FUNCTION]) {
        return functions.fromWire(value[FUNCTION], retainedBy);
      }

      return Object.keys(value).reduce((object, key) => _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, object), {}, {
        [key]: fromWire(value[key], retainedBy)
      }), {});
    }

    return value;
  }
}

function defaultUuid() {
  return `${uuidSegment()}-${uuidSegment()}-${uuidSegment()}-${uuidSegment()}`;
}

function uuidSegment() {
  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16);
}

exports.createEndpoint = createEndpoint;
