import * as path from 'path';
import { getOptions } from 'loader-utils';
import SingleEntryPlugin from 'webpack/lib/SingleEntryPlugin';
import WebWorkerTemplatePlugin from 'webpack/lib/webworker/WebWorkerTemplatePlugin';
import FetchCompileWasmTemplatePlugin from 'webpack/lib/web/FetchCompileWasmTemplatePlugin';
import { WebWorkerPlugin } from './plugin.esnext';

const NAME = 'WebWorker';
function pitch(request) {
  this.cacheable(false);
  const callback = this.async();
  const {
    context,
    resourcePath,
    _compiler: compiler,
    _compilation: compilation
  } = this;

  if (compiler.options.output.globalObject !== 'self') {
    return callback(new Error('webpackConfig.output.globalObject is not set to "self", which will cause chunk loading in the worker to fail. Please change the value to "self" for any builds targeting the browser, or set the {noop: true} option on the @shopify/web-worker babel plugin.'));
  }

  const plugin = (compiler.options.plugins || []).find(WebWorkerPlugin.isInstance);

  if (plugin == null) {
    throw new Error('You must also include the WebWorkerPlugin from `@shopify/web-worker` when using the Babel plugin.');
  }

  const options = getOptions(this) || {};
  const {
    name = String(plugin.workerId++),
    plain = false
  } = options;
  const virtualModule = path.join(path.dirname(resourcePath), `${path.basename(resourcePath, path.extname(resourcePath))}.worker.js`);

  if (!plain) {
    plugin.virtualModules.writeModule(virtualModule, `
        import * as api from ${JSON.stringify(request)};
        import {expose} from '@shopify/web-worker/worker';

        expose(api);
      `);
  }

  const workerOptions = {
    filename: addWorkerSubExtension(compiler.options.output.filename),
    chunkFilename: addWorkerSubExtension(compiler.options.output.chunkFilename),
    globalObject: plugin && plugin.options.globalObject || 'self'
  };
  const workerCompiler = compilation.createChildCompiler(NAME, workerOptions, []);
  workerCompiler.context = compiler.context;
  new WebWorkerTemplatePlugin({}).apply(workerCompiler);
  new FetchCompileWasmTemplatePlugin({
    mangleImports: compiler.options.optimization.mangleWasmImports
  }).apply(workerCompiler);
  new SingleEntryPlugin(context, plain ? request : virtualModule, name).apply(workerCompiler);

  for (const aPlugin of plugin.options.plugins || []) {
    aPlugin.apply(workerCompiler);
  }

  const subCache = `subcache ${__dirname} ${request}`;
  workerCompiler.hooks.compilation.tap(NAME, compilation => {
    if (!compilation.cache) {
      return;
    }

    if (!compilation.cache[subCache]) {
      compilation.cache[subCache] = {};
    }

    compilation.cache = compilation.cache[subCache];
  });
  workerCompiler.runAsChild((error, entries, compilation) => {
    let finalError;

    if (!error && compilation.errors && compilation.errors.length) {
      finalError = compilation.errors[0];
    }

    const entry = entries && entries[0] && entries[0].files[0];

    if (!finalError && !entry) {
      finalError = new Error(`WorkerPlugin: no entry for ${request}`);
    }

    if (finalError) {
      return callback(finalError);
    }

    return callback(null, `export default __webpack_public_path__ + ${JSON.stringify(entry)};`);
  });
}

function addWorkerSubExtension(file) {
  return file.replace(/\.([a-z]+)$/i, '.worker.$1');
}

const loader = {
  pitch
};

export default loader;
export { pitch };
