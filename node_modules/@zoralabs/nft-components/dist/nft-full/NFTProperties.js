"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NFTProperties = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_2 = require("react");
const useMediaContext_1 = require("../context/useMediaContext");
const nft_hooks_1 = require("@zoralabs/nft-hooks");
const NFTDataContext_1 = require("../context/NFTDataContext");
const InfoContainer_1 = require("./InfoContainer");
const NFTProperties = ({ className }) => {
    const { nft: { data }, } = react_2.useContext(NFTDataContext_1.NFTDataContext);
    const { getStyles } = useMediaContext_1.useMediaContext();
    const { metadata } = nft_hooks_1.useNFTMetadata(data === null || data === void 0 ? void 0 : data.nft.metadataURI);
    const renderAttributes = (attributes) => {
        function formatAttributes(obj) {
            if (Array.isArray(obj)) {
                return obj;
            }
            else {
                const array = Object.keys(obj).length === 0 ? false : Object.entries(obj);
                if (array !== false) {
                    return array.map((a) => ({
                        trait_type: a[0],
                        value: a[1],
                    }));
                }
                else {
                    return [];
                }
            }
        }
        const formattedAttributes = formatAttributes(attributes);
        if (!attributes || !formattedAttributes.length) {
            return null;
        }
        return (jsx_runtime_1.jsx(InfoContainer_1.InfoContainer, Object.assign({ className: className, titleString: "PROPERTIES_TITLE" }, { children: jsx_runtime_1.jsx("div", Object.assign({}, getStyles("propertiesGrid"), { children: formattedAttributes.map((attribute, index) => {
                    var _a;
                    return (react_1.createElement("div", Object.assign({}, getStyles("propertiesItem"), { key: `${(_a = data === null || data === void 0 ? void 0 : data.nft) === null || _a === void 0 ? void 0 : _a.tokenId}${index}` }),
                        (attribute === null || attribute === void 0 ? void 0 : attribute.trait_type) && (jsx_runtime_1.jsx("span", Object.assign({}, getStyles("propertiesLabel"), { children: attribute === null || attribute === void 0 ? void 0 : attribute.trait_type }), void 0)),
                        (attribute === null || attribute === void 0 ? void 0 : attribute.value) && jsx_runtime_1.jsx("span", { children: attribute === null || attribute === void 0 ? void 0 : attribute.value }, void 0)));
                }) }), void 0) }), void 0));
    };
    const getContent = () => {
        var _a;
        if (data && metadata !== undefined && "attributes" in metadata) {
            return renderAttributes(metadata === null || metadata === void 0 ? void 0 : metadata.attributes);
        }
        else if (data && metadata !== undefined && "traits" in metadata) {
            return renderAttributes(metadata === null || metadata === void 0 ? void 0 : metadata.traits);
        }
        else if (data && metadata === undefined && "openseaInfo" in data) {
            // @ts-ignore
            return renderAttributes((_a = data === null || data === void 0 ? void 0 : data.openseaInfo) === null || _a === void 0 ? void 0 : _a.traits);
        }
        else {
            return jsx_runtime_1.jsx(react_2.Fragment, {}, void 0);
        }
    };
    return data ? getContent() : null;
};
exports.NFTProperties = NFTProperties;
