"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useNFTIndexerQuery = void 0;
const tslib_1 = require("tslib");
const react_1 = require("react");
const swr_1 = tslib_1.__importDefault(require("swr"));
const NFTFetchContext_1 = require("../context/NFTFetchContext");
const ErrorUtils_1 = require("../fetcher/ErrorUtils");
/**
 * Fetches on-chain NFT data and pricing for the given zNFT id
 *
 * @param contractAddresses address of the contract, if null and tokenID is passed in, a ZNFT is assumed
 * @param tokenId id of NFT to fetch blockchain information for
 * @param approved Auction status approved fetch boolean true = only approved, false = only not approved, null/undefined = any
 * @param options SWR flags and an option to load currency info
 * @returns useNFTType hook results include loading, error, and chainNFT data.
 */
function useNFTIndexerQuery({ collectionAddresses, curatorAddress, onlyAuctions, approved, owner, limit, offset, }, options = {}) {
    options.onErrorRetry = ErrorUtils_1.onErrorRetry;
    const fetcher = react_1.useContext(NFTFetchContext_1.NFTFetchContext);
    if (owner && curatorAddress) {
        throw new Error('Owner and curator address cannot be specified at the same time');
    }
    const nftListData = swr_1.default(!options.initialData && collectionAddresses
        ? [
            'useNFTIndexerGroup',
            owner,
            onlyAuctions,
            approved,
            curatorAddress,
            limit,
            offset,
            ...collectionAddresses,
        ]
        : null, (_, owner, onlyAuctions, approved, curatorAddress, limit, offset, ...collectionAddresses) => {
        if (owner) {
            return fetcher.fetchZoraIndexerUserOwnedNFTs({
                collectionAddresses,
                userAddress: owner,
                limit,
                offset,
            });
        }
        return fetcher.fetchZoraIndexerGroupData({
            collectionAddresses: collectionAddresses,
            curatorAddress: curatorAddress,
            approved,
            onlyAuctions,
            limit: limit || 200,
            offset: offset || 0,
        });
    }, options);
    return {
        error: nftListData.error,
        results: nftListData.data,
    };
}
exports.useNFTIndexerQuery = useNFTIndexerQuery;
