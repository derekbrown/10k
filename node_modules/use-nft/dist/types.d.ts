import type { EthersFetcherConfig } from "./fetchers/ethers/types";
import type { EthereumFetcherConfigDeclaration } from "./fetchers/ethereum/types";
export declare type Address = string;
export declare type NftResultLoading = {
    status: "loading";
    loading: true;
    error: undefined;
    nft: undefined;
    reload: () => Promise<boolean>;
};
export declare type NftResultError = {
    status: "error";
    loading: false;
    error: Error;
    nft: undefined;
    reload: () => Promise<boolean>;
};
export declare type NftResultDone = {
    status: "done";
    loading: false;
    error: undefined;
    nft: NftMetadata;
    reload: () => Promise<boolean>;
};
export declare type NftResult = NftResultLoading | NftResultError | NftResultDone;
export declare type NftMetadata = {
    description: string;
    image: string;
    imageType: "image" | "video" | "unknown";
    metadataUrl: string;
    name: string;
    owner: Address;
    rawData: Record<string, unknown> | null;
};
export declare type NftJsonMetadata = {
    description: string;
    image: string;
    name: string;
    rawData: Record<string, unknown> | null;
};
export declare type ContractMethod = {
    address: string;
    methodName: string;
    methodHash: string;
    humanReadableAbi: [string];
};
export declare type Fetcher<Config> = {
    config: Config;
    fetchNft: (contractAddress: Address, tokenId: string, fetchContext: FetchContext) => Promise<NftMetadata>;
};
export declare type FetcherDeclarationEthers = ["ethers", EthersFetcherConfig];
export declare type FetcherDeclarationEthereum = [
    "ethereum",
    EthereumFetcherConfigDeclaration
];
export declare type FetcherDeclaration = FetcherDeclarationEthers | FetcherDeclarationEthereum;
export declare type FetcherProp = Fetcher<unknown> | FetcherDeclaration;
export declare type ImageProxyFn = (url: string, metadata: NftMetadata) => string;
export declare type JsonProxyFn = (url: string) => string;
export declare type IpfsUrlFn = (cid: string, path?: string) => string;
export declare type FetchContext = {
    imageProxy: ImageProxyFn;
    ipfsUrl: IpfsUrlFn;
    jsonProxy: JsonProxyFn;
};
