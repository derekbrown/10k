import type { Address, FetchContext, IpfsUrlFn, NftJsonMetadata, NftMetadata } from "./types";
declare type NftMetadataMixedInJsonSchema = {
    title: string;
    type: "object";
    properties: {
        name: {
            type: "string";
            description: string;
        };
        image: {
            type: "string";
            description: string;
        };
        description: {
            type: "string";
            description: string;
        };
    };
};
export declare function isAddress(value: string): value is Address;
export declare function identity<T = unknown>(arg: T): T;
export declare function parseNftUrl(url: string): [string, string] | null;
export declare function fetchImage(src: string): Promise<HTMLImageElement>;
export declare function frameImage(image: HTMLImageElement, { scale, padding }?: {
    scale?: number | undefined;
    padding?: number | undefined;
}): string | null;
export declare function ipfsUrlDefault(cid: string, path?: string): string;
export declare function ipfsUrlFromString(ipfsString: string, ipfsUrl: IpfsUrlFn): string;
export declare function normalizeOpenSeaUrl(url: string, tokenId: string): string;
export declare function normalizeNiftyGatewayUrl(url: string): string;
export declare function normalizeTokenUrl(url: string, tokenId: string, fetchContext: FetchContext): string;
export declare function normalizeImageUrl(url: string, fetchContext: FetchContext): string;
export declare function normalizeNftMetadata(data: NftJsonMetadata, fetchContext: FetchContext): NftJsonMetadata;
export declare function fixIncorrectImageField(data: Record<string, unknown>): Record<string, unknown>;
export declare function isNftMetadataMixedInJsonSchema(data: unknown): data is NftMetadataMixedInJsonSchema;
export declare function fixNftMetadataMixedInJsonSchema(data: NftMetadataMixedInJsonSchema): NftJsonMetadata;
export declare function isNftMetadata(data: unknown): data is NftMetadata;
export declare function addressesEqual(addr1: Address, addr2: Address): boolean;
export declare function promiseAny<T>(promises: Promise<T>[]): Promise<T>;
export declare function reversePromise(promise: Promise<unknown>): Promise<unknown>;
export declare class MultipleErrors extends Error {
    errors: Error[];
    constructor(message: string, errors: Error[]);
}
export declare function urlExtensionType(url: string): NftMetadata["imageType"];
export {};
